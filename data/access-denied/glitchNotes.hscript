if(ClientPrefs.shaders != 'All' || ClientPrefs.lowQuality)
	return;

var shidGlitching = false;
var shaders = [];
var shadered = [];

function addShader(shit, hidden){

    var shader = newShader("glitchcolorswap");
    shader.data.uTime.value = [0, 0, 0];
    shader.data.flashColor.value = [1, 1, 1, 1];
    shader.data.daAlpha.value = [1];
    shader.data.flash.value = [0];
    shader.data.binaryIntensity.value = [2.0];
    shader.data.hidden.value = [hidden];
    shaders.push(shader);
    shit.shader = shader;
    shadered.push(shit);
}

function hideShader(shit){
    if(!shadered.contains(shit))return;
    shit.shader.data.hidden.value[0] = true;
}

function showShader(shit){
    if(!shadered.contains(shit))return;
    shit.shader.data.hidden.value[0] = false;
}


function postReceptorGeneration(){
    for(shit in game.dadField.strumNotes){
        trace("adding shader to " + shit);
        addShader(shit, false);
    }
    for(shit in game.playerField.strumNotes){
        trace("adding shader to " + shit);
        addShader(shit, true);
    }

    shidGlitching = true;
}

var receptorGraphic;
var glitchReceptorGraphic;

var isQuant = false;
var isGlitchQuant = false;

function cacheReceptorGraphic(glitch){
    var br:String = 'NOTE_assets';
    if (PlayState.SONG.arrowSkin != null && PlayState.SONG.arrowSkin.length > 1)
        br = PlayState.SONG.arrowSkin;

    var quant = false;

    if(glitch)
        br = "GLITCH" + br;
    
    if (ClientPrefs.noteSkin == 'Quants')
    {
        if (Paths.exists(Paths.getPath("images/pixelUI/QUANT" + br + ".png", "IMAGE")) || Paths.exists(Paths.modsImages("pixelUI/QUANT" + br))) {
            br = "QUANT" + br;
            quant = true;
        }
    }

    if(glitch){
        isGlitchQuant = quant;
        glitchReceptorGraphic = Paths.image("pixelUI/" + br);
    }else{
        isQuant = quant;
        receptorGraphic = Paths.image("pixelUI/" + br);
    }
}

function setupReceptor(strum, glitch){
    var lastAnim:String = null;
    if(strum.animation.curAnim != null) lastAnim = strum.animation.curAnim.name;
    var graphic = receptorGraphic;
    if(glitch){
        strum.isQuant = isGlitchQuant;
        graphic = glitchReceptorGraphic;
    }else
        strum.isQuant = isQuant;

    
    // TODO: add an easy way to do indices for strums
    
    strum.loadGraphic(graphic, true, Math.floor(graphic.width / 4), Math.floor(graphic.height / 5));
    strum.animation.add('static', [strum.noteData]);
    strum.animation.add('pressed', [strum.noteData + 4, strum.noteData + 8], 12, false);
    strum.animation.add('confirm', [strum.noteData + 12, strum.noteData + 16], 16, false);
    strum.scale.set(6, 6);
    strum.playAnim("static", true);
    
    strum.defScale.x = strum.scale.x;
    strum.defScale.y = strum.scale.y;
    strum.updateHitbox();
    strum.antialiasing = false;
    if(glitch)
        showShader(strum);
    else
        hideShader(strum);

    if(lastAnim != null)
    {
        strum.playAnim(lastAnim, true);
    }

}

var glitchedOpp = false;
var glitchedPlr = false;

function opponentNoteHit(note, field){
    if(note.beat >= 348 && note.beat < 444){
        if(note.noteType == 'Glitch'){
            if(!glitchedOpp){
                glitchedOpp = true;
                for(receptor in field.strumNotes)setupReceptor(receptor, true);
            }
        }else if(glitchedOpp){
            glitchedOpp = false;
            for(receptor in field.strumNotes)setupReceptor(receptor, false);
        }
    }
}

function goodNoteHit(note, field){
    if(note.beat >= 348 && note.beat < 444){
        if(note.noteType == 'Glitch'){
            if(!glitchedPlr){
                glitchedPlr = true;
                for(receptor in field.strumNotes)setupReceptor(receptor, true);
            }
        }else if(glitchedPlr){
            glitchedPlr = false;
            for(receptor in field.strumNotes)setupReceptor(receptor, false);
        }
    }
}

function onCreatePost(){
    cacheReceptorGraphic(false);
    cacheReceptorGraphic(true);

    game.dadField.noteRemoved.add((note:Note, field:PlayField) -> {
        if(shaders.contains(note.shader))
            shaders.remove(note.shader);

        if(shadered.contains(note))
            shadered.remove(note);
    });

    for(note in game.allNotes){
        if(note.extraData.get("glitched") == true && !note.isSustainNote){
            var shader = newShader("glitchcolorswap");
            shader.data.uTime.value = [0, 0, 0];
            shader.data.flashColor.value = [1, 1, 1, 1];
            shader.data.daAlpha.value = [1];
            shader.data.flash.value = [0];
            shader.data.binaryIntensity.value = [2.0];
            note.shader = shader;
            shaders.push(shader);
            shadered.push(note);
        }
    }
    modManager.queueFuncOnce(1392, function(ev, step){
        for(receptor in game.dadField.strumNotes)setupReceptor(receptor, false);
    });

    modManager.queueFuncOnce(1792, function(ev, step){
        for(receptor in game.dadField.strumNotes)setupReceptor(receptor, true);
        for(receptor in game.playerField.strumNotes)setupReceptor(receptor, true);
    });

    modManager.queueFuncOnce(2624, function(ev, step){
        for(receptor in game.dadField.strumNotes)setupReceptor(receptor, false);
        for(receptor in game.playerField.strumNotes)setupReceptor(receptor, false);
    });
}

function onStepHit(){
    for(shit in shaders)
        shit.data.binaryIntensity.value[0] = FlxG.random.float(4.0, 16.0);
}

function onUpdate(){
    var removing = [];
    for(shit in shadered){
        if(shit.shader == null)
            removing.push(shit);
        else
            shit.shader.data.uTime.value = shit.colorSwap.shader.uTime.value;
    }
    for(r in removing)
        shadered.remove(r);

}