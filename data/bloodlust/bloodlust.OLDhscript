import flixel.math.FlxMath;
import openfl.filters.ShaderFilter;
import openfl.Lib;

var video; // snow
var video2; //smoke
var video3; // inverted snow
var video4; // animated vignette
var video5; // laugh intermission
var video6; // lets settle this
var object:FlxSprite;
var game;
var curBg:Int = 1;
var glitchBump:FlxSprite;
var school:FlxSprite;
var bgField:ProxyField;
var canMoveCam:Bool = true;

var black:FlxSprite;
var black2:FlxSprite;
var blackTop:FlxSprite;
var redLight:FlxSprite;
var redVin:FlxSprite;
var redVin2:FlxSprite;

var stringShoot:FlxSprite;
var stringShoot2:FlxSprite;
var stringPrep:FlxSprite;
var stringPrep2:FlxSprite;

var fade:FlxSprite;

var frontView:Bool = false;
var redLightTime:Int = 0;

var glowTime:Bool = false; // mm and gf eyes glow

var darkenBg:FlxSprite;
var whiteFade:FlxSprite;

var gfEnding:Bool = false;
var whiteFadeTime:Bool = false;

var stringsTrappedEnd:FlxSprite;

//cam shaking
var shake:Bool = false;
var shakeAmount:Float = 0.012;

// Running anim
var running:Bool = false;
var runIdle:FlxSprite;
var runLeft:FlxSprite;
var runRight:FlxSprite;
var runUp:FlxSprite;
var runDown:FlxSprite;

var gfSleep:FlxSprite;

var momCorruptBlack:Character;
var momSpider:Character;
var momHasAnims:Bool = true; // this is backup for if anims aint finished on time LOLOL
var gfBlack:Character;

var runXoffset = 300;

var hideJudge:Bool = false;

// spider mm
var spiderLegFront:FlxSprite;
var spiderLegBack:FlxSprite;
var spiderBody:FlxSprite;
var spiderGroup:FlxSpriteGroup;
var spiderPunched:FlxSprite;
var spiderTween:FlxTween;

var gfShocked:FlxSprite;
var gfShockedEye:FlxSprite;

//henchmen lights
var henchmanLight:FlxSprite;
var henchmanLight2:FlxSprite;
var henchmanLight3:FlxSprite;
var henchmanLight4:FlxSprite;
var henchWhich:Bool = true;
var henchTime:Bool = false;

// FOREST SHIT
var forestSky:FlxSprite;
var forestTreeThird:FlxSprite;
var forestTreeThird2:FlxSprite;
var forestBushBg:FlxSprite;
var forestBushBg2:FlxSprite;
var forestHench:FlxSprite;
var forestHench2:FlxSprite;
var forestTreeSecond:FlxSprite;
var forestTreeSecond2:FlxSprite;
var forestTree2:FlxSprite;
var forestTree:FlxSprite;
var forestFloor:FlxSprite;
var forestFloor2:FlxSprite;
var forestBush:FlxSprite;
var forestBush2:FlxSprite;
var forestForeground:FlxSprite;
var forestForeground2:FlxSprite;
var forestBf:FlxSprite;

//alt bg stuff
var altFloor:FlxSprite;
var altWall:FlxSprite;
var stringsBg:FlxSprite;
var stringsBgShoot:FlxSprite;
var pulseStrings:Bool = true;

// Slow down forest scroll speed
var rate:Float = 1;
var decreaseRate:Bool = false;

var bfShadow:FlxSprite;
var dadShadow:FlxSprite;

var chroma = newShader("null-and-void/chroma");
function setChroma(chromeOffset){
    chroma.data.rOffset.value = [chromeOffset];
    chroma.data.gOffset.value = [0.0];
    chroma.data.bOffset.value = [chromeOffset * -1];
}

var bloom = newShader("null-and-void/bloom");
bloom.data.blurSize.value = [0.01];
bloom.data.intensity.value = [0.0];


var barrel = newShader("barrel");
barrel.data.chromaticIntensity.value = [0.25];
barrel.data.distortionIntensity.value = [-0.25];
barrel.data.offset.value = [0, 0];
barrel.data.angle.value = [0];
barrel.data.mirrorX.value = [false];
barrel.data.mirrorY.value = [false];
barrel.data.zoom.value=[1.0];
var schoolShader = newShader("fuckywucky", "", 130);
schoolShader.data.time.value = [250];
schoolShader.data.prob.value = [0.15];
schoolShader.data.glitchScale.value = [0.025];

var blur = newShader("zoomblur");
blur.data.posX.value = [0.5];
blur.data.posY.value = [0.5];
blur.data.focusPower.value = [15.0];

var wate = newShader("wate");

//var water = newShader("water");
//water.data.iResolution.value = [Lib.current.stage.stageWidth,Lib.current.stage.stageHeight];


/* var iconShader = newShader("glitchcolorswap");
iconShader.data.uTime.value = [0, 0, 0];
iconShader.data.flashColor.value = [1, 1, 1, 1];
iconShader.data.daAlpha.value = [1];
iconShader.data.flash.value = [0];
iconShader.data.binaryIntensity.value = [4.0]; */

game = PlayState.instance;

var overlay = newShader("overlay");
var arrT:Array<Float> = [35.0,16.0,62.0];   //75.0,26.0,233.0 blue
var arrR:Array<Float> = [203.0, 21.0, 122.0];
var poses:Array<Float> = [0.5,-0.15];
var amtt:Float = 0.175;  //075
var trans:Bool = false;
overlay.data.rT.value = [arrT[0]/255];
overlay.data.gT.value = [arrT[1]/255];
overlay.data.bT.value = [arrT[2]/255];
overlay.data.rR.value = [arrR[0]/255];
overlay.data.gR.value = [arrR[1]/255];
overlay.data.bR.value = [arrR[2]/255];
overlay.data.ypos.value = [poses[1]];
overlay.data.xpos.value = [poses[0]];
overlay.data.amt.value = [amtt];
overlay.data.trans.value = [trans];


/* function onAddSpriteGroups(){
    game.hud = hud = HScriptedHUD.fromFile(
		game.boyfriend.healthIcon,
        game.dad.healthIcon, 
        PlayState.SONG.song,
		game.stats, 
		"VanillaHUD"
	);
} */

function onEndSong(){
    FlxG.save.data.seenCutscene = false;
}

function onCreatePost() {
    FlxSprite.defaultAntialiasing = true;
    ClientPrefs.worldCombos = true;
    ClientPrefs.ratingOffset[0] = 38;
    ClientPrefs.ratingOffset[1] = -2;
    ClientPrefs.comboOffset[0] = 38; //rating
    ClientPrefs.comboOffset[1] = -2;//rating
    ClientPrefs.comboOffset[2] = -43;//combo
    ClientPrefs.comboOffset[3] = -93;//combo

    game.introSnds = [null,null,null,null];

    game.boyfriend.flipX = false; // why is this not just in the character json lol

    game.addCharacterToList("gfRage", 0);
    game.addCharacterToList("momFront", 1);
    game.addCharacterToList("momFrontSecond", 1);
    game.addCharacterToList("gfNorm", 0);
    game.addCharacterToList("momCorrupt", 1);
    game.addCharacterToList("gfDark", 0);

    /*     game.add(game.gfGroup);
    game.add(game.dadGroup);
    game.add(game.boyfriendGroup); */

    // school = new FlxSprite();
    // school.frames = Paths.getSparrowAtlas('animatedEvilSchool');
    // school.animation.addByIndices("idle", 'background 2 instance 1', [1], 12, true);
    // school.animation.play("idle", true);
    // school.scrollFactor.set(1, 1);
    // school.scale.set(8, 8);
    // school.antialiasing = false;
    // school.updateHitbox();
    // school.shader = schoolShader;
    // school.x = -1220;
    // school.y = -1790;
    // game.addBehindDad(school);

    var sky = new FlxSprite(-633, -353).loadGraphic(Paths.image('bloodlust_sky'));
    sky.scale.set(4.9,4.9);
    sky.antialiasing = true;
    sky.scrollFactor.set(0, 0);
    sky.active = false;
    game.addBehindDad(sky);

    var floor = new FlxSprite(-902,-843).loadGraphic(Paths.image('bloodlust_floor'));
    floor.scale.set(9.1,9.1);
    floor.antialiasing = true;
    floor.scrollFactor.set(1, 1);
    game.addBehindDad(floor);

    altFloor = new FlxSprite(-50000,-843).loadGraphic(Paths.image('bloodlust_floor-alt'));
    altFloor.scale.set(9.1,9.1);
    altFloor.antialiasing = true;
    altFloor.scrollFactor.set(1, 1);
    game.addBehindDad(altFloor);

    var building = new FlxSprite(-2512,-833).loadGraphic(Paths.image('bloodlust_building'));
    building.scale.set(9.1,9.1);
    building.antialiasing = true;
    building.scrollFactor.set(0.4, 1);
    game.addBehindDad(building);
    
    var wall = new FlxSprite(-1012,-833).loadGraphic(Paths.image('bloodlust_wall'));
    wall.scale.set(9.1,9.1);
    wall.antialiasing = true;
    wall.scrollFactor.set(0.95, 1);
    game.addBehindDad(wall);

    altWall = new FlxSprite(-50000,-833).loadGraphic(Paths.image('bloodlust_wall-alt'));
    altWall.scale.set(9.1,9.1);
    altWall.antialiasing = true;
    altWall.scrollFactor.set(0.95, 1);
    game.addBehindDad(altWall);

    bfShadow = new FlxSprite(-1982,2357).loadGraphic(Paths.image('shadow'));
    bfShadow.scale.set(4.8, 6.7);
    bfShadow.antialiasing = true;
    bfShadow.alpha = 0.6;
    bfShadow.scrollFactor.set(1, 1);
    game.addBehindBF(bfShadow);

    dadShadow = new FlxSprite(3208,2427).loadGraphic(Paths.image('shadow'));
    dadShadow.scale.set(7.8,8.7);
    dadShadow.antialiasing = true;
    dadShadow.alpha = 0.6;
    dadShadow.scrollFactor.set(1, 1);
    game.addBehindBF(dadShadow);

    fade = new FlxSprite(9298,-843).loadGraphic(Paths.image('fade'));
    fade.scale.set(9.1,9.1);
    fade.antialiasing = true;
    fade.scrollFactor.set(1, 1);
    fade.alpha = 0;
    game.addBehindDad(fade);

    darkenBg = new FlxSprite(-1012,-833).loadGraphic(Paths.image('black'));
    darkenBg.scale.set(9.1,9.1);
    darkenBg.antialiasing = true;
    darkenBg.scrollFactor.set(0, 0);
    darkenBg.active = false;
    darkenBg.alpha = 0.0;
    darkenBg.blend = 9;
    game.addBehindDad(darkenBg);

    whiteFade = new FlxSprite(-1012, -1288).loadGraphic(Paths.image('smallWhiteFade'));
    whiteFade.scale.set(8,9.1);
    whiteFade.antialiasing = true;
    whiteFade.scrollFactor.set(1,1);
    whiteFade.active = false;
    whiteFade.alpha = 0;
    game.addBehindDad(whiteFade);

    
    stringsTrappedEnd = new FlxSprite(-2500,-1070).loadGraphic(Paths.image('stringsTrappedEnd'));
    stringsTrappedEnd.scale.set(6.1,6.1);
    stringsTrappedEnd.antialiasing = true;
    stringsTrappedEnd.scrollFactor.set(1,1);
    stringsTrappedEnd.active = false;
    stringsTrappedEnd.alpha = 0;
    game.addBehindDad(stringsTrappedEnd);
    
    henchmanLight = new FlxSprite(-120,-560).loadGraphic(Paths.image('henchmanLight'));
    henchmanLight.scale.set(6,6);
    henchmanLight.antialiasing = true;
    henchmanLight.scrollFactor.set(1, 1);
    henchmanLight.alpha = 0;
    henchmanLight.blend = 0;
    game.addBehindDad(henchmanLight);

    henchmanLight2 = new FlxSprite(-4522,-560).loadGraphic(Paths.image('henchmanLight'));
    henchmanLight2.scale.set(6,6);
    henchmanLight2.antialiasing = true;
    henchmanLight2.scrollFactor.set(1, 1);
    henchmanLight2.alpha = 0;
    henchmanLight2.blend = 0;
    game.addBehindDad(henchmanLight2);

    henchmanLight3 = new FlxSprite(-120,-560).loadGraphic(Paths.image('henchmanLight'));
    henchmanLight3.scale.set(6,6);
    henchmanLight3.antialiasing = true;
    henchmanLight3.scrollFactor.set(1, 1);
    henchmanLight3.alpha = 0;
    henchmanLight3.blend = 0;
    game.add(henchmanLight3);

    henchmanLight4 = new FlxSprite(-4522,-560).loadGraphic(Paths.image('henchmanLight'));
    henchmanLight4.scale.set(6,6);
    henchmanLight4.antialiasing = true;
    henchmanLight4.scrollFactor.set(1, 1);
    henchmanLight4.alpha = 0;
    henchmanLight4.blend = 0;
    game.add(henchmanLight4);

    redLight = new FlxSprite(1488,-733).loadGraphic(Paths.image('BackLight'));
    redLight.scale.set(9.1,9.1);
    redLight.antialiasing = true;
    redLight.scrollFactor.set(0.95, 1);
    redLight.alpha = 0;

    redVin = new FlxSprite(-112, -333).loadGraphic(Paths.image('VinRed'));
    redVin.scale.set(9.4,9.4);
    redVin.antialiasing = true;
    redVin.scrollFactor.set(0, 0);
    redVin.alpha = 0;

    addForestShit();
    //trace("FOREST FLOOR WIDTH: "+ forestFloor.width*6);

    stringsBgShoot = new FlxSprite(-19000, 682).loadGraphic(Paths.image('stringsBgShoot'));
    stringsBgShoot.scale.set(9.1,9.1);
    stringsBgShoot.antialiasing = true;
    stringsBgShoot.scrollFactor.set(1, 1);
    stringsBgShoot.alpha = 1;
    game.addBehindDad(stringsBgShoot);

    stringsBg = new FlxSprite(-19000, 682).loadGraphic(Paths.image('stringsBg'));
    stringsBg.scale.set(9.1,9.1);
    stringsBg.antialiasing = true;
    stringsBg.scrollFactor.set(1, 1);
    stringsBg.alpha = 1;
    stringsBg.blend = 0;
    //stringsBg.blend = 10;
    game.addBehindDad(stringsBg);

    stringPrep = new FlxSprite();
    stringPrep.frames = Paths.getSparrowAtlas('stringPrep');
    stringPrep.animation.addByPrefix("idle", 'StringPrep', 24, false);
    stringPrep.animation.play("idle", true);
    stringPrep.scrollFactor.set(1, 1);
    stringPrep.scale.set(6, 6);
    stringPrep.antialiasing = true;
    stringPrep.setPosition(980,2270);
    stringPrep.alpha = 0;
    game.add(stringPrep);

    stringPrep2 = new FlxSprite();
    stringPrep2.frames = Paths.getSparrowAtlas('stringPrep');
    stringPrep2.animation.addByPrefix("idle", 'StringPrep', 24, false);
    stringPrep2.animation.play("idle", true);
    stringPrep2.scrollFactor.set(1, 1);
    stringPrep2.scale.set(6, 6);
    stringPrep2.antialiasing = true;
    stringPrep2.setPosition(1330,2380);
    stringPrep2.alpha = 0;
    game.add(stringPrep2);

    stringShoot = new FlxSprite();
    stringShoot.frames = Paths.getSparrowAtlas('stringShoot');
    stringShoot.animation.addByPrefix("idle", 'StringShoot', 24, false);
    stringShoot.animation.play("idle", true);
    stringShoot.scrollFactor.set(1, 1);
    stringShoot.scale.set(6, 6);
    stringShoot.antialiasing = true;
    stringShoot.setPosition(-1750,2190);
    stringShoot.alpha = 0;
    game.add(stringShoot);

    stringShoot2 = new FlxSprite();
    stringShoot2.frames = Paths.getSparrowAtlas('stringShoot');
    stringShoot2.animation.addByPrefix("idle", 'StringShoot', 24, false);
    stringShoot2.animation.play("idle", true);
    stringShoot2.scrollFactor.set(1, 1);
    stringShoot2.scale.set(6, 6);
    stringShoot2.antialiasing = true;
    stringShoot2.setPosition(-1400,2300);
    stringShoot2.alpha = 0;
    game.add(stringShoot2);
    
    // doing shit like this so that each animation direction is in sync
    runIdle = new FlxSprite();
    runIdle.frames = Paths.getSparrowAtlas('gfRunIdle');
    runIdle.animation.addByPrefix("idle", 'runIdle', 24, true);
    runIdle.animation.play("idle", true);
    runIdle.scrollFactor.set(1, 1);
    runIdle.scale.set(6, 6);
    runIdle.antialiasing = true;
    runIdle.setPosition(-15488,620);
    game.addBehindDad(runIdle);
    //runIdle.x = -2088;

    runLeft = new FlxSprite();
    runLeft.frames = Paths.getSparrowAtlas('gfRunLeft');
    runLeft.animation.addByPrefix("idle", 'runLeft', 24, true);
    runLeft.animation.play("idle", true);
    runLeft.scrollFactor.set(1, 1);
    runLeft.scale.set(6, 6);
    runLeft.antialiasing = true;
    runLeft.setPosition(-15488,620);
    game.addBehindDad(runLeft);

    runRight = new FlxSprite();
    runRight.frames = Paths.getSparrowAtlas('gfRunRight');
    runRight.animation.addByPrefix("idle", 'runRight', 24, true);
    runRight.animation.play("idle", true);
    runRight.scrollFactor.set(1, 1);
    runRight.scale.set(6, 6);
    runRight.antialiasing = true;
    runRight.setPosition(-15488,620);
    game.addBehindDad(runRight);

    runUp = new FlxSprite();
    runUp.frames = Paths.getSparrowAtlas('gfRunUp');
    runUp.animation.addByPrefix("idle", 'runUp', 24, true);
    runUp.animation.play("idle", true);
    runUp.scrollFactor.set(1, 1);
    runUp.scale.set(6, 6);
    runUp.antialiasing = true;
    runUp.setPosition(-15488,620);
    game.addBehindDad(runUp);

    runDown = new FlxSprite();
    runDown.frames = Paths.getSparrowAtlas('gfRunDown');
    runDown.animation.addByPrefix("idle", 'runDown', 24, true);
    runDown.animation.play("idle", true);
    runDown.scrollFactor.set(1, 1);
    runDown.scale.set(6, 6);
    runDown.antialiasing = true;
    runDown.setPosition(-15488,620);
    game.addBehindDad(runDown);

    spiderGroup = new FlxSpriteGroup(-2100,-1200);
    spiderGroup.scrollFactor.set(1,1);
    game.addBehindDad(spiderGroup);
    spiderGroup.alpha = 0;
    

    spiderLegBack = new FlxSprite();
    spiderLegBack.frames = Paths.getSparrowAtlas('spiderLegsBack');
    spiderLegBack.animation.addByPrefix("idle", 'BackLegs', 24, true);
    spiderLegBack.animation.play("idle", true);
    spiderLegBack.scrollFactor.set(0,0);
    spiderLegBack.scale.set(8,8);
    spiderLegBack.antialiasing = true;
    spiderLegBack.alpha = 1;
    spiderGroup.add(spiderLegBack);
    spiderLegBack.setPosition(-1390,-70);

    spiderBody = new FlxSprite();
    spiderBody.frames = Paths.getSparrowAtlas('spidermm');
    spiderBody.animation.addByPrefix("idle", 'body', 24, true);
    spiderBody.animation.play("idle", true);
    spiderBody.scrollFactor.set(0,0);
    spiderBody.scale.set(8,8);
    spiderBody.antialiasing = true;
    spiderBody.alpha = 1;
    spiderBody.x = -2400;
    spiderGroup.add(spiderBody);
    spiderBody.setPosition(-2941,-1300);
    
    spiderLegFront = new FlxSprite();
    spiderLegFront.frames = Paths.getSparrowAtlas('spiderLegsFront');
    spiderLegFront.animation.addByPrefix("idle", 'front leg finished', 24, true);
    spiderLegFront.animation.play("idle", true);
    spiderLegFront.scrollFactor.set(0,0);
    spiderLegFront.scale.set(8,8);
    spiderLegFront.antialiasing = true;

    momSpider = new Character(0,0, 'momSpider');
    game.startCharacter(momSpider, true);
    momSpider.scale.set(8.5,8.5);
    momSpider.scrollFactor = game.dad.scrollFactor;
    momSpider.alpha = 1;
    spiderGroup.add(momSpider);
    
    momSpider.setPosition(180,-2350);
    
    
    spiderLegFront.alpha = 1;
    spiderGroup.add(spiderLegFront);
    spiderLegFront.setPosition(-2300,200);

    spiderPunched = new FlxSprite();
    spiderPunched.frames = Paths.getSparrowAtlas('spiderPunched');
    spiderPunched.animation.addByPrefix("idle", 'SpiderDeath', 24, false);
    spiderPunched.animation.play("idle", true);
    spiderPunched.scrollFactor.set(1,1);
    spiderPunched.scale.set(8,8);
    spiderPunched.antialiasing = true;
    spiderPunched.alpha = 0;
    game.add(spiderPunched);
    spiderPunched.setPosition(-5821, 690);
    
    spiderGroup.x = -10400;
    spiderGroup.y = -1300; //-900

    gfSleep = new FlxSprite();
    gfSleep.frames = Paths.getSparrowAtlas('GfSleep');
    gfSleep.animation.addByPrefix("idle", 'GfSleep', 24, true);
    gfSleep.animation.play("idle", true);
    gfSleep.scrollFactor.set(1, 1);
    gfSleep.scale.set(6,6);
    gfSleep.antialiasing = true;
    gfSleep.setPosition(-19000, 700); //-1842
    game.addBehindBF(gfSleep);

    //game.boyfriend.scale.set(1,1);
    game.boyfriend.setPosition(-1842, 700);
    game.dad.setPosition(3272,-387);
    game.dad.scale.set(6.1,6.1);

    momCorruptBlack = new Character(0,0, 'momCorruptBlack');
    game.startCharacter(momCorruptBlack, true);

    momCorruptBlack.setPosition(game.dad.x,game.dad.y);
    momCorruptBlack.scale.set(6.1,6.1);
    momCorruptBlack.scrollFactor = game.dad.scrollFactor;
    momCorruptBlack.alpha = 0;
    momCorruptBlack.blend = 0;

    gfBlack = new Character(0,0, 'gfBlack');
    game.startCharacter(gfBlack, true);
    gfBlack.setPosition(game.dad.x,game.dad.y);
    gfBlack.scale.set(6.1,6.1);
    gfBlack.scrollFactor = game.dad.scrollFactor;
    gfBlack.alpha = 0;
    gfBlack.blend = 0;

    redVin2 = new FlxSprite(-312,-333).loadGraphic(Paths.image('VinRed2'));
    redVin2.scale.set(9,9);
    redVin2.antialiasing = true;
    redVin2.scrollFactor.set(0, 0);
    redVin2.alpha = 0;
    redVin2.blend = 0;
    game.add(redVin2);

    gfShocked = new FlxSprite(200,1142).loadGraphic(Paths.image('gfShockBody'));
    gfShocked.scale.set(11.1,11.1);
    gfShocked.antialiasing = true;
    gfShocked.scrollFactor.set(0,0);
    gfShocked.alpha = 0;
    game.add(gfShocked);

    gfShockedEye = new FlxSprite(200,1142).loadGraphic(Paths.image('gfShockEye'));
    gfShockedEye.scale.set(11.1,11.1);
    gfShockedEye.antialiasing = true;
    gfShockedEye.scrollFactor.set(0,0);
    gfShockedEye.alpha = 0;
    gfShockedEye.blend = 0;
    game.add(gfShockedEye);

    //game.customCamera.set(1210, 220);
    //game.addCameraPoint(game.customCamera);

    video = new MP4Sprite();
    video.bitmap.onFormatSetup.add(function():Void
        {
        video.scale.set(15, 15);
        video.updateHitbox();
        video.scrollFactor.set(1.2, 1.2);
        video.screenCenter();
        trace("done");
    });
    video.bitmap.onEndReached.add(video.destroy);
    video.alpha = 0;
    video.blend = 12;
    game.add(video);

    video2 = new MP4Sprite();
    video2.bitmap.onFormatSetup.add(function():Void
    {
        video2.scale.set(7.3,6);
        video2.setPosition(310,-250);
    });
    video2.bitmap.onEndReached.add(video2.destroy);
    video2.alpha = 0;
    video2.blend = 9;
    game.add(video2);

    video3 = new MP4Sprite();
    video3.bitmap.onFormatSetup.add(function():Void
    {
        video3.setPosition(-11500, 0);
        video3.scale.set(13.7,13.7);
    });
    video3.bitmap.onEndReached.add(video3.destroy);
    video3.alpha = 0;
    video3.blend = 12;
    game.add(video3);

    video4 = new MP4Sprite();
    video4.bitmap.onFormatSetup.add(function():Void
    {
        video4.scale.set(8.5,8.5);
        video4.setPosition(0,0);
        video4.scrollFactor.set(0,0);
    });
    video4.bitmap.onEndReached.add(video4.destroy);
    video4.alpha = 0;
    video4.blend = 9;
    game.add(video4);

/*     var cacheVideo = new MP4Sprite();
    cacheVideo.alpha = 0.00001;
    game.add(cacheVideo);

    cacheVideo.load(Paths.video('snow light'));
    cacheVideo.load(Paths.video('snow heavy'));
    cacheVideo.load(Paths.video('dark snow'));
    cacheVideo.load(Paths.video('smokeEffect'));
    game.remove(cacheVideo); */

    /*     game.camFollowAtAll = false; */
    game.defaultCamZoom = 0.11;
    game.camGame.zoom = game.defaultCamZoom;
    
    black2 = new FlxSprite(-1012,-833).loadGraphic(Paths.image('black'));
    black2.scale.set(9.1,9.1);
    black2.antialiasing = true;
    black2.scrollFactor.set(0.95, 1);
    black2.active = false;
    black2.alpha = 0;
    game.add(black2);

    game.add(momCorruptBlack); // add after video2, needs to appear in front
    
    game.add(gfBlack);
    // Shader shit
    //setChroma(0.002);

    bloom.data.blurSize.value = [0.001953125];
	bloom.data.intensity.value = [0.0];
    
    game.camGame.setFilters([new ShaderFilter(overlay), new ShaderFilter(bloom)]);
    //game.camGame.setFilters([new ShaderFilter(wate)]);
   // game.camGame.setFilters([new ShaderFilter(barrel), new ShaderFilter(vignette), new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(nullGlitch)]);
    //game.camHUD.setFilters([new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(nullGlitch)]);

    video.load(Paths.video('snow light'), [':input-repeat=65545']);
    video.play();
    video.alpha = 1;

    video5 = new MP4Sprite();
    video5.bitmap.onFormatSetup.add(function():Void
    {
        video5.scale.set(8.5,8.5);
        video5.setPosition(0,0);
        video5.scrollFactor.set(0,0);
    });
    video5.bitmap.onEndReached.add(video5.destroy);
    video5.alpha = 0;
    game.add(video5);

    video6 = new MP4Sprite();
    video6.bitmap.onFormatSetup.add(function():Void
    {
        video6.scale.set(8.7,8.7);
        video6.setPosition(0,0);
        video6.scrollFactor.set(0,0);
    });
    video6.bitmap.onEndReached.add(function():Void{
        video6.destroy();
        video6.alpha = 0;
        video6.x = -8000;
    });
    video6.alpha = 0;
    game.add(video6);

    blackTop = new FlxSprite(0,0).loadGraphic(Paths.image('black'));
    blackTop.scale.set(9.1,9.1);
    blackTop.antialiasing = true;
    blackTop.scrollFactor.set(0,0);
    blackTop.alpha = 1;
    blackTop.cameras = [game.camHUD];
    game.add(blackTop);

    object = blackTop;
    FlxG.debugger.track(object);

}

function onReceptorGeneration(){
    game.remove(game.ratingGroup, true);
    game.insert(game.members.indexOf(runIdle) - 1, game.ratingGroup);
}

function addForestShit(){
    forestSky = new FlxSprite(100000,-353).loadGraphic(Paths.image('forestSky'));
    forestSky.scale.set(6,6);
    forestSky.antialiasing = true;
    forestSky.scrollFactor.set(0, 0);
    game.addBehindDad(forestSky);

    forestTreeThird = new FlxSprite(100000,247).loadGraphic(Paths.image('forestTree3V2'));
    forestTreeThird.scale.set(6,6);
    forestTreeThird.antialiasing = true;
    forestTreeThird.scrollFactor.set(0.25, 0.25);
    game.addBehindDad(forestTreeThird);
    forestTreeThird2 = new FlxSprite(100000,247).loadGraphic(Paths.image('forestTree3V2'));
    forestTreeThird2.scale.set(6,6);
    forestTreeThird2.antialiasing = true;
    forestTreeThird2.scrollFactor.set(0.25, 0.25);
    game.addBehindDad(forestTreeThird2);

    forestTreeSecond = new FlxSprite(100000,-1453).loadGraphic(Paths.image('forestTree2V2'));
    forestTreeSecond.scale.set(6,6);
    forestTreeSecond.antialiasing = true;
    forestTreeSecond.scrollFactor.set(0.8, 0.8);
    game.addBehindDad(forestTreeSecond);
    forestTreeSecond2 = new FlxSprite(100000,-1453).loadGraphic(Paths.image('forestTree2V2'));
    forestTreeSecond2.scale.set(6,6);
    forestTreeSecond2.antialiasing = true;
    forestTreeSecond2.scrollFactor.set(0.8, 0.8);
    game.addBehindDad(forestTreeSecond2);

    forestBushBg = new FlxSprite(100000,1347).loadGraphic(Paths.image('forestBushBg'));
    forestBushBg.scale.set(6,6);
    forestBushBg.antialiasing = true;
    forestBushBg.scrollFactor.set(0.8, 0.8);
    game.addBehindDad(forestBushBg);
    forestBushBg2 = new FlxSprite(100000,1347).loadGraphic(Paths.image('forestBushBg'));
    forestBushBg2.scale.set(6,6);
    forestBushBg2.antialiasing = true;
    forestBushBg2.scrollFactor.set(0.8, 0.8);
    game.addBehindDad(forestBushBg2);

    forestForeground = new FlxSprite(100000,-1047).loadGraphic(Paths.image('forestForeground'));
    forestForeground.scale.set(6,7);
    forestForeground.antialiasing = true;
    forestForeground.scrollFactor.set(0.8, 0.0);
    forestForeground2 = new FlxSprite(100000,-1047).loadGraphic(Paths.image('forestForeground'));
    forestForeground2.scale.set(6,7);
    forestForeground2.antialiasing = true;
    forestForeground2.scrollFactor.set(0.8, 0.0);

    forestTree = new FlxSprite(100000,-953).loadGraphic(Paths.image('forestTreeV2'));
    forestTree.scale.set(6,6);
    forestTree.antialiasing = true;
    forestTree.scrollFactor.set(0.8, 0.8);
    game.addBehindDad(forestTree);
    forestTree2 = new FlxSprite(100000,-953).loadGraphic(Paths.image('forestTreeV2'));
    forestTree2.scale.set(6,6);
    forestTree2.antialiasing = true;
    forestTree2.scrollFactor.set(0.8, 0.8);
    game.addBehindDad(forestTree2);

    forestFloor = new FlxSprite(100000,2647).loadGraphic(Paths.image('forestFloor'));
    forestFloor.scale.set(6,6);
    forestFloor.antialiasing = true;
    forestFloor.scrollFactor.set(1, 1);
    game.addBehindDad(forestFloor);
    forestFloor2 = new FlxSprite(100000,2647).loadGraphic(Paths.image('forestFloor'));
    forestFloor2.scale.set(6,6);
    forestFloor2.antialiasing = true;
    forestFloor2.scrollFactor.set(1, 1);
    game.addBehindDad(forestFloor2);

    forestHench = new FlxSprite(100000,-947).loadGraphic(Paths.image('forestHench'));
    forestHench.scale.set(6,6);
    forestHench.antialiasing = true;
    forestHench.scrollFactor.set(0.8, 0.8);
    forestHench.alpha = 0;
    game.addBehindDad(forestHench);
    forestHench2 = new FlxSprite(100000,-947).loadGraphic(Paths.image('forestHench'));
    forestHench2.scale.set(6,6);
    forestHench2.antialiasing = true;
    forestHench2.scrollFactor.set(0.8, 0.8);
    forestHench2.alpha = 0;
    game.addBehindDad(forestHench2);

    forestBf = new FlxSprite(-19000,50).loadGraphic(Paths.image('henchBf')); //-19000
    forestBf.scale.set(5.8,5.8);
    forestBf.antialiasing = true;
    forestBf.scrollFactor.set(0.8, 0.8);
    forestBf.alpha = 1;
    game.addBehindDad(forestBf);

    forestBush = new FlxSprite(100000,2147).loadGraphic(Paths.image('forestFront'));
    forestBush.scale.set(6,6);
    forestBush.antialiasing = true;
    forestBush.scrollFactor.set(1.1, 1.1);
    game.add(forestBush);
    forestBush2 = new FlxSprite(100000,2147).loadGraphic(Paths.image('forestFront'));
    forestBush2.scale.set(6,6);
    forestBush2.antialiasing = true;
    forestBush2.scrollFactor.set(1.1, 1.1);
    game.add(forestBush2);

    game.add(forestForeground);
    game.add(forestForeground2);
}



function opponentNoteHit(note:Note, field:PlayField){
    //nullGlitch.data.glitchAmplitude.value = [FlxG.random.float(0.0,1.0)];
    //if (curBg == 2){return;}
    //video.x = -5000;
    //game.dad.x = 640;

    if(running && momHasAnims){
        switch (note.noteData){
            case 0:
                momSpider.playAnim("singLEFT",true);
            case 1:
                momSpider.playAnim("singDOWN",true);
            case 2:
                momSpider.playAnim("singUP",true);
            case 3:
                momSpider.playAnim("singRIGHT",true);
        }
    }

    if (!glowTime){return;}
    switch (note.noteData){
        case 0:
            momCorruptBlack.playAnim("singLEFT",true);
        case 1:
            momCorruptBlack.playAnim("singDOWN",true);
        case 2:
            momCorruptBlack.playAnim("singUP",true);
        case 3:
            momCorruptBlack.playAnim("singRIGHT",true);
    }
    
}

function goodNoteHit(note:Note, field:PlayField){
    if (glowTime){
        switch (note.noteData){
            case 0:
                gfBlack.playAnim("singLEFT",true);
            case 1:
                gfBlack.playAnim("singDOWN",true);
            case 2:
                gfBlack.playAnim("singUP",true);
            case 3:
                gfBlack.playAnim("singRIGHT",true);
        }
    }
    if (!running){return;}
    switch (note.noteData){
        case 0:
            runIdle.x = -15088;
            runLeft.x = -2098 + runXoffset;
            runRight.x = -15088;
            runUp.x = -15088;
            runDown.x = -15058;
        case 1:
            runIdle.x = -15088;
            runLeft.x = -15098;
            runRight.x = -15088;
            runUp.x = -15088;
            runDown.x = -2058 + runXoffset;
        case 2:
            runIdle.x = -15088;
            runLeft.x = -15098;
            runRight.x = -15088;
            runUp.x = -2088 + runXoffset;
            runDown.x = -15058;
        case 3:
            runIdle.x = -15088;
            runLeft.x = -15098;
            runRight.x = -2088 + runXoffset;
            runUp.x = -15088;
            runDown.x = -15058;
    }
}

function onStepHit(){
    //iconShader.data.binaryIntensity.value[0]= FlxG.random.float(4, 12);

    if (!running){return;}
    if (game.boyfriend.animation.curAnim.name == 'idle'){
        runIdle.x = -2088 + runXoffset;
        runLeft.x = -15098;
        runRight.x = -15088;
        runUp.x = -15088;
        runDown.x = -15058;
    }
}

function onPause(){
    video.pause();
    video2.pause();
    video3.pause();
    video4.pause();
    video5.pause();
    video6.pause();
}

function onResume(){
    video.resume();
    video2.resume();
    video3.resume();
    video4.resume();
    video5.resume();
    video6.resume();
}

function onDestroy(){
    video.destroy();
    video2.destroy();
    video3.destroy();
    video4.destroy();
    video5.destroy();
    video6.destroy();
}

function generateModchart(){
    modManager.queueFuncOnce(896, function(ev, step){
        barrel.data.offset.value = [0, 0];
    });
    modManager.queueFuncOnce(912, function(ev, step){
        barrel.data.angle.value[0] = 0;
    });

/*     modManager.queueEaseFunc(896, 916, FlxEase.quadOut, function(ev, val, step){
        barrel.data.angle.value[0] = FlxMath.lerp(0, 360 * 4, val);
    });
 */
    modManager.queueEaseFunc(890, 896, FlxEase.quartOut, function(ev, val, step){
        barrel.data.zoom.value[0] = FlxMath.lerp(1/16, 1/128, val);
        barrel.data.distortionIntensity.value[0] = FlxMath.lerp(-0.25, -0.75, val);
    });

    modManager.queueEaseFunc(896, 916, FlxEase.elasticOut, function(ev, val, step){
        barrel.data.zoom.value[0] = FlxMath.lerp(2, 1, val);
        barrel.data.distortionIntensity.value[0] = FlxMath.lerp(-1.5, -0.25, val);
    });

    // black fade ins
    modManager.queueEaseFunc(1914, 1918, FlxEase.linear, function(ev, val, step){
        blackTop.alpha = FlxMath.lerp(0, 1, val);
    });

    modManager.queueEaseFunc(2939, 2943, FlxEase.linear, function(ev, val, step){
        blackTop.alpha = FlxMath.lerp(0, 1, val);
    });

    modManager.queueEaseFunc(3344, 3392, FlxEase.linear, function(ev, val, step){
        blackTop.alpha = FlxMath.lerp(0, 1, val);
    });

    modManager.queueSet(-16, 'opponentSwap', 1);
}

var storedCombo:Int = 0;

function onApplyJudgmentDataPost(judgeData, diff, bot, show){
    if(judgeData.comboBehaviour == -1)storedCombo = 0;
}
var playing = false;
var alpha:Float =0.0;



function onEvent(eventName, value1, value2, time){
    switch(eventName){
        case 'storecombo':
            storedCombo += game.stats.combo;
            game.stats.combo = 0;
        case 'restorecombo':
            game.stats.combo += storedCombo;
            storedCombo = 0;
        case 'Song Event':
            if(value1 == 'zoom'){
                barrel.data.offset.value = [640, 360];
                barrel.data.zoom.value[0] = 1 / Std.parseFloat(value2);
            }
        case "addelement":
            switch (value1){
                case "fadeout":
                    if (value2 == "1"){
                        blackTop.alpha = 1;
                        FlxTween.tween(blackTop, {alpha: 0}, 2, {ease: FlxEase.quadOut});
                    }
                    if (value2 == "2"){
                        blackTop.alpha = 1;
                        FlxTween.tween(blackTop, {alpha: 0}, 1, {ease: FlxEase.quadOut});
                    }
                case "camfilters":
                    game.camGame.setFilters([new ShaderFilter(overlay), new ShaderFilter(bloom)]);
                    game.camHUD.alpha = 1;
                case "runsetup":
                    game.camHUD.alpha = 1;
                    
            }
        case 'camshit':
            switch (value1){
                case "none":
                    canMoveCam = true;
                    game.addCameraPoint(game.sectionCamera);
                case "undo":
                    canMoveCam = true;
                case "mid": // middle
                    canMoveCam = false;
                    game.customCamera.set(620,630);
                    game.defaultCamZoom = 0.12;
                    game.addCameraPoint(game.customCamera); 
                case "gf":
                    canMoveCam = false;
                    game.defaultCamZoom = 0.14;
                    game.customCamera.set(-1620,630);
                    game.addCameraPoint(game.customCamera); 
                case "punch":
                    canMoveCam = false;
                    game.defaultCamZoom = 0.12;
                    game.customCamera.set(-3500,600);
                    game.addCameraPoint(game.customCamera); 
                case "gf2": //closer
                    canMoveCam = false;
                    game.defaultCamZoom = 0.16;
                    game.customCamera.set(-1620,630);
                    game.addCameraPoint(game.customCamera);
                case "mm":
                    canMoveCam = false;
                    game.customCamera.set(3920,-230);
                    game.defaultCamZoom = 0.14;
                    game.addCameraPoint(game.customCamera); 
                case "mm2": //closer
                    canMoveCam = false;
                    game.customCamera.set(3920,-230);
                    game.defaultCamZoom = 0.16;
                    game.addCameraPoint(game.customCamera); 
            }
        case 'removechars':
            //glitchBump.alpha = 0.25;
            FlxG.camera.zoom += 0.08;
			game.camHUD.zoom += 0.10;
            
            FlxTween.tween(game.dad, {alpha: 0}, 1.0);
            FlxTween.tween(game.boyfriend, {alpha: 0}, 1.0);
        case 'playendanim':
            //senpaiEvil.animation.play('idle',true);
            //FlxTween.tween(senpaiEvil, {alpha: 1}, 0.3);
        case 'specialbump':
            switch (value1){
                case "small":
                    FlxG.camera.zoom += 0.02;
			        game.camHUD.zoom += 0.04;
                case "small2":
                    FlxG.camera.zoom += 0.02;
			        game.camHUD.zoom += 0.04;
                case "run":
                    FlxG.camera.zoom += 0.02;
			        game.camHUD.zoom += 0.04;
                case "riser": // small and rapid
                    FlxG.camera.zoom += 0.01;
			        game.camHUD.zoom += 0.02;
                    bloom.data.intensity.value[0] = 0.1;
                case "big":
                    FlxG.camera.zoom += 0.03;
			        game.camHUD.zoom += 0.07;
                case "big2":
                    FlxG.camera.zoom += 0.03;
			        game.camHUD.zoom += 0.07;
                    bloom.data.intensity.value[0] = 0.5;
                case "flash": // shaders!!!
                    FlxG.camera.zoom += 0.04;
			        game.camHUD.zoom += 0.08;
                    bloom.data.intensity.value[0] = 1.0;
                    redVin2.alpha = 0.8;
                case "dark":
                    FlxG.camera.zoom += 0.04;
			        game.camHUD.zoom += 0.08;
                    black2.alpha = 0.8;
                    FlxTween.tween(black2, {alpha: 0}, 0.8, {ease: FlxEase.quadOut});
                    
            }
        case 'stringattack':
            switch (value1){
                case "shoot1":
                    stringPrep.alpha = 0;
                    stringShoot.alpha = 1;
                    stringShoot.animation.play("idle", true);
                    addTrail(game.boyfriend, 10, 5);
                case "shoot2":
                    stringPrep2.alpha = 0;
                    stringShoot2.alpha = 1;
                    stringShoot2.animation.play("idle", true);
                case "prep1":
                    stringPrep.alpha = 1;
                    stringPrep.animation.play("idle", true);
                case "prep2":
                    stringPrep2.alpha = 1;
                    stringPrep2.animation.play("idle", true);

            }
        case 'swapbg':
            curBg += 1;
            if (curBg > 6){
                curBg = 1;
            }
            
            black2.alpha = 1;
            FlxTween.tween(black2, {alpha: 0}, 0.8, {ease: FlxEase.quadOut});

            switch (curBg){
                case 1: // what gf sees
                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    game.camHUD.setFilters([]);
                    addOverlay([79.0,15.0,33.0],[203.0, 21.0, 122.0],0.175);

                    forestSky.x = 100000;
                    forestTreeThird.x = 100000;
                    forestTreeThird2.x = 100000;
                    forestTreeSecond.x = 100000;
                    forestTreeSecond2.x = 100000;
                    forestBushBg.x = 100000;
                    forestBushBg2.x = 100000;
                    forestTree.x = 100000;
                    forestTree2.x = 100000;
                    forestFloor.x = 100000;
                    forestFloor2.x = 100000;
                    forestBush.x = 100000;
                    forestBush2.x = 100000;

                    game.camHUD.alpha = 1;
                    video.alpha = 0;
                    game.boyfriend.alpha = 1;
                    gfSleep.x = -19000;
                    video4.alpha = 0;
                case 2: // forest bg
                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    game.camHUD.setFilters([]);
                    addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
                    forestSky.x = -1733;
                    forestTreeThird.x = 367;
                    forestTreeThird2.x = 367 + (forestTreeThird.width*6);
                    forestTreeSecond.x = 367;
                    forestTreeSecond2.x = 367 + (forestTreeSecond.width*6);
                    forestBushBg.x = 367;
                    forestBushBg2.x = 367 + (forestBushBg.width*6);
                    forestTree.x = 367;
                    forestTree2.x = 367 + (forestTree.width*6);
                    forestFloor.x = 367;
                    forestFloor2.x = 367 + (forestFloor.width*6);
                    forestBush.x = 367;
                    forestBush2.x = 367 + (forestBush.width*6);
                case 3:
                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    game.camHUD.setFilters([]);
                    addOverlay([79.0,15.0,33.0],[203.0, 21.0, 122.0],0.175);

                    forestSky.x = 100000;
                    forestTreeThird.x = 100000;
                    forestTreeThird2.x = 100000;
                    forestTreeSecond.x = 100000;
                    forestTreeSecond2.x = 100000;
                    forestBushBg.x = 100000;
                    forestBushBg2.x = 100000;
                    forestTree.x = 100000;
                    forestTree2.x = 100000;
                    forestFloor.x = 100000;
                    forestFloor2.x = 100000;
                    forestBush.x = 100000;
                    forestBush2.x = 100000;
                case 4: // forest bg
                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    game.camHUD.setFilters([]);
                    addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
                    forestSky.x = -1733;
                    forestTreeThird.x = 367;
                    forestTreeThird2.x = 367 + (forestTreeThird.width*6);
                    forestTreeSecond.x = 367;
                    forestTreeSecond2.x = 367 + (forestTreeSecond.width*6);
                    forestBushBg.x = 367;
                    forestBushBg2.x = 367 + (forestBushBg.width*6);
                    forestTree.x = 367;
                    forestTree2.x = 367 + (forestTree.width*6);
                    forestFloor.x = 367;
                    forestFloor2.x = 367 + (forestFloor.width*6);
                    forestBush.x = 367;
                    forestBush2.x = 367 + (forestBush.width*6);
                
                case 5: // real world (gf depressed)
                    game.camHUD.alpha = 0.4;
                    game.camHUD.setFilters([new ShaderFilter(blur)]);
                    forestSky.x = 100000;
                    forestTreeThird.x = 100000;
                    forestTreeThird2.x = 100000;
                    forestTreeSecond.x = 100000;
                    forestTreeSecond2.x = 100000;
                    forestBushBg.x = 100000;
                    forestBushBg2.x = 100000;
                    forestTree.x = 100000;
                    forestTree2.x = 100000;
                    forestFloor.x = 100000;
                    forestFloor2.x = 100000;
                    forestBush.x = 100000;
                    forestBush2.x = 100000;

                    altWall.x = -1012;
                    altFloor.x = -902;
                    
                    video.alpha = 1;
                    game.boyfriend.alpha = 0;
                    gfSleep.x = -1842;
                    video4.alpha = 1;
                    stringsBg.x = -1754;
                case 6: //forest and reset gf depressed
                    game.camHUD.setFilters([]);
                    forestSky.x = -1733;
                    forestTreeThird.x = 367;
                    forestTreeThird2.x = 367 + (forestTreeThird.width*6);
                    forestTreeSecond.x = 367;
                    forestTreeSecond2.x = 367 + (forestTreeSecond.width*6);
                    forestBushBg.x = 367;
                    forestBushBg2.x = 367 + (forestBushBg.width*6);
                    forestTree.x = 367;
                    forestTree2.x = 367 + (forestTree.width*6);
                    forestFloor.x = 367;
                    forestFloor2.x = 367 + (forestFloor.width*6);
                    forestBush.x = 367;
                    forestBush2.x = 367 + (forestBush.width*6);

                    altWall.x = -50000;
                    altFloor.x = -50000;

                    game.camHUD.alpha = 1;
                    video.alpha = 0;
                    game.boyfriend.alpha = 1;
                    stringsBg.x = -19000;
                    gfSleep.x = -19000;
                    video4.alpha = 0;
            }
        case 'playvideo':
            switch (value1){
                case "snow":
                    if(playing)return;
                    playing = true;
                    video.load(Paths.video('snow light'), [':input-repeat=65545']);
                    video.play();
                    FlxTween.tween(video, {alpha: 0.5}, 1);
                case "snowheavy":
                    video.load(Paths.video('snow heavy'), [':input-repeat=65545']);
                    video.play();
                    FlxTween.tween(video, {alpha: 0.5}, 1);
                case "stop snow": // + first drop
                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    addOverlay([79.0,15.0,33.0],[203.0, 21.0, 122.0],0.175);
                    video.bitmap.dispose();
                    //darkenBg.alpha = 0.3;
                    henchTime = true;
                    game.remove(bfTrail);
                    //henchmanLight.alpha = 0.6;
                case "smokevin":
                    video4.alpha = 1;
                    video4.load(Paths.video('smokeVin'), [':input-repeat=65545']);
                    video4.play();
                    game.camZooming = true;

                case "momlaugh":
                    game.camGame.setFilters([]);
                    video5.alpha = 1;
                    game.camZooming = false;
                    video5.load(Paths.video('momLaugh'), [':input-repeat=0']);
                    video5.play();
                    object = video5;
                    game.camHUD.alpha = 0;

                case "letssettle":
                    game.camGame.setFilters([]);
                    video6.alpha = 1;
                    video6.load(Paths.video('letsSettleThis'), [':input-repeat=0']);
                    video6.play();
                    object = video6;
                    game.camHUD.alpha = 0;

                case "smokevinhide":
                    FlxTween.tween(video4, {alpha: 0.0}, 4);

                case "smoke":
                    FlxTween.tween(fade, {x: -1402, y: -843, alpha: 1.0}, 4);
                    video2.load(Paths.video('smokeEffect'), [':input-repeat=0']);
                    video2.play();
                    FlxTween.tween(video2, {alpha: 0.8}, 1);
                    henchTime = false;
                    // add glowing eyes
                    glowTime = true;

                    game.changeCharacter("gfRage", 0);
                    game.boyfriend.setPosition(-1842, 700);
                    game.boyfriend.scale.set(6,6);
                    game.boyfriend.flipX = false;

                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);

                    FlxTween.tween(momCorruptBlack, {alpha: 1.0}, 4);
                    
                    FlxTween.tween(gfBlack, {alpha: 1.0}, 4);
                case "stop smoke":
                    video2.bitmap.dispose();
                    
            }
            
            //glitchBump.alpha = 0.25;
            //FlxG.camera.zoom += 0.08;
			//game.camHUD.zoom += 0.10;
        case 'stoprun':
            switch (value1){
                case "1":  
                    decreaseRate = true;
                    game.boyfriend.setPosition(-1842, 700);

                    runIdle.alpha = 0;
                    runLeft.alpha = 0;
                    runRight.alpha = 0;
                    runUp.alpha = 0;
                    runDown.alpha = 0;

                    hideJudge = true;

                    FlxTween.tween(spiderGroup, {x: -5300}, 1.5);

                case "3": // punch
                    running = false;

                    darkenBg.alpha = 1;

                    game.boyfriend.setPosition(-1842, 700);
                    game.dad.setPosition(3312,-280);

                    spiderGroup.alpha = 0;

                    spiderPunched.alpha = 1;

                    forestSky.x = 100000;
                    forestTreeThird.x = 100000;
                    forestTreeThird2.x = 100000;
                    forestTreeSecond.x = 100000;
                    forestTreeSecond2.x = 100000;
                    forestBushBg.x = 100000;
                    forestBushBg2.x = 100000;
                    forestTree.x = 100000;
                    forestTree2.x = 100000;
                    forestFloor.x = 100000;
                    forestFloor2.x = 100000;
                    forestHench.x = 100000;
                    forestHench2.x = 100000;
                    forestBush.x = 100000;
                    forestBush2.x = 100000;
                    forestForeground.x = 100000;
                    forestForeground2.x = 100000;

                    spiderPunched.animation.play("idle", true);

                    runIdle.x = -15088;
                    runLeft.x = -15098;
                    runRight.x = -15088;
                    runUp.x = -15088;
                    runDown.x = -15058;

                    video.load(Paths.video('snow heavy'), [':input-repeat=65545']);
                    video.alpha = 0;
                    video.play();
                case "4":
                    FlxTween.tween(darkenBg, {alpha: 0}, 3);
                case "5":
                    game.addCameraPoint(game.sectionCamera);
                    hideJudge = false;
                case "sad":
                    video.load(Paths.video('snow heavy'), [':input-repeat=65545']);
                    video.play();
                    video.alpha = 0.5;
                    running = false;
                    game.camHUD.setFilters([new ShaderFilter(blur)]);
                    
                    altWall.x = -1012;
                    altFloor.x = -902;
                    hideJudge = true;
                    gfSleep.x = -1842;
                    video4.alpha = 1;
                    stringsBg.x = -1754;
                    spiderGroup.alpha = 0;
                    game.boyfriend.alpha = 0;
                    game.boyfriend.setPosition(-1842, 700);
                    game.dad.setPosition(3312,-280);

                    forestSky.x = 100000;
                    forestTreeThird.x = 100000;
                    forestTreeThird2.x = 100000;
                    forestTreeSecond.x = 100000;
                    forestTreeSecond2.x = 100000;
                    forestBushBg.x = 100000;
                    forestBushBg2.x = 100000;
                    forestTree.x = 100000;
                    forestTree2.x = 100000;
                    forestFloor.x = 100000;
                    forestFloor2.x = 100000;
                    forestHench.x = 100000;
                    forestHench2.x = 100000;
                    forestBush.x = 100000;
                    forestBush2.x = 100000;
                    forestForeground.x = 100000;
                    forestForeground2.x = 100000;

                    runIdle.x = -15088;
                    runLeft.x = -15098;
                    runRight.x = -15088;
                    runUp.x = -15088;
                    runDown.x = -15058;

                    game.addCameraPoint(game.sectionCamera);
                case "return":
                    runIdle.setPosition(-2088,620);
                    runLeft.setPosition(-15098,620);
                    runRight.setPosition(-15088,651);
                    runUp.setPosition(-15088,580);
                    runDown.setPosition(-15058,650);
                    running = true;
                    spiderGroup.alpha = 1;
                    hideJudge = false;
                    stringPrep.alpha = 0;
                    stringPrep2.alpha = 0;
                    game.camHUD.setFilters([]);
                    gfSleep.x = -19000;
                    video4.alpha = 0;
                    stringsBg.x = -19000;
                    game.boyfriend.alpha = 1;

                    video.bitmap.dispose();
                    video.alpha = 0;

                    game.customCamera.set(-1210, 420);
                    game.addCameraPoint(game.customCamera);
                    
                    game.dad.setPosition(-18842,260);
                    game.boyfriend.x = -18842;

                    altWall.x = -50000;
                    altFloor.x = -50000;

                    forestSky.x = -1733;
                    forestTreeThird.x = 367;
                    forestTreeThird2.x = 367 + (forestTreeThird.width*6);
                    forestTreeSecond.x = 367;
                    forestTreeSecond2.x = 367 + (forestTreeSecond.width*6);
                    forestBushBg.x = 367;
                    forestBushBg2.x = 367 + (forestBushBg.width*6);
                    forestTree.x = 367;
                    forestTree2.x = 367 + (forestTree.width*6);
                    forestFloor.x = 367;
                    forestFloor2.x = 367 + (forestFloor.width*6);
                    forestHench.x = 367;
                    forestHench2.x = 367 + (forestHench.width*6);
                    forestBush.x = 367;
                    forestBush2.x = 367 + (forestBush.width*6);

                    forestForeground.x = 367;
                    forestForeground2.x = 367 + (forestForeground.width*6);
                case "henchmen":
                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    addOverlay([79.0,15.0,33.0],[203.0, 21.0, 122.0],0.175);
                    forestHench.alpha = 1;
                    forestHench2.alpha = 1;
                case "henchbf":
                    forestBf.x = 6200;
                    
            }
        case 'changeBf':
            switch (value1){
                case "1":
                    darkenBg.alpha = 0.8;
                case "front":
                    //remove smoke
                    video2.alpha = 0;
                    fade.alpha = 0;
                    video2.bitmap.dispose();

                    bfShadow.x = -15000;
                    dadShadow.x = -15000;
                    
                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    game.changeCharacter("momFront", 1);
                    game.customCamera.set(810, 420);
                    game.addCameraPoint(game.customCamera);
                    game.boyfriend.setPosition(-18842, 700);
                    game.dad.setPosition(142,660);
                    game.dad.scale.set(12.1,12.1);
                    frontView = true;

                    momCorruptBlack.alpha = 0;
                    gfBlack.alpha = 0;

                    black = new FlxSprite(-1012,-833).loadGraphic(Paths.image('black'));
                    black.scale.set(9.1,9.1);
                    black.antialiasing = true;
                    black.scrollFactor.set(0.95, 1);
                    black.active = false;
                    game.addBehindDad(black);

                    game.addBehindDad(redLight);
                    game.addBehindDad(redVin);

                    redLightTime = 1;
                    game.showRating = false;
                    game.showComboNum = false;

                    gfShocked.alpha = 0.6;
                    gfShockedEye.alpha = 1;

                    FlxTween.tween(gfShockedEye, {alpha: 0}, 1);

                    FlxTween.tween(game.camHUD, {alpha: 0.4}, 0.2);
                case "fronthide":
                    FlxTween.tween(gfShocked, {alpha: 0}, 1);
                case "front2":
                    game.changeCharacter("momFrontSecond", 1);
                    game.dad.setPosition(942,660);
                    game.dad.scale.set(12.1,12.1);

                    redLightTime = 2;

                case "gfnorm":
                    game.changeCharacter("gfNorm", 0);
                    game.boyfriend.setPosition(-1842, 700);
                    game.boyfriend.scale.set(6,6);
                    game.boyfriend.flipX = false;
                case "gfrage":
                    game.changeCharacter("gfRage", 0);
                    game.boyfriend.setPosition(-1842, 700);
                    game.boyfriend.scale.set(6,6);
                    game.boyfriend.flipX = false;
                case "run":
                    addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
                    game.showRating = true;
                    game.showComboNum = true;

                    FlxTween.tween(game.camHUD, {alpha: 1}, 2);
                    spiderTween = FlxTween.tween(spiderGroup, {x: -7300}, 7.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                    runIdle.setPosition(-2088,620);
                    runLeft.setPosition(-15098,620);
                    runRight.setPosition(-15088,651);
                    runUp.setPosition(-15088,580);
                    runDown.setPosition(-15058,650);
                    running = true;
                    spiderGroup.alpha = 1;

                    bfShadow.x = -1982;
                    dadShadow.x = 3208;

                    forestSky.x = -1733;
                    forestTreeThird.x = 367;
                    forestTreeThird2.x = 367 + (forestTreeThird.width*6);
                    forestTreeSecond.x = 367;
                    forestTreeSecond2.x = 367 + (forestTreeSecond.width*6);
                    forestBushBg.x = 367;
                    forestBushBg2.x = 367 + (forestBushBg.width*6);
                    forestTree.x = 367;
                    forestTree2.x = 367 + (forestTree.width*6);
                    forestFloor.x = 367;
                    forestFloor2.x = 367 + (forestFloor.width*6);
                    forestHench.x = 367;
                    forestHench2.x = 367 + (forestHench.width*6);
                    forestBush.x = 367;
                    forestBush2.x = 367 + (forestBush.width*6);

                    forestForeground.x = 367;
                    forestForeground2.x = 367 + (forestForeground.width*6);

                    redLightTime = 0;
                    frontView = false;

                    // focus gf
                    game.customCamera.set(-1210, 420);

                    //focus mm
                    //game.customCamera.set(-3710, -400);
                    game.addCameraPoint(game.customCamera);

                    black.x = -21000;
                    redLight.x = -19000;
                    redVin.x = -19000;
                    
                    game.changeCharacter("momCorrupt", 1);
                    game.dad.setPosition(-18842,260);

                case "debugrun":
                    addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
                    game.showRating = true;
                    game.showComboNum = true;

                    FlxTween.tween(game.camHUD, {alpha: 1}, 2);
                    spiderTween = FlxTween.tween(spiderGroup, {x: -7300}, 7.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                    runIdle.setPosition(-2088,620);
                    runLeft.setPosition(-15098,620);
                    runRight.setPosition(-15088,651);
                    runUp.setPosition(-15088,580);
                    runDown.setPosition(-15058,650);
                    running = true;
                    spiderGroup.alpha = 1;

                    game.dad.alpha = 0;
                    game.boyfriend.alpha = 0;

                    video.alpha = 0; // snow
                    video2.alpha = 0; //smoke
                    video3.alpha = 0; // inverted snow
                    video4.alpha = 0; // animated vignette
                    video5.alpha = 0; // laugh intermission

                    bfShadow.x = -1982;
                    dadShadow.x = 3208;

                    forestSky.x = -1733;
                    forestTreeThird.x = 367;
                    forestTreeThird2.x = 367 + (forestTreeThird.width*6);
                    forestTreeSecond.x = 367;
                    forestTreeSecond2.x = 367 + (forestTreeSecond.width*6);
                    forestBushBg.x = 367;
                    forestBushBg2.x = 367 + (forestBushBg.width*6);
                    forestTree.x = 367;
                    forestTree2.x = 367 + (forestTree.width*6);
                    forestFloor.x = 367;
                    forestFloor2.x = 367 + (forestFloor.width*6);
                    forestHench.x = 367;
                    forestHench2.x = 367 + (forestHench.width*6);
                    forestBush.x = 367;
                    forestBush2.x = 367 + (forestBush.width*6);

                    forestForeground.x = 367;
                    forestForeground2.x = 367 + (forestForeground.width*6);

                    redLightTime = 0;
                    frontView = false;

                    // focus gf
                    game.customCamera.set(-1210, 420);

                    //focus mm
                    //game.customCamera.set(-3710, -400);
                    game.addCameraPoint(game.customCamera);

                    black.x = -21000;
                    redLight.x = -19000;
                    redVin.x = -19000;
                    
                    game.changeCharacter("momCorrupt", 1);
                    game.dad.setPosition(-18842,260);
                case "trapped":
                    game.camHUD.alpha = 0.4;
                    video4.alpha = 1;
                    game.camHUD.setFilters([new ShaderFilter(blur)]);
                    addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
                    forestSky.x = 100000;
                    forestTreeThird.x = 100000;
                    forestTreeThird2.x = 100000;
                    forestTreeSecond.x = 100000;
                    forestTreeSecond2.x = 100000;
                    forestBushBg.x = 100000;
                    forestBushBg2.x = 100000;
                    forestTree.x = 100000;
                    forestTree2.x = 100000;
                    forestFloor.x = 100000;
                    forestFloor2.x = 100000;
                    forestBush.x = 100000;
                    forestBush2.x = 100000;

                    altWall.x = -1012;
                    altFloor.x = -902;
                    
                    video.alpha = 1;

                    pulseStrings = false;
                    stringsBg.alpha = 1;
                    stringsBg.blend = 10;



                    stringsBg.x = -1754;
                    stringsBgShoot.x = -1754;

                case "prepend":
                    canMoveCam = false;
                    game.defaultCamZoom = 0.18;
                    hideJudge = true;
                
                case "gfend":
                    video4.alpha = 0;
                    game.camGame.setFilters([new ShaderFilter(bloom)]);
                    game.changeCharacter("gfDark", 0);
                    game.customCamera.set(-810, 420);
                    game.addCameraPoint(game.customCamera);
                    game.boyfriend.setPosition(-858,260);
                    game.boyfriend.scale.set(6,6);
                    game.boyfriend.flipX = false;
                    gfEnding = true;
                    whiteFadeTime = true;
                    whiteFade.alpha = 0.6;
                    game.defaultCamZoom = 0.13;
                    game.camGame.zoom = game.defaultCamZoom;
                    game.camHUD.setFilters([]);
                    gfSleep.x = -19000;
                    video4.alpha = 0;
                    stringsBg.x = -19000;
                    stringsBgShoot.x = -19000;
                    game.boyfriend.alpha = 1;

                    altWall.x = -50000;
                    altFloor.x = -50000;

                    game.dad.setPosition(-19000,260);

                    darkenBg.alpha = 1;

                    game.addBehindDad(redLight);
                    game.addBehindDad(redVin);

                    redLightTime = 1;

                    video.bitmap.dispose();
                    video.alpha = 0;

                    video3.load(Paths.video('dark snow'), [':input-repeat=65545']);
                    video3.blend = 9;
                    video3.play();
                    video3.visible = true;
                    video3.alpha = 1;
                    video3.setPosition(-1500, 0);
                    video3.scale.set(13.7,13.7);
                    FlxTween.tween(game.camHUD, {alpha: 0.4}, 0.2);
                case "stringsappear":
                    FlxTween.tween(stringsTrappedEnd, {alpha: 1}, 15);
                case "stopwhite":
                    whiteFadeTime = false;
                case "powerup1":
                    glowTime = false;
                    gfBlack.playAnim("buildFirst",true);
                case "powerup2":
                    game.defaultCamZoom = 0.25;
                    gfBlack.playAnim("buildSecond",true);
                case "tween1":
                    spiderTween.cancel();
                    FlxTween.tween(spiderGroup, {x: -15400}, 3.0, {ease: FlxEase.sineInOut});
            }
    }
}

function onBeatHit(){
    if (curBeat % 4 == 0 && henchTime){
        if (henchWhich){
            henchmanLight.alpha = 0.6;
            henchmanLight3.alpha = 0.1;
        } else {
            henchmanLight2.alpha = 0.6;
            henchmanLight4.alpha = 0.1;
        }
        henchWhich = !henchWhich;
    }

    if (curBeat % 4==0){
        stringsBg.alpha = 1;
    }
    stringsBgShoot.alpha = stringsBg.alpha;

    if (curBeat % 8 == 0 && whiteFadeTime){
        whiteFade.alpha = 0.6;
    }

    if (redLightTime == 1){
        if (curBeat % 8 == 0){
            redLight.alpha += 0.85;
        }
        else if (curBeat % 4 == 0) {
            redLight.alpha += 0.53;
        }
    } else if (redLightTime == 2){
        if (curBeat % 8 == 0){
            redLight.alpha += 0.85;
            redVin.alpha += 0.3;
        }
        else if (curBeat % 4 == 0) {
            redLight.alpha += 0.53;
            redVin.alpha += 0.2;
        } else if (curBeat % 2 == 0){
            redLight.alpha += 0.33;
            redVin.alpha += 0.1;
        }
    }
    
}

function onSectionHit(){
    if (!canMoveCam){return;}
    if (frontView){game.defaultCamZoom = 0.11; return;}
    if (mustHitSection == true){
        game.defaultCamZoom = 0.13;

        if (running) {
            // focus gf
            game.customCamera.set(-1210, 420);
            game.addCameraPoint(game.customCamera);
        }
    } else {
        if (running) {
            //focus mm
            game.defaultCamZoom = 0.10;
            game.customCamera.set(-4710, -1300); //x-4710
            game.addCameraPoint(game.customCamera);
        } else {
            game.defaultCamZoom = 0.12;
        }
    }
    
}

var trans = false;


function onDisplayCombo(combo:Int){
    var hud = state.hud;
    var ratingGroup = state.ratingGroup;


    if (ClientPrefs.simpleJudge)
    {
        for (prevCombo in state.lastCombos)
            prevCombo.kill();
        
        if (combo == 0)
            return;
    }
    else if (combo > 0 && combo < 10 && combo != 0)
        return;

    var comboColor = state.comboColor;
    var separatedScore:Array<String> = Std.string(Math.abs(combo)).split("");
    
    while (separatedScore.length < 3)
        separatedScore.unshift("0");
    
    if (combo < 0){
        separatedScore.unshift("neg");
        comboColor = hud.judgeColours.get("miss");
    }

    var scale = 1;
    if(ClientPrefs.worldCombos && !ClientPrefs.simpleJudge)
        scale = 6;

    var scoreHW = separatedScore.length * 41 / 2;
    
    var worldOffsetY:Float = (FlxG.height * 0.5) - (ClientPrefs.comboOffset[3] * scale);
    var numStartX:Float = (FlxG.width * 0.5) + (ClientPrefs.comboOffset[2] * scale) - (scoreHW * scale);

    if(gfEnding)
        numStartX += 500;

    var velocity =  FlxG.random.float(-1500, -1300);
    var daLoop:Int = 0;
    for (i in separatedScore)
    {
        var numScore:RatingSprite = ratingGroup.recycle(RatingSprite);
        numScore.loadGraphic(Paths.image('num' + i));
        numScore.scale.x = 0.5 * scale;
        numScore.scale.y = 0.5 * scale;

        if (ClientPrefs.simpleJudge){
            numScore.scale.x *= 1.25;
            numScore.updateHitbox();
            numScore.scale.y *= 0.75;
        }else
            numScore.updateHitbox();
        

        if(ClientPrefs.worldCombos && !ClientPrefs.simpleJudge)
            numScore.offset.set(numScore.width / 2, numScore.height / 2);
        else
            numScore.offset.set(0, numScore.height / 2);

        numScore.x = numStartX + (41.5 * daLoop * scale);
        numScore.y = worldOffsetY;

        numScore.color = comboColor;
        numScore.visible = state.showComboNum;

        numScore.ID = daLoop;
        numScore.moves = !ClientPrefs.simpleJudge;
        if (numScore.tween != null){
            numScore.tween.cancel();
            numScore.tween.destroy();
        }

        ratingGroup.remove(numScore, true);
        ratingGroup.add(numScore);

        numScore.alpha = ClientPrefs.judgeOpacity;

        if (hideJudge){
            numScore.alpha = 0;
        }
        if (ClientPrefs.simpleJudge)
        {
            numScore.tween = FlxTween.tween(numScore, {"scale.x": 0.5 * scale, "scale.y": 0.5 * scale}, 0.2, {ease: FlxEase.circOut});
            state.lastCombos.push(numScore);
        }
        else
        {
            numScore.acceleration.y = FlxG.random.int(200, 300);
            numScore.velocity.set(FlxG.random.float(-5, 5), -FlxG.random.int(140, 160));

            numScore.velocity.x *= scale;
            numScore.velocity.y *= scale;
            numScore.acceleration.x *= scale;
            numScore.acceleration.y *= scale;
            

            numScore.tween = FlxTween.tween(numScore, {alpha: 0.0}, 0.2, {
                onComplete: function(wtf)
                {
                    numScore.kill();
                },
                startDelay: Conductor.crochet * 0.002
            });
        }
        daLoop++;

    }
    return Function_Stop;
}

function onDisplayJudgmentPost(sprite, image){
    if (ClientPrefs.worldCombos && !ClientPrefs.simpleJudge){
        if (sprite.tween != null)
        {
            sprite.tween.cancel();
            sprite.tween.destroy();
        }
        sprite.scale.x = 0.666 * 6;
        sprite.scale.y = 0.666 * 6;

        sprite.offset.x *= 3;
        sprite.offset.y *= 6;

        sprite.alpha = 1.0;

        if (hideJudge){
            sprite.alpha = 0;
        }
        
        sprite.x = (FlxG.width * 0.5) + (ClientPrefs.comboOffset[0] * 6);
        sprite.y = (FlxG.height * 0.5) - (ClientPrefs.comboOffset[1] * 6);
        if(gfEnding)
            sprite.x += 500;

        sprite.tween = FlxTween.tween(sprite, {"scale.x": 0.7 * 6, "scale.y": 0.7 * 6}, 0.1, {ease: FlxEase.backOut, onComplete: function(twn){
            sprite.tween = FlxTween.tween(sprite, {alpha: 0.0}, 0.2, {
                startDelay: Conductor.crochet * 0.001,
                onComplete: function(wtf)
                {
                    sprite.kill();
                }
            });
        }});

        sprite.velocity.x *= 6;
        sprite.velocity.y *= 6;
        sprite.acceleration.x *= 6;
        sprite.acceleration.y *= 6; 
    }
}


var timer:Float = 0;

function onUpdate(elapsed){
    if (running){
        forestUpdateShit(elapsed);
        shake = true;
    } else {
        shake = false;
    }

    if(shake){
        game.camGame.shake(shakeAmount);
    }
    
    if (redLight.alpha > 0){
        redLight.alpha -= elapsed;
    }

    if (redVin.alpha > 0){
        redVin.alpha -= elapsed;
    }

    if (redVin2.alpha > 0){
        redVin2.alpha -= elapsed/2;
    }

    if (bloom.data.intensity.value[0] > 0){
        bloom.data.intensity.value[0] -= elapsed;
    }

    if (henchmanLight.alpha > 0){
        henchmanLight.alpha -= elapsed/2;
    }
    if (henchmanLight2.alpha > 0){
        henchmanLight2.alpha -= elapsed/2;
    }

    if (henchmanLight3.alpha > 0){
        henchmanLight3.alpha -= elapsed/6;
    }
    if (henchmanLight4.alpha > 0){
        henchmanLight4.alpha -= elapsed/6;
    }

    if (whiteFade.alpha > 0){
        whiteFade.alpha -= elapsed/4;
    }

    if (darkenBg.alpha > 0 && henchTime){
        darkenBg.alpha -= elapsed/4;
    }

    if (stringsBg.alpha > 0.5 && pulseStrings){
        stringsBg.alpha -= elapsed/2;
    }

    //momSpider.setPosition(game.dad.x,game.dad.y);
    momSpider.animTimer = game.dad.animTimer;
    momSpider.holdTimer= game.dad.holdTimer;
    momSpider.skipDance= game.dad.skipDance;

    if(glowTime){
        momCorruptBlack.setPosition(game.dad.x,game.dad.y);
        momCorruptBlack.animTimer = game.dad.animTimer;
        momCorruptBlack.holdTimer= game.dad.holdTimer;
        momCorruptBlack.skipDance= game.dad.skipDance;
        momCorruptBlack.scrollFactor = game.dad.scrollFactor;

        gfBlack.setPosition(game.boyfriend.x,game.boyfriend.y);
        gfBlack.animTimer = game.boyfriend.animTimer;
        gfBlack.holdTimer= game.boyfriend.holdTimer;
        gfBlack.skipDance= game.boyfriend.skipDance;
        if (game.boyfriend.animation.curAnim.name == 'idle'){
            gfBlack.animation.frameIndex = game.boyfriend.animation.frameIndex;
        }
    }
    


    // gf stopping running
    if (decreaseRate && rate > 0){
        rate -= elapsed;
    }

/*     if( Conductor.songPosition <= 0){
        blur.data.time.value[0] += elapsed * 0.75;
    }else{
        blur.data.time.value[0] = Conductor.songPosition * 0.001 * 0.75;
    } */


    //if (glitchBump.alpha > 0){
    //    glitchBump.alpha -= elapsed;
    //}
    //if(nullGlitch.data.glitchAmplitude.value > [0.0]){
    //nullGlitch.data.glitchAmplitude.value -= [0.001 * elapsed];
    //}
    //PlayState.instance.camFollow.set(object.x,object.y);
    //video.playVideo(Paths.video('SenpaiIdle'));
}

function addTrail(who:Character, ?length:Int = 4, ?delay:Int = 24, ?alpha:Float = 0.4, ?diff:Float = 0.069){
    if(length==null)length = 4;
    if(delay==null)delay = 24;
    if(alpha==null)alpha = 0.4;
    if(diff==null)diff = 0.069;

    bfTrail = new FlxTrail(who, null, length, delay, alpha, diff);
    bfTrail.color = FlxColor.RED;
    game.addBehindBF(bfTrail);
}

function forestUpdateShit(elapsed:Float){
    forestMove(forestBush, 25000, false, elapsed);
    forestMove(forestBush2, 25000, true, elapsed);

    forestMove(forestForeground, 30000, false, elapsed);
    forestMove(forestForeground2, 30000, true, elapsed);

    forestFloor.x -= 15000 * rate * elapsed;
    if (forestFloor.x <= (367- (forestFloor.width*6))){
        forestFloor.x = 367;
    }
    forestFloor2.x -= 15000 * rate *  elapsed;
    if (forestFloor2.x <= (367)){
        forestFloor2.x = 367 + (forestFloor2.width*6);
    }

    forestHench.x -= 15000 * rate * elapsed;
    if (forestHench.x <= (367- (forestHench.width*6))){
        forestHench.x = 367;
    }
    forestHench2.x -= 15000 * rate * elapsed;
    if (forestHench2.x <= (367)){
        forestHench2.x = 367 + (forestHench2.width*6);
    }

    forestBf.x -= 15000 * rate * elapsed;

    forestMove(forestTree, 10000, false, elapsed);
    forestMove(forestTree2, 10000, true, elapsed);

    forestMove(forestBushBg, 9000, false, elapsed);
    forestMove(forestBushBg2, 9000, true, elapsed);

    forestMove(forestTreeSecond, 6000, false, elapsed);
    forestMove(forestTreeSecond2, 6000, true, elapsed);

    forestTreeThird.x -= 4000 * rate * elapsed;
    if (forestTreeThird.x <= (367- (forestTreeThird.width*6))){
        forestTreeThird.x = 367;
    }
    forestTreeThird2.x -= 4000 * rate * elapsed;
    if (forestTreeThird2.x <= (367)){
        forestTreeThird2.x = 367 + (forestTreeThird2.width*6);
    }

    for(shit in game.ratingGroup)
        shit.x -= 2400 * rate * elapsed;

}

function forestMove(sprite:FlxSprite, speed:Float, alt:Bool, elapsed:Float){
    sprite.x -= speed * rate *  elapsed;
    if (alt){
        if (sprite.x <= (367- (sprite.width*6))){
            sprite.x = 367;
        }
    } else {
        if (sprite.x <= 367){
            sprite.x = 367 + (sprite.width*6);
        }
    }
    
}

function addOverlay(col1:Array<Float>,col2:Array<Float>,blend:Float){
    game.camGame.setFilters([new ShaderFilter(bloom)]);
    overlay = newShader("overlay");
    arrT = col1;
    arrR = col2;
    poses = [0.5,-0.15];
    amtt = blend;
    trans = false;
    overlay.data.rT.value = [arrT[0]/255];
    overlay.data.gT.value = [arrT[1]/255];
    overlay.data.bT.value = [arrT[2]/255];
    overlay.data.rR.value = [arrR[0]/255];
    overlay.data.gR.value = [arrR[1]/255];
    overlay.data.bR.value = [arrR[2]/255];
    overlay.data.ypos.value = [poses[1]];
    overlay.data.xpos.value = [poses[0]];
    overlay.data.amt.value = [amtt];
    overlay.data.trans.value = [trans];
    game.camGame.setFilters([new ShaderFilter(overlay), new ShaderFilter(bloom)]);
}
