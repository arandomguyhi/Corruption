import flixel.math.FlxMath;
import openfl.filters.ShaderFilter;
import openfl.Lib;
import flixel.addons.display.FlxBackdrop;

// TRIVIA: The events of Bloodlust were originally going to happen offscreen
// but one day Leebert really wanted to make a new corruption song,
// so i tried to find a place in the story where an additional song would fit
// and this is the result!

// More TRIVIA: This originally ran like.. really poorly because the camera zoom was WAAAYY too zoomed out
// So this ENTIRE SCRIPT had to be rewritten! This is the remade code which leverages more Troll Engine features and also with a normal cam zoom
// vv If you wanna see how Bloodlust works behind the scenes, just set this variable from 'false' to 'true'! This gives a zoomed out,
// static camera view of the whole song
var boundaryBreak:Bool = false; 

var frontView = false;
var canZoom = true;
var object:FlxBasic;
var floor:FlxSprite;
var wall:FlxSprite;
var stringPrep:FlxSprite;
var henchTime = false;
var henchWhich = false;
var overlay = null;
var object = null;
var redLightMode = 0;
var stringBG:FlxSprite;


var altWallGraphic:FlxGraphic;
var altFloorGraphic:FlxGraphic;

var hurtVin:FlxSprite;
var hurtRedVin:FlxSprite;
var hurtBlack:FlxSprite;

var debugCamPosX:Float = 608;
var debugCamPosY:Float = 214;
var debugCamZoom:Float = 0.669;

var worldCombos = ClientPrefs.worldCombos;
var wallGraphic:FlxGraphic;
var floorGraphic:FlxGraphic;

var shaders = ClientPrefs.shaders;
var stringPulsing:Bool = true;
var stopping = false;
var running = false;
var bloom = newShader("null-and-void/bloom");
bloom.data.blurSize.value = [0.01];
bloom.data.intensity.value = [0.0];

var blur = newShader("zoomblur");
blur.data.posX.value = [0.5];
blur.data.posY.value = [0.5];
blur.data.focusPower.value = [15.0];

var sky;
var building;
var startTime = 0;
var blackBG;
var darkenBG;
var whiteGradient;

var frontCameraPos;
var forestCameraPos;
var changingBGCamera;

var scopeVin:FlxSprite;

var hasGameOvered:Bool = false;

var hurtAmount:Float = 0;
var hurtRedAmount:Float = 0;
var hurtAmountBlack:Float = 0; // vary them for cooler effect

function reloadHealthBarColors(hud, dC, bC){ // Forces red/green HP bar
	hud.reloadHealthBarColors(0xFFFF0000, 0xFF00FF00);
	return Function_Stop;
}

var lowQuality = false;
var forest = [];

function onCreate(){
	prevWorldCombos = ClientPrefs.worldCombos;

	FlxSprite.defaultAntialiasing = true;

	if (ClientPrefs.playedBloodlustBefore == null){
		ClientPrefs.playedBloodlustBefore = false;
	}
	if (!ClientPrefs.playedBloodlustBefore) // first time bloodlust make worldcombos cuz its cooler!!!
	{
		ClientPrefs.playedBloodlustBefore = true;
		ClientPrefs.worldCombos = true;
		worldCombos = true;
	}
}

// Alot of this code could be moved into a stage script
// But who cares lol this works
function onCreatePost(){
	game.worldCombos = worldCombos;
	lowQuality = ClientPrefs.lowQuality; // Removes some elements of the song to reduce memory
	game.instaRespawn = true;

    game.addCharacterToList("gfRage", 0);
    game.addCharacterToList("momFront", 1);
    game.addCharacterToList("momFrontSecond", 1);
    game.addCharacterToList("gfNorm", 0);
    game.addCharacterToList("momCorrupt", 1);
    game.addCharacterToList("gfDark", 0);
	game.addCharacterToList("gfRun", 0);
	startTime = PlayState.startOnTime;
	
	addOverlay([35.0,16.0,62.0],[203.0, 21.0, 122.0],0.175);
	// Forest stuff
	// These are all super high up along w/ spider mom

	forestSky = new FlxSprite(-1600,-3800).loadGraphic(Paths.image('forestSky'));
    forestSky.antialiasing = true;
	forestSky.scale.set(1.25, 1.25);
	forestSky.updateHitbox();
    forestSky.scrollFactor.set(0.9, 0.9);
    game.addBehindDad(forestSky);

	if(!lowQuality){
		forestTreeBehinder = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('forestTree3'));
		forestTreeBehinder.screenCenter();
		forestTreeBehinder.antialiasing = true;
		forestTreeBehinder.scrollFactor.set(0.25, 0.25);
		forestTreeBehinder.x = -900;
		forestTreeBehinder.y = -1100;
		game.addBehindDad(forestTreeBehinder);
		forestTreeBehinder.velocity.x = -666;

		forestTreeBehind = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('forestTree2'));
		forestTreeBehind.screenCenter();
		forestTreeBehind.antialiasing = true;
		forestTreeBehind.scrollFactor.set(0.4, 0.4);
		forestTreeBehind.x = -1500;
		forestTreeBehind.y = -2053;
		game.addBehindDad(forestTreeBehind);
		forestTreeBehind.velocity.x = -1000;

		forestTree = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('forestTree'));
		forestTree.screenCenter();
		forestTree.antialiasing = true;
		forestTree.scrollFactor.set(0.75, 0.75);
		forestTree.x = -1000;
		forestTree.y = -3303;
		game.addBehindDad(forestTree);
		forestTree.velocity.x = -1666;

	}else{
		forestTreeBehinder = new FlxSprite(-999, -999).makeGraphic(1, 1, FlxColor.BLACK);

		forestTreeBehind = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('lowquality/forestTree'));
		forestTreeBehind.screenCenter();
		forestTreeBehind.antialiasing = true;
		forestTreeBehind.scrollFactor.set(0.75, 0.75);
		forestTreeBehind.x = -1000;
		forestTreeBehind.y = -3103;
		game.addBehindDad(forestTreeBehind);
		forestTreeBehind.velocity.x = -1600;
		forestTreeBehind.scale.set(0.9, 0.9);
		
		forestTree = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('lowquality/forestTree'));
		forestTree.screenCenter();
		forestTree.antialiasing = true;
		forestTree.scrollFactor.set(0.75, 0.75);
		forestTree.x = -1000;
		forestTree.y = -3503;
		game.addBehindDad(forestTree);
		forestTree.velocity.x = -2000;
	}
	
	forestBush = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('forestBushBg'));
	forestBush.screenCenter();
	forestBush.antialiasing = true;
	forestBush.scrollFactor.set(1, 1);
	forestBush.x = -1000;
	forestBush.y = -3350;
	game.addBehindDad(forestBush);
	forestBush.velocity.x = -1666;

	forestFloor = new FlxBackdrop(Paths.image('forestFloor'), 0x01);
	forestFloor.x = -1600;
	forestFloor.y = -3004;
	forestFloor.velocity.x = -2500;
    forestFloor.antialiasing = true;
    forestFloor.scrollFactor.set(1, 1);
    game.addBehindDad(forestFloor);

	if(lowQuality){
		forestHench = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('lowquality/forestHench'));
		forestHench.scale.set(2, 2);
		forestHench.updateHitbox();
		forestHench.screenCenter();
		forestHench.antialiasing = true;
		forestHench.scrollFactor.set(1, 1);
		forestHench.x = -1000;
		forestHench.y = -4033;
		forestHench.scale.set(2.5, 2.5);
		forestHench.updateHitbox();
		forestHench.visible = false;
		game.addBehindDad(forestHench);
		forestHench.velocity.x = -2550;
	}else{
		forestHench = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('forestHench'));
		forestHench.screenCenter();
		forestHench.antialiasing = true;
		forestHench.scrollFactor.set(1, 1);
		forestHench.x = -1000;
		forestHench.y = -4033;
		forestHench.scale.set(1.25, 1.25);
		forestHench.updateHitbox();
		forestHench.visible = false;
		game.addBehindDad(forestHench);
		forestHench.velocity.x = -2550;
	}

	forestBf = new FlxSprite(-720 + 30000, -3610).loadGraphic(Paths.image('henchBf'));
    forestBf.antialiasing = true;
    forestBf.scrollFactor.set(1, 1);
	forestBf.scale.set(0.9, 0.9);
	forestBf.visible = false;
    game.addBehindDad(forestBf);
	forestBf.velocity.x = -2570;

	if(!lowQuality){
		forestFront = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('forestFront'));
		forestFront.screenCenter();
		forestFront.antialiasing = true;
		forestFront.scrollFactor.set(1, 1);
		forestFront.x = -1000;
		forestFront.y = -3252;
		game.add(forestFront);
		forestFront.velocity.x = -3500;

		forestForeground = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('forestForeground'));
		forestForeground.screenCenter();
		forestForeground.antialiasing = true;
		forestForeground.scrollFactor.set(1.2, 1.2);
		forestForeground.x = -750;
		forestForeground.scale.set(1.35, 1.1);
		forestForeground.y = -4860;
		game.add(forestForeground);
		forestForeground.velocity.x = -5000;
	}else{
		forestFront = new FlxSprite(-999, -999).makeGraphic(1, 1, FlxColor.BLACK);

		forestForeground = new FlxBackdrop(null, 0x01).loadGraphic(Paths.image('forestForeground'));
		forestForeground.scale.set(2, 2);
		forestForeground.updateHitbox();
		forestForeground.screenCenter();
		forestForeground.antialiasing = true;
		forestForeground.scrollFactor.set(1.2, 1.2);
		forestForeground.x = -750;
		forestForeground.scale.x *= 1.35;
		forestForeground.scale.y *= 1.1;
		forestForeground.y = -4860;
		game.add(forestForeground);
		forestForeground.velocity.x = -5000;

	}

	var xOffset:Float = -1425;
	var yOffset:Float = -750;

	altFloorGraphic = Paths.image("bloodlust_floor-alt");
	altWallGraphic = Paths.image("bloodlust_wall-alt");

	floorGraphic = Paths.image("bloodlust_floor");
	wallGraphic = Paths.image("bloodlust_wall");

	sky = new FlxSprite(-1745,-330).loadGraphic(Paths.image('bloodlust_sky'));
    sky.antialiasing = true;
    sky.scrollFactor.set(0.5, 0.5);
    sky.active = false;
    game.addBehindDad(sky);

	floor = new FlxSprite(-1638,331).loadGraphic(floorGraphic);
    floor.antialiasing = true;
    floor.scrollFactor.set(1, 1);
    floor.active = false;
    game.addBehindDad(floor);

	building = new FlxSprite(1185,-255).loadGraphic(Paths.image('bloodlust_building'));
    building.antialiasing = true;
    building.scrollFactor.set(0.8, 1);
    building.active = false;
    game.addBehindDad(building);

	wall = new FlxSprite(-1634,-875).loadGraphic(wallGraphic);
    wall.antialiasing = true;
    wall.scrollFactor.set(0.95, 1);
    wall.active = false;
    game.addBehindDad(wall);

	stringsBg = new FlxSprite().loadGraphic(Paths.image("stringsBg"));
	stringsBg.antialiasing = true;
	stringsBg.scrollFactor.set(1, 1);
	stringsBg.active = false;
	stringsBg.scale.set(1.2,1.4);
	game.addBehindDad(stringsBg);
	stringsBg.setPosition(-509,134);

	stringsBgShoot = new FlxSprite().loadGraphic(Paths.image("stringsBgShoot"));
	stringsBgShoot.antialiasing = true;
	stringsBgShoot.scrollFactor.set(1, 1);
	stringsBgShoot.active = false;
	game.addBehindDad(stringsBgShoot);
	stringsBgShoot.setPosition(-509,134);
	stringsBgShoot.scale.set(1.2,1.4);
	stringsBgShoot.visible = false;
	stringsBg.visible = false;

    fade = new FlxSprite(900,0).loadGraphic(Paths.image('fade'));
    fade.scale.set(1.55, 1.55);
    fade.antialiasing = true;
    fade.scrollFactor.set(1, 1);
    fade.alpha = 0;
    game.addBehindDad(fade);

	wall.scale.set(1.5, 1.5);
	wall.updateHitbox();
	building.scale.set(1.4, 1.4);
	building.updateHitbox();
	floor.scale.set(1.5, 1.5);
	floor.updateHitbox();
	sky.scale.set(1.4, 1.4);

	sky.scale.x *= 1.333;
	sky.scale.y *= 1.333;

	sky.updateHitbox();

	stringPrep = new FlxSprite();
    stringPrep.frames = Paths.getSparrowAtlas('stringPrep');
    stringPrep.animation.addByPrefix("idle", 'StringPrep', 24, false);
    stringPrep.animation.play("idle", true);
    stringPrep.scrollFactor.set(1, 1);
    stringPrep.antialiasing = true;
    stringPrep.setPosition(163.3-85, 535);
    stringPrep.alpha = 0;
    game.add(stringPrep);

	stringPrep2 = new FlxSprite();
    stringPrep2.frames = Paths.getSparrowAtlas('stringPrep');
    stringPrep2.animation.addByPrefix("idle", 'StringPrep', 24, false);
    stringPrep2.animation.play("idle", true);
    stringPrep2.scrollFactor.set(1, 1);	
    stringPrep2.antialiasing = true;
    stringPrep2.setPosition(221.66-85, 550);
    stringPrep2.alpha = 0;
    game.add(stringPrep2);

	stringShoot = new FlxSprite();
    stringShoot.frames = Paths.getSparrowAtlas('stringShoot');
    stringShoot.animation.addByPrefix("idle", 'StringShoot', 24, false);
    stringShoot.animation.play("idle", true);
    stringShoot.scrollFactor.set(1, 1);
    stringShoot.antialiasing = true;
    stringShoot.setPosition(-365-85, 156);
    stringShoot.alpha = 0;
    game.add(stringShoot);

    stringShoot2 = new FlxSprite();
    stringShoot2.frames = Paths.getSparrowAtlas('stringShoot');
    stringShoot2.animation.addByPrefix("idle", 'StringShoot', 24, false);
    stringShoot2.animation.play("idle", true);
    stringShoot2.scrollFactor.set(1, 1);
    stringShoot2.antialiasing = true;
    stringShoot2.setPosition(-303-85, 170);
    stringShoot2.alpha = 0;
    game.add(stringShoot2);

	henchmanLight = new FlxSprite(-1750, -377+45).loadGraphic(Paths.image('henchmanLight'));
    henchmanLight.antialiasing = true;
    henchmanLight.scrollFactor.set(1, 1);
    henchmanLight.alpha = 0;
    henchmanLight.blend = 0;
    game.addBehindDad(henchmanLight);

    henchmanLight2 = new FlxSprite(-900,-377+45).loadGraphic(Paths.image('henchmanLight'));
    henchmanLight2.antialiasing = true;
    henchmanLight2.scrollFactor.set(1, 1);
    henchmanLight2.alpha = 0;
    henchmanLight2.blend = 0;
    game.addBehindDad(henchmanLight2);

	henchmanLight3 = new FlxSprite(-1750,-377+45).loadGraphic(Paths.image('henchmanLight'));
	henchmanLight3.antialiasing = true;
	henchmanLight3.scrollFactor.set(1, 1);
	henchmanLight3.alpha = 0;
	henchmanLight3.blend = 0;
	game.add(henchmanLight3);

	henchmanLight4 = new FlxSprite(-900,-377+45).loadGraphic(Paths.image('henchmanLight'));
	henchmanLight4.antialiasing = true;
	henchmanLight4.scrollFactor.set(1, 1);
	henchmanLight4.alpha = 0;
	henchmanLight4.blend = 0;
	game.add(henchmanLight4);

	game.dad.setPosition(420,-165);

	if(!lowQuality){
		momCorruptBlack = new Character(0,0, 'momCorruptBlack');
		game.startCharacter(momCorruptBlack, true);
		momCorruptBlack.voicelining = true;
		momCorruptBlack.setPosition(game.dad.x,game.dad.y);
		momCorruptBlack.scrollFactor = game.dad.scrollFactor;
		momCorruptBlack.alpha = 0;
		momCorruptBlack.blend = 0;

		gfBlack = new Character(0,0, 'gfBlack');
		game.startCharacter(gfBlack, true);
		gfBlack.setPosition(game.boyfriend.x + gfBlack.positionArray[0],game.boyfriend.y + gfBlack.positionArray[1]);
		gfBlack.voicelining = true;
		gfBlack.scrollFactor = game.boyfriend.scrollFactor;
		gfBlack.alpha = 0;
		gfBlack.blend = 0;
		gfBlack.flipX = game.boyfriend.flipX;
	}


	blackBG = new FlxSprite(300,0).makeGraphic(1, 1, FlxColor.BLACK);
	blackBG.scale.set(1280, 720);
	blackBG.updateHitbox();
	blackBG.scale.x *= 1.35;
	blackBG.scale.y *= 1.35;
	blackBG.visible = false;
	game.addBehindDad(blackBG);

	redLight = new FlxSprite(-330,-480).loadGraphic(Paths.image('BackLight'));
    redLight.scale.set(1,1);
    redLight.antialiasing = true;
    redLight.scrollFactor.set(0.95, 1);
    redLight.alpha = 0;
	redLight.visible = false;
	game.addBehindDad(redLight);

	redVin = new FlxSprite(-472, -720).loadGraphic(Paths.image('VinRed'));
    redVin.antialiasing = true;
    redVin.scrollFactor.set(0, 0);
    redVin.alpha = 0;
	redVin.visible = false;
	//redVin.screenCenter();
	game.addBehindDad(redVin);

	gfShocked = new FlxSprite(230,40).loadGraphic(Paths.image('gfShockBody'));
    gfShocked.scale.set(0.9, 0.9);
    gfShocked.antialiasing = true;
    gfShocked.scrollFactor.set(0,0);
    gfShocked.alpha = 0;
    game.add(gfShocked);

	iconP2 = game.hud.iconP2;
	
	game.hud.remove(iconP2);
	game.hud.remove(game.hud.iconP1);

    gfShockedEye = new FlxSprite(230,40).loadGraphic(Paths.image('gfShockEye'));
    gfShockedEye.scale.set(0.9, 0.9);
    gfShockedEye.antialiasing = true;
    gfShockedEye.scrollFactor.set(0,0);
    gfShockedEye.alpha = 0;
    gfShockedEye.blend = 0;
    game.add(gfShockedEye);

	game.camGame.bgColor = FlxColor.GRAY;

	//game.defaultCamZoom = 0.3;

	forest.push(forestSky);
	forest.push(forestTreeBehinder);
	forest.push(forestTreeBehind);
	forest.push(forestTree);
	forest.push(forestBush);
	forest.push(forestFloor);
	forest.push(forestBf);
	forest.push(forestHench);
	forest.push(forestFront);
	forest.push(forestForeground);
	// Build--A-Spider

	game.addCharacterToList("momSpider", 1);

    spiderGroup = new FlxSpriteGroup(-998, -3600);
    spiderGroup.scrollFactor.set(1,1);
    game.addBehindDad(spiderGroup);
    spiderGroup.alpha = 1;

	spiderBackLegs = new FlxSprite();
    spiderBackLegs.frames = Paths.getSparrowAtlas('spiderLegsBack');
    spiderBackLegs.animation.addByPrefix("idle", 'BackLegs', 24, true);
    spiderBackLegs.animation.play("idle", true);
    spiderBackLegs.scale.set(1.3, 1.3);
    spiderBackLegs.antialiasing = true;
    spiderBackLegs.alpha = 1;
    spiderGroup.add(spiderBackLegs);
	spiderBackLegs.setPosition(-1669, -3255);

	spiderBody = new FlxSprite();
    spiderBody.frames = Paths.getSparrowAtlas('spidermm');
    spiderBody.animation.addByPrefix("idle", 'body', 24, true);
    spiderBody.animation.play("idle", true);
    spiderBody.scale.set(1.3, 1.3);
    spiderBody.antialiasing = true;
    spiderBody.alpha = 1;
    spiderGroup.add(spiderBody);
	spiderBody.setPosition(-1665, -3479);

	


	momSpider = game.dadMap.get("momSpider"); // addCharacterToList adds it to this map and sets up the character for us
	// Easier than setting up the character ourselves
	// Also means we can just call change character to change it to momSpider
	momSpider.alpha = 1;
	game.dadGroup.remove(momSpider);
    spiderGroup.add(momSpider);

	spiderFrontLegs = new FlxSprite();
    spiderFrontLegs.frames = Paths.getSparrowAtlas('spiderLegsFront');
    spiderFrontLegs.animation.addByPrefix("idle", 'front leg finished', 24, true);
    spiderFrontLegs.animation.play("idle", true);
    spiderFrontLegs.scale.set(1.3, 1.3);
    spiderFrontLegs.antialiasing = true;
    spiderFrontLegs.alpha = 1;
    spiderGroup.add(spiderFrontLegs);
	spiderFrontLegs.setPosition(-1853, -3307);

	spiderGroup.y -= 275;
	spiderGroup.x -= 300;

	forest.push(spiderGroup);

	spiderPunched = new FlxSprite();
    spiderPunched.frames = Paths.getSparrowAtlas('spiderPunched');
    spiderPunched.animation.addByPrefix("idle", 'SpiderDeath', 24, false);
    spiderPunched.animation.play("idle", true);
    spiderPunched.scrollFactor.set(1,1);
    spiderPunched.scale.set(1.3, 1.3);
    spiderPunched.antialiasing = true;
    spiderPunched.alpha = 0;
    game.add(spiderPunched);
	spiderPunched.setPosition(-1600, -300);

	changingBGCamera = FlxPoint.get();
	changingBGCamera.x = 1070;
	changingBGCamera.y = 290;

	frontCameraPos = FlxPoint.get();
	frontCameraPos.x = 830;
	frontCameraPos.y = 300;
	forestCameraPos = FlxPoint.get(); // Running camera
	forestCameraPos.x = -200;
	forestCameraPos.y = -3300;
	game.boyfriendMap.get("gfRun").y = -3400;
	game.boyfriendMap.get("gfRun").alpha = 1;
	forest.push(game.boyfriendMap.get("gfRun"));
	

	for(spr in forest){
		//spr.y -= 2000;
		spr.health = spr.velocity.x;
	}
	// Instead of using a character script could instead just add the character to a playfield
	// but uhh :PPP

	if(!lowQuality){
		game.boyfriendMap.get("gfRage").setOnScripts("clone", gfBlack); 
		game.dadMap.get("momCorrupt").setOnScripts("clone", momCorruptBlack); 
	}

	darkenBG = new FlxSprite(0,0).makeGraphic(1, 1, FlxColor.BLACK);
	darkenBG.scale.set(1280, 720);
	darkenBG.updateHitbox();
	darkenBG.scrollFactor.set(0, 0);
	darkenBG.scale.x *= 3;
	darkenBG.scale.y *= 3;
	darkenBG.updateHitbox();
	darkenBG.screenCenter();
	darkenBG.visible = false;
	game.addBehindDad(darkenBG);

	whiteFade = new FlxSprite(-1200, -216).loadGraphic(Paths.image('smallWhiteFade'));
    whiteFade.scale.set(1280, 1.5);
    whiteFade.antialiasing = true;
    whiteFade.scrollFactor.set(1,1);
    whiteFade.active = false;
    whiteFade.alpha = 0.6;
	whiteFade.visible = false;
    game.addBehindDad(whiteFade);
	
	stringsTrappedEnd = new FlxSprite(-1357,-420).loadGraphic(Paths.image('stringsTrappedEnd'));
    stringsTrappedEnd.scale.set(1.25, 1.25);
    stringsTrappedEnd.antialiasing = true;
    stringsTrappedEnd.scrollFactor.set(1,1);
    stringsTrappedEnd.active = false;
    stringsTrappedEnd.alpha = 0;
    game.addBehindDad(stringsTrappedEnd);


	gfSleep = new FlxSprite();
    gfSleep.frames = Paths.getSparrowAtlas('GfSleep');
    gfSleep.animation.addByPrefix("idle", 'GfSleep', 24, true);
    gfSleep.animation.play("idle", true);
    gfSleep.scrollFactor.set(1, 1);
    gfSleep.antialiasing = true;
	gfSleep.visible = false;
    gfSleep.setPosition(game.boyfriend.x + 10, game.boyfriend.y); //-1842
    game.add(gfSleep);

	// Videos

	blazeIt = new MP4Sprite();
	blazeIt.blend = 9;
	blazeIt.alpha = 0;
    blazeIt.bitmap.onFormatSetup.add(function():Void
    {
        blazeIt.scale.set(2.5, 1.5);
        blazeIt.updateHitbox();
        blazeIt.x = -1200;
		blazeIt.y = -200;
    });
	
    blazeIt.bitmap.onEndReached.add(destroyVid(blazeIt));
    game.add(blazeIt);
	blazeIt.load(Paths.video('smokeEffect'), [':input-repeat=0']);

	smokeVin = new MP4Sprite();
	smokeVin.blend = 9;
	smokeVin.alpha = 0;
    smokeVin.bitmap.onFormatSetup.add(function():Void
    {
        smokeVin.scale.set(1.4,1.4);
		smokeVin.scrollFactor.set(0,0);
        smokeVin.updateHitbox();
        smokeVin.x = -270;
		smokeVin.y = -130;
    });
	
    smokeVin.bitmap.onEndReached.add(destroyVid(smokeVin));
    game.add(smokeVin);
	smokeVin.load(Paths.video('smokeVin'), [':input-repeat=65545']);

	if(!lowQuality){
		game.add(momCorruptBlack);
		game.add(gfBlack);
	}

	lightSnow = new MP4Sprite();
    lightSnow.bitmap.onFormatSetup.add(function():Void
    {
        lightSnow.scale.set(2.5 ,2.5);
        lightSnow.updateHitbox();
        lightSnow.scrollFactor.set(1.2, 1.2);
        lightSnow.screenCenter();
    });
	lightSnow.blend = 12;
	lightSnow.alpha = 1;
    lightSnow.bitmap.onEndReached.add(destroyVid(lightSnow));
    game.add(lightSnow);
	lightSnow.load(Paths.video('snow light'), [':input-repeat=65545']);
	lightSnow.play();

	heavySnow = new MP4Sprite();
    heavySnow.bitmap.onFormatSetup.add(function():Void
    {
        heavySnow.scale.set(2.5 ,2.5);
        heavySnow.updateHitbox();
        heavySnow.scrollFactor.set(1.2, 1.2);
        heavySnow.screenCenter();
    });
	heavySnow.blend = 12;
	heavySnow.alpha = 0;
	
    heavySnow.bitmap.onEndReached.add(destroyVid(heavySnow));
    game.add(heavySnow);
	heavySnow.load(Paths.video('snow heavy'), [':input-repeat=65545']);

	momLaugh = new MP4Sprite();
    momLaugh.bitmap.onFormatSetup.add(function():Void
    {
        momLaugh.setPosition(0,0);
        momLaugh.scrollFactor.set(0,0);
    });

	blackSnow = new MP4Sprite();
    blackSnow.bitmap.onFormatSetup.add(function():Void
    {
        blackSnow.scale.set(1.25, 1.25);
        blackSnow.updateHitbox();
        blackSnow.scrollFactor.set(1, 1);
		blackSnow.setPosition(-960,-190);
    });
	blackSnow.blend = 9;
	blackSnow.alpha = 0;
    blackSnow.bitmap.onEndReached.add(destroyVid(blackSnow));
	if(!lowQuality){
    	game.add(blackSnow);
		blackSnow.load(Paths.video('dark snow'), [':input-repeat=65545']);
	}


	momLaugh.scale.set(1 / game.defaultCamZoom, 1 / game.defaultCamZoom);
    momLaugh.bitmap.onEndReached.add(destroyVid(momLaugh));
    momLaugh.alpha = 0;
    game.add(momLaugh);
	momLaugh.load(Paths.video('momLaugh'), [':input-repeat=0']);

	letsSettleThis = new MP4Sprite();
    letsSettleThis.bitmap.onFormatSetup.add(function():Void
    {
        letsSettleThis.setPosition(0,0);
        letsSettleThis.scrollFactor.set(0,0);
    });
	
	letsSettleThis.scale.set(1 / 1.4, 1 / 1.4);
    letsSettleThis.bitmap.onEndReached.add(destroyVid(letsSettleThis));
    letsSettleThis.alpha = 0;
    game.add(letsSettleThis);
	letsSettleThis.load(Paths.video('letsSettleThis'), [':input-repeat=0']);

	waveEfx = new MP4Sprite();
	waveEfx.blend = 0;
	waveEfx.alpha = 0;
    waveEfx.bitmap.onFormatSetup.add(function():Void
    {
        waveEfx.scale.set(1.1,1.1);
		waveEfx.scrollFactor.set(0,0);
        waveEfx.updateHitbox();
        waveEfx.x = -35;
		waveEfx.y = -25;
    });
	
    waveEfx.bitmap.onEndReached.add(destroyVid(waveEfx));
	if(!lowQuality){
		game.add(waveEfx);
		waveEfx.load(Paths.video('waveEffect'), [':input-repeat=65545']);
		waveEfx.play();
		waveEfx.cameras = [game.camOverlay];
	}

	blackTop = new FlxSprite(0,0).makeGraphic(1, 1, FlxColor.BLACK);
    blackTop.scale.set(1280 * 2, 720 * 2);
	blackTop.updateHitbox();
    blackTop.scrollFactor.set(0,0);
    blackTop.alpha = 1;
    blackTop.cameras = [game.camHUD];
    game.add(blackTop);

	black2 = new FlxSprite(0,0).makeGraphic(1, 1, FlxColor.BLACK);
    black2.scale.set(1280 * 3, 720 * 3);
	black2.updateHitbox();
    black2.scrollFactor.set(0,0);
	black2.screenCenter();
    black2.alpha = 0;
    game.add(black2);

	game.worldComboOrigin.x -= 400;


	if(!lowQuality){
		scopeVin = new FlxSprite();
		scopeVin.frames = Paths.getSparrowAtlas('scopeVin');
		scopeVin.animation.addByPrefix("idle", 'scopeVin idle', 20, true);
		scopeVin.animation.play("idle", true);
		scopeVin.scrollFactor.set(0,0);
		scopeVin.scale.set(1.6,1.6);
		scopeVin.antialiasing = true;
		scopeVin.alpha = 0;
		scopeVin.blend = 0;
		game.add(scopeVin);
		scopeVin.setPosition(241,135);
		scopeVin.cameras = [game.camOverlay];

		hurtVin = new FlxSprite(-300,-170).loadGraphic(Paths.image('hurtVin'));
		hurtVin.scale.set(0.7,0.7);
		hurtVin.antialiasing = false;
		hurtVin.scrollFactor.set(0, 0);
		hurtVin.active = false;
		hurtVin.alpha = 0;
		hurtVin.blend = 9;
		hurtVin.cameras = [game.camOverlay];
		game.add(hurtVin);

		hurtRedVin = new FlxSprite(-300,-170).loadGraphic(Paths.image('redHurtVin'));
		hurtRedVin.antialiasing = false;
		hurtRedVin.scrollFactor.set(0, 0);
		hurtRedVin.active = false;
		hurtRedVin.alpha = 0;
		hurtRedVin.blend = 0;
		hurtRedVin.cameras = [game.camOverlay];
		game.add(hurtRedVin);
	}else{
		hurtRedVin = new FlxSprite(0,0).makeGraphic(1, 1, FlxColor.BLACK);
		hurtVin = new FlxSprite(0,0).makeGraphic(1, 1, FlxColor.BLACK);
		scopeVin = new FlxSprite(0,0).makeGraphic(1, 1, FlxColor.BLACK);
	}

	hurtBlack = new FlxSprite(0,0).makeGraphic(1, 1, FlxColor.BLACK);
    hurtBlack.scale.set(1280 * 3, 720 * 3);
	hurtBlack.updateHitbox();
    hurtBlack.scrollFactor.set(0,0);
	hurtBlack.screenCenter();
    hurtBlack.alpha = 0;
	hurtBlack.blend = 9;
    game.add(hurtBlack);

	lowVin = new FlxSprite(-300,-170).loadGraphic(Paths.image('lowHealth'));
    lowVin.antialiasing = true;
    lowVin.scrollFactor.set(0, 0);
    lowVin.alpha = 0;
    lowVin.screenCenter();
	lowVin.blend = 0;
	lowVin.cameras = [game.camOverlay];
	game.add(lowVin);

	var bfShadow = new FlxSprite(-382,549).loadGraphic(Paths.image('shadow'));
    bfShadow.scale.set(1.1, 1.1);
    bfShadow.antialiasing = true;
    bfShadow.alpha = 0.6;
    bfShadow.scrollFactor.set(1, 1);
    game.addBehindBF(bfShadow);

    var dadShadow = new FlxSprite(465,555).loadGraphic(Paths.image('shadow'));
    dadShadow.scale.set(1.5,1.4);
    dadShadow.antialiasing = true;
    dadShadow.alpha = 0.6;
    dadShadow.scrollFactor.set(1, 1);
    game.addBehindBF(dadShadow);

	object = waveEfx;
}

function onReceptorGeneration(){
    game.remove(game.ratingGroup, true);
	trace(game.members.indexOf(game.boyfriendGroup));
    game.insert(game.members.indexOf(game.boyfriendGroup) - 1, game.ratingGroup);
}

function noteMiss(note:Note, field:PlayField){
    hurtAmount += 0.2;
	hurtAmountBlack += 0.2;

	if (game.curStep >= 631 && game.curStep < 648){ // missed string attacks
		hurtRedAmount += 0.4;
		FlxG.camera.zoom += 0.15 * ClientPrefs.camZoomP;
		game.camHUD.zoom += 0.07 * ClientPrefs.camZoomP;
		bloom.data.intensity.value[0] = 0.25;
		game.health -= 0.35;
	}
}

function noteMissPress(direction:Int){
    hurtAmount += 0.2;
	hurtAmountBlack += 0.2;
}


function onPause(){
	blazeIt.pause();
	smokeVin.pause();
	lightSnow.pause();
	heavySnow.pause();
	if(momLaugh.visible)
		momLaugh.pause();
	if(letsSettleThis.visible)
		letsSettleThis.pause();
}

function onResume(){
	blazeIt.resume();
	smokeVin.resume();
	lightSnow.resume();
	heavySnow.resume();
	if(momLaugh.visible)
		momLaugh.resume();
	if(letsSettleThis.visible)
		letsSettleThis.resume();
}


function destroyVid(video){
	return ()->{
		trace("dead");
		game.remove(video);
		video.destroy();
	}
}

function altFloor(){
	var scaleX = floor.scale.x;
	var scaleY = floor.scale.y;
	floor.loadGraphic(altFloorGraphic);
	floor.scale.set(scaleX, scaleY);
	floor.updateHitbox();
}

function altWall(){
	var scaleX = wall.scale.x;
	var scaleY = wall.scale.y;
	wall.loadGraphic(altWallGraphic);
	wall.scale.set(scaleX, scaleY);
	wall.updateHitbox();
}

function normalFloor(){
	var scaleX = floor.scale.x;
	var scaleY = floor.scale.y;
	floor.loadGraphic(floorGraphic);
	floor.scale.set(scaleX, scaleY);
	floor.updateHitbox();
}

function normalWall(){
	var scaleX = wall.scale.x;
	var scaleY = wall.scale.y;
	wall.loadGraphic(wallGraphic);
	wall.scale.set(scaleX, scaleY);
	wall.updateHitbox();
}

function generateModchart(){
	modManager.queueSet(-16, "opponentSwap", 1);
	modManager.queueEase(2944, 2952, "alpha", 1, "quadOut", 1);
	modManager.queueEase(2944, 2952, "opponentSwap", 0.5, "quadOut", 0);

	modManager.queueEaseFunc(1914, 1918, FlxEase.linear, function(ev, val, step){
        blackTop.alpha = FlxMath.lerp(0, 1, val);
    });

    modManager.queueEaseFunc(2939, 2943, FlxEase.linear, function(ev, val, step){
        blackTop.alpha = FlxMath.lerp(0, 1, val);
    });

    modManager.queueEaseFunc(3344, 3392, FlxEase.linear, function(ev, val, step){
        blackTop.alpha = FlxMath.lerp(0, 1, val);
    });

	modManager.queueEaseFunc(1664, 1712, FlxEase.quadInOut, function(ev, val, step){
        waveEfx.alpha = FlxMath.lerp(0.5, 0.1, val);
    });

	modManager.queueEaseFunc(1892, 1919, FlxEase.quadInOut, function(ev, val, step){
        waveEfx.alpha = FlxMath.lerp(0.1, 0.6, val);
    });

	modManager.queueEaseFunc(1916, 1919, FlxEase.quadInOut, function(ev, val, step){
        black2.alpha = FlxMath.lerp(0, 1, val);
    });

	modManager.queueEaseFunc(1920, 1929, FlxEase.quadInOut, function(ev, val, step){
        black2.alpha = FlxMath.lerp(1, 0, val);
    });

	modManager.queueEaseFunc(2048, 2108, FlxEase.quadInOut, function(ev, val, step){
        waveEfx.alpha = FlxMath.lerp(0.5, 0.1, val);
    });

	modManager.queueEaseFunc(2940, 2943, FlxEase.quadInOut, function(ev, val, step){
        black2.alpha = FlxMath.lerp(0, 1, val);
    });

	modManager.queueEaseFunc(2944, 2958, FlxEase.quadInOut, function(ev, val, step){
        black2.alpha = FlxMath.lerp(1, 0, val);
    });
}

var boyfX = 0;
var boyfY = 0;

var dadfX = 0;
var dadfY = 0;

var currentBG = -1;

var daBG:Int = -1;


function changeBG(id){
	daBG = id;
	game.dad.x = dadfX;
	game.dad.y = dadfY;
	game.boyfriend.x = boyfX;
	game.boyfriend.y = boyfY;
	
	game.camHUD.alpha = 1;
	if(shaders == 'All')
		game.camHUD.setFilters([]);
	stringPrep.visible = false;
	stringPrep2.visible = false;
	stringsBg.visible = false;

	game.comboOffset.y = 0;
	for(i in game.ratingGroup)
		i.visible = true;

	switch(id) {
		case 0:
			// Normal BG
			addOverlay([79.0,15.0,33.0],[203.0, 21.0, 122.0],0.175);
			if(worldCombos){
				for(i in game.ratingGroup)
					i.y += 3500;
			}
			normalWall();
			normalFloor();
			waveEfx.alpha = 0.1;
			gfSleep.visible = false;
			game.boyfriend.visible = true;
			heavySnow.alpha = 0;
			smokeVin.alpha = 0;
			scopeVin.alpha = 0.4;
		case 1:
			for(i in game.ratingGroup){
				i.visible = false;
				if(worldCombos)
					i.y += 3500;
			}
			// Eepy
			waveEfx.alpha = 0;
			smokeVin.play();
			smokeVin.alpha = 1;
			heavySnow.play();
			heavySnow.alpha = 0.6;
			addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
			game.camHUD.alpha = 0.5;
			if(shaders == 'All')
				game.camHUD.setFilters([new ShaderFilter(blur)]);
			stringPrep.visible = true;
			stringPrep2.visible = true;
			altWall();
			altFloor();
			stringsBg.visible = true;
			game.boyfriend.visible = false;
			gfSleep.visible = true;
			scopeVin.alpha = 0.0;
		case 2:
			addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
			smokeVin.alpha = 0;
			waveEfx.alpha = 0.1;
			// Forest
			if(worldCombos){
				game.comboOffset.y = -3500;
			
				for(i in game.ratingGroup)
					i.y -= 3500;
			}

			forestForeground.visible = false;
			forestFront.visible = false;
			forestBf.visible = false;
			forestHench.visible = false;
			game.boyfriend.visible = true;
			game.boyfriend.y = -3400 + game.boyfriend.positionArray[1] + 25;
			game.dad.y = -3400 + game.dad.positionArray[1];
			scopeVin.alpha = 0.4;
	}
}

var bgs = [
	2,
	0,
	2,
	1,
	2,
	0
];

function onEvent(ev, v1, v2, t){
	if (game.endingSong == true){return;}
	switch(ev){
		case 'swapbg':
			FlxTween.cancelTweensOf(black2);
			black2.alpha = 1;
            FlxTween.tween(black2, {alpha: 0}, 0.8, {ease: FlxEase.quadOut});

			if(dadfX == 0){
				dadfX = game.dad.x;
				dadfY = game.dad.y;
			}
			currentBG += 1;

			if(currentBG >= bgs.length)
				currentBG = 0;

			changeBG(bgs[currentBG]);
		case 'stoprun':
			switch(v1){
				case "1":
					stopping = true;
					FlxTween.cancelTweensOf(spiderGroup);
					FlxTween.tween(spiderGroup, {x: 200}, 2, {songBased: true, songPos: t});
					game.boyfriendMap.get("gfRun").alpha = 0;
					boyfX = game.boyfriend.x;
					boyfY = game.boyfriend.y;
					game.boyfriend.setPosition(game.boyfriendMap.get("gfRun").x, game.boyfriendMap.get("gfRun").y);
					game.boyfriend.x += 150;
					game.boyfriend.visible = true;
					game.triggerEventNote("Change Character", "bf", "gfRage", t);
				case "4":
					setCameraAlignment("", "",0,0);
				case "3":
					game.comboOffset.y = 0;
					for(i in game.ratingGroup)
						i.y += 3500;

					running = false;
					spiderGroup.alpha = 0;
					spiderPunched.alpha = 1;
					spiderPunched.animation.play("idle", true);
					
					game.boyfriend.setPosition(boyfX, boyfY);

					forestForeground.visible = false;

					scopeVin.alpha = 0;

					stringPrep.visible = false;
					stringPrep2.visible = false;
					stringsBg.visible = false;
					normalFloor();
					normalWall();

					darkenBG.visible = true;
					darkenBG.alpha = 1;
					FlxTween.tween(darkenBG, {alpha: 0}, 2, {songBased: true, songPos: t});
					FlxTween.tween(scopeVin, {alpha: 0.4}, 2, {songBased: true, songPos: t});

					game.moveCamera(game.boyfriend);
					setCameraAlignment("0", "",0,0);
					gfSleep.visible = false;
					game.cameraPoints.remove(forestCameraPos);
					game.customCamera.x -= 300;
					game.camFollowPos.setPosition(game.customCamera.x, game.customCamera.y);
					game.camFollow.x = game.customCamera.x;
					game.camFollow.y = game.customCamera.y;
				case 'henchbf':
					forestBf.visible = true;
					forestBf.x = -720 + 2250;
				case 'return':
					if(shaders == 'All')
						game.camHUD.setFilters([]);
					running = true;
					game.camFollowPos.setPosition(forestCameraPos.x, forestCameraPos.y);
					game.camFollow.x = forestCameraPos.x;
					game.camFollow.y = forestCameraPos.y;
					game.addCameraPoint(forestCameraPos);
					game.camHUD.alpha = 1;

					scopeVin.alpha = 0.4;
					smokeVin.pause();
					smokeVin.alpha = 0;

					heavySnow.pause();
					heavySnow.alpha = 0;
					
				case 'sad':
					heavySnow.play();
					heavySnow.alpha = 0.6;

					smokeVin.play();
					smokeVin.alpha = 1;
					running = false;

					waveEfx.alpha = 0;

					scopeVin.alpha = 0;

					if(shaders == 'All')
						game.camHUD.setFilters([new ShaderFilter(blur)]);
					
					game.camHUD.alpha = 0.5;

					gfSleep.visible = true;
					game.boyfriend.visible = false;
					altWall();
					altFloor();
					stringsBg.visible = true;
					game.cameraPoints.remove(forestCameraPos);
					game.camFollowPos.setPosition(game.sectionCamera.x, game.sectionCamera.y);
					game.camFollow.x = game.sectionCamera.x;
					game.camFollow.y = game.sectionCamera.y;
					game.triggerEventNote("Change Character", "dad", "momCorrupt", t);
				case 'henchmen':
                	addOverlay([79.0,15.0,33.0],[203.0, 21.0, 122.0],0.175);
					forestHench.visible = true;

			}
		case "addelement":
            switch (v1){
				case 'runsetup':
					game.camHUD.alpha = 1;
					scopeVin.alpha = 0.4;
                case "fadeout":
                    if (v2 == "1"){
                        blackTop.alpha = 1;
                        FlxTween.tween(blackTop, {alpha: 0}, 2, {ease: FlxEase.quadOut, songBased:true, songPos: t});
                    }
                    if (v2 == "2"){
                        blackTop.alpha = 1;
                        FlxTween.tween(blackTop, {alpha: 0}, 1, {ease: FlxEase.quadOut, songBased:true, songPos: t});
                    }
                case "camfilters":
					if(shaders != 'Off'){
						if(overlay != null)
							game.camGame.setFilters([new ShaderFilter(overlay), new ShaderFilter(bloom)]);
						else
							game.camGame.setFilters([new ShaderFilter(bloom)]);
					}
                    game.camHUD.alpha = 1;
            }
		case 'playvideo':
			switch(v1){
				case "letssettle":
					if(startTime >= t)
						return;
                    game.camGame.setFilters([]);
					letsSettleThis.alpha = 1;
					letsSettleThis.play();
                    game.camHUD.alpha = 0;
                case "snowheavy":
                    heavySnow.play();
                    FlxTween.tween(heavySnow, {alpha: 0.5}, 1);
				case 'smoke':
					henchTime = false;
					FlxTween.tween(fade, {x: -800, alpha: 1.0}, 4);
					blazeIt.play();
					FlxTween.tween(blazeIt, {alpha: 0.8}, 1);
					game.triggerEventNote("Change Character", "bf", "gfRage", t);

					addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
					if(!lowQuality){
                    	FlxTween.tween(momCorruptBlack, {alpha: 1.0}, 4);
                    
                    	FlxTween.tween(gfBlack, {alpha: 1.0}, 4);
					}
				case "smokevin":
                    smokeVin.play();
					FlxTween.tween(smokeVin, {alpha: 0.8}, 1);
				case "smokevinhide":
					FlxTween.tween(smokeVin, {alpha: 0.0}, 4);
				case 'momlaugh':
					if(startTime >= t)
						return;
					game.camGame.setFilters([]);
					game.camZooming = false;
					
					momLaugh.play();
					momLaugh.alpha = 1;
					game.camHUD.alpha = 0;
                case "snow":
                    if(playing)return;
                    playing = true;
                    lightSnow.visible = true;
                    lightSnow.play();
                    FlxTween.tween(lightSnow, {alpha: 0.5}, 1);
				case 'stop snow':
					if(shaders != 'Off')
                    	game.camGame.setFilters([new ShaderFilter(bloom)]);
					else
						game.camGame.setFilters([]);
                    addOverlay([79.0,15.0,33.0],[203.0, 21.0, 122.0],0.175);
					lightSnow.visible = false;
                    //darkenBg.alpha = 0.3;
                    henchTime = true;
                    game.remove(bfTrail);
				default:
					// nothing
			}
		case 'changeBf': // Why are so many things classed under this event LOL :sob:
			switch(v1){
				case 'gfend':
					if(shaders != 'Off'){
						game.camGame.setFilters([new ShaderFilter(bloom)]);
					}
					setCameraAlignment("0", "",-150,-50);
					game.triggerEventNote("Change Character", "bf", "gfDark", t);
					for(s in forest)
						s.visible = false;
					
					game.camHUD.setFilters([]);
					smokeVin.alpha = 0;
					smokeVin.pause();
					game.boyfriend.setPosition(-322,20);
					blackSnow.visible = true;
					blackSnow.alpha = 1;
					blackSnow.play();
					wall.visible = false;
					floor.visible = false;
					stringPrep.visible = false;
					stringPrep2.visible = false;
					sky.visible = false;
					building.visible = false;
					game.remove(heavySnow);
					heavySnow.destroy();
					game.remove(lightSnow);
					lightSnow.destroy();
					FlxTween.cancelTweensOf(darkenBG);
					
					darkenBG.visible = true;
					darkenBG.alpha = 1;

					whiteFade.visible = true;
                case "stringsappear":
                    FlxTween.tween(stringsTrappedEnd, {alpha: 1}, 15, {songBased: true, songPos: t});
				case 'trapped':
					game.camHUD.alpha = 0.4;
					if(shaders == 'All')
                    	game.camHUD.setFilters([new ShaderFilter(blur)]);
                    addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
					game.dad.visible = false;
					stringPulsing = false;
					setCameraAlignment("0", "",0,0);
					game.customCamera.x -= 200;

					changeBG(1);
					daBG = -1;
					game.camGame.scrollOffset.y = 0;
					game.moveCamera(game.boyfriend);
					gfSleep.visible = false;
					game.boyfriend.visible = true;
					stringsBg.visible = true;
					stringsBgShoot.visible = true;

				case "tween1":
                    spiderTween.cancel();
                    FlxTween.tween(spiderGroup, {x: -2000}, 6.0, {songBased: true, songPos: t, ease: FlxEase.sineInOut});
				case 'run':
					running = true;
					game.defaultCamZoom = 0.65;
					game.cameraPoints.remove(frontCameraPos);
					letsSettleThis.visible = false;
					blackBG.visible = false;
                    addOverlay([75.0,26.0,233.0],[203.0, 21.0, 122.0],0.075);
                    game.showRating = true;
                    game.showComboNum = true;
					//game.triggerEventNote("Change Character", "bf", "gfRun", t);
					redLightMode = 0;
					frontView = false;

					spiderTween = FlxTween.tween(spiderGroup, {x: -998}, 7.0, {songBased:true, songPos: t, ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});

					forestCameraPos.x = -100;
					forestCameraPos.y = -3300;
					
					if(worldCombos)
						game.comboOffset.y = -3500;

					for(i in game.ratingGroup)
						i.y -= 3500;

					game.camFollowPos.setPosition(forestCameraPos.x, forestCameraPos.y);
					game.camFollow.x = forestCameraPos.x;
					game.camFollow.y = forestCameraPos.y;
					game.addCameraPoint(forestCameraPos);

				case "prepend":
                    canZoom = false;
                    game.defaultCamZoom = 0.9;
                    //hideJudge = true;
				 case "front2":
                    game.triggerEventNote("Change Character", "dad", "momFrontSecond", t);

                    redLightMode = 2;
                case "powerup2":
                    game.defaultCamZoom = 1.8;
				case 'fronthide':
					FlxTween.tween(gfShocked, {alpha: 0}, 1);
				case 'front':
					fade.visible = false;
                    game.showRating = false;
                    game.showComboNum = false;
					game.defaultCamZoom = 1.4;
					//game.camGame.zoom = game.defaultCamZoom;
					game.camFollowPos.setPosition(frontCameraPos.x, frontCameraPos.y);
					game.camFollow.x = frontCameraPos.x;
					game.camFollow.y = frontCameraPos.y;
					game.remove(blazeIt);
					blazeIt.destroy();
					fade.alpha = 0;
					if(shaders != 'Off')
						game.camGame.setFilters([new ShaderFilter(bloom)]);
					game.triggerEventNote("Change Character", "dad", "momFront", t);
					frontView = true;
					game.addCameraPoint(frontCameraPos);

					redLight.visible = true;
					redVin.visible = true;
					if(!lowQuality){
						gfBlack.visible = false;
						momCorruptBlack.visible = false;
					}
					game.boyfriend.visible = false;
				
					blackBG.visible = true;

					redLightMode = 1;

					gfShocked.alpha = 0.6;
                    gfShockedEye.alpha = 1;

                    FlxTween.tween(gfShockedEye, {alpha: 0}, 1);

                    FlxTween.tween(game.camHUD, {alpha: 0.4}, 0.2);

				case "gfnorm":
					game.triggerEventNote("Change Character", "bf", "gfNorm", t);
				case 'gfrage':
					game.triggerEventNote("Change Character", "bf", "gfRage", t);
			}
		case 'stringattack':
			switch(v1) {
                case "prep1":
                    stringPrep.alpha = 1;
                    stringPrep.animation.play("idle", true);
                case "prep2":
                    stringPrep2.alpha = 1;
                    stringPrep2.animation.play("idle", true);
                case "shoot1":
					FlxG.sound.play(Paths.sound('stringAttack'));
                    stringPrep.alpha = 0;
                    stringShoot.alpha = 1;
                    stringShoot.animation.play("idle", true);
                    addTrail(game.boyfriend, 10, 5);
                case "shoot2":
                    stringPrep2.alpha = 0;
                    stringShoot2.alpha = 1;
                    stringShoot2.animation.play("idle", true);
			}
		case 'camshit':
			switch(v1) {
				case 'gf2':
					canZoom = false;
					game.defaultCamZoom = 0.9;
					if(!running){
						game.customCamera.x -= 100;
						setCameraAlignment("0", "",0,0);
					}
				case 'mm':
					canZoom = false;
					game.defaultCamZoom = 0.90;
					setCameraAlignment("1", "", 150, -50);
				case 'mid':
					canZoom = false;
					setCameraAlignment("0.5", "",-100,0);
					game.defaultCamZoom = 0.75;
				case 'gf':
					canZoom = false;
					game.defaultCamZoom = 0.85;
					setCameraAlignment("0", "",-150,0);
				case 'mm2':
					canZoom = false;
					game.defaultCamZoom = 0.9;
					setCameraAlignment("1", "",0,0);
				case 'undo':
					canZoom = true;
				case 'none':
					canZoom = true;
					setCameraAlignment("", "",0,0);

			}
        case 'specialbump':
            switch (v1){
                case "small":
                    FlxG.camera.zoom += 0.1 * ClientPrefs.camZoomP;
			        game.camHUD.zoom += 0.04 * ClientPrefs.camZoomP;
                case "small2":
                    FlxG.camera.zoom += 0.1 * ClientPrefs.camZoomP;
			        game.camHUD.zoom += 0.04 * ClientPrefs.camZoomP;
                case "run":
                    FlxG.camera.zoom += 0.1 * ClientPrefs.camZoomP;
			        game.camHUD.zoom += 0.04 * ClientPrefs.camZoomP;
                case "riser": // small and rapid
                    FlxG.camera.zoom += 0.05 * ClientPrefs.camZoomP;
			        game.camHUD.zoom += 0.02 * ClientPrefs.camZoomP;
                    bloom.data.intensity.value[0] = 0.1;
                case "big":
                    FlxG.camera.zoom += 0.15 * ClientPrefs.camZoomP;
			        game.camHUD.zoom += 0.07 * ClientPrefs.camZoomP;
                case "big2":
                    FlxG.camera.zoom += 0.15 * ClientPrefs.camZoomP;
			        game.camHUD.zoom += 0.07 * ClientPrefs.camZoomP;
                    bloom.data.intensity.value[0] = 0.5;
                case "flash": // shaders!!!
                    FlxG.camera.zoom += 0.2 * ClientPrefs.camZoomP;
			        game.camHUD.zoom += 0.08 * ClientPrefs.camZoomP;
                    bloom.data.intensity.value[0] = 1.0;
                    //redVin2.alpha = 0.8;
                case "dark":
                    FlxG.camera.zoom += 0.2 * ClientPrefs.camZoomP;
			        game.camHUD.zoom += 0.08 * ClientPrefs.camZoomP;
					FlxTween.cancelTweensOf(black2);
                    black2.alpha = 0.8;
                    FlxTween.tween(black2, {alpha: 0}, 0.8, {songBased: true, songPos: t, ease: FlxEase.quadOut});
                    
            }
		default:
			// nothing
	}
}

function onGameOver(){
	lowVin.alpha = 0;
	hurtAmount = 0;
	hurtAmountBlack = 0;
	
	hasGameOvered = true;

    game.camGame.setFilters([]);
    game.camHUD.setFilters([]);
}

function onBeatHit(){
    if (curBeat % 4 == 0 && henchTime){
        if (henchWhich){
            henchmanLight.alpha = 0.6;
            henchmanLight3.alpha = 0.1;
        } else {
            henchmanLight2.alpha = 0.6;
            henchmanLight4.alpha = 0.1;
        }
        henchWhich = !henchWhich;
    }

    if (curBeat % 8 == 0 && whiteFade.visible){
        whiteFade.alpha = 0.6;
    }

    if (curBeat % 4==0){
        stringsBg.alpha = 1;
    }
    stringsBgShoot.alpha = stringsBg.alpha;

	if (redLightMode == 1){
        if (curBeat % 8 == 0)
            redLight.alpha += 0.85;
        
        else if (curBeat % 4 == 0) 
            redLight.alpha += 0.53;
        
    } else if (redLightMode == 2){
        if (curBeat % 8 == 0){
            redLight.alpha += 0.85;
            redVin.alpha += 0.3;
        }
        else if (curBeat % 4 == 0) {
            redLight.alpha += 0.53;
            redVin.alpha += 0.2;
        } else if (curBeat % 2 == 0){
            redLight.alpha += 0.33;
            redVin.alpha += 0.1;
        }
    }

}

function addOverlay(col1:Array<Float>,col2:Array<Float>,blend:Float){
    overlay = newShader("overlay");
    arrT = col1;
    arrR = col2;
    poses = [0.5,-0.15];
    amtt = blend;
    trans = false;
    overlay.data.rT.value = [arrT[0]/255];
    overlay.data.gT.value = [arrT[1]/255];
    overlay.data.bT.value = [arrT[2]/255];
    overlay.data.rR.value = [arrR[0]/255];
    overlay.data.gR.value = [arrR[1]/255];
    overlay.data.bR.value = [arrR[2]/255];
    overlay.data.ypos.value = [poses[1]];
    overlay.data.xpos.value = [poses[0]];
    overlay.data.amt.value = [amtt];
    overlay.data.trans.value = [trans];
	if(shaders != 'Off')
		game.camGame.setFilters([new ShaderFilter(overlay), new ShaderFilter(bloom)]);
}
function addTrail(who:Character, ?length:Int = 4, ?delay:Int = 24, ?alpha:Float = 0.4, ?diff:Float = 0.069){
    if(length==null)length = 4;
    if(delay==null)delay = 24;
    if(alpha==null)alpha = 0.4;
    if(diff==null)diff = 0.069;

    bfTrail = new FlxTrail(who, null, length, delay, alpha, diff);
    bfTrail.color = FlxColor.RED;
    game.addBehindBF(bfTrail);
}

function onMoveCamera(char){
	var focus:Character = game.dad;
	if(char == 'bf')
		focus = game.boyfriend;

	if(daBG != -1){
		game.focusedChar = focus;
		var yOff = 200;
		if(char == 'bf')
			yOff = -100;

		var cam = focus.getCamera();
		game.sectionCamera.x = cam[0];
		game.sectionCamera.y = (cam[1] - focus.y) - yOff;
		return Function_Stop;
	}
}

function onSectionHit(){
    if (!canZoom){
		return;
	}

	if(running){
		if(mustHitSection){
			forestCameraPos.x = -100;
			forestCameraPos.y = -3300;
		}else{
			forestCameraPos.x = -750;
			forestCameraPos.y = -3550;
		}
	}

	if(frontView){
		game.defaultCamZoom = 1.4;
		return;
	}
	
    if (mustHitSection){
        game.defaultCamZoom = running ? 0.925: 0.825;
    } else {
        game.defaultCamZoom = running ? 0.65 : 0.725;
    }
    
}

var rate:Float = 1;

function onUpdate(elapsed){
	if(stopping){
		rate -= elapsed;
		if(rate < 0)
			rate = 0;

		for(s in forest)
			s.velocity.x = s.health * rate;
	}

	if (hurtAmount > 0){
        hurtAmount -= 0.2 * elapsed;
    } else if (hurtAmount < 0){
        hurtAmount = 0;
    }

	if (hurtRedAmount > 0){
        hurtRedAmount -= 0.3 * elapsed;
    } else if (hurtRedAmount < 0){
        hurtRedAmount = 0;
    }
	//trace(hurtRedAmount);

	if (hurtAmountBlack > 0){
        hurtAmountBlack -= 0.4 * elapsed;
    } else if (hurtAmountBlack < 0){
        hurtAmountBlack = 0;
    }

	if (!hasGameOvered){
        if (game.health <= 0.4){
            if (lowVin.alpha < 0.8){
                lowVin.alpha += 0.4 * elapsed;
            } else {
                lowVin.alpha = 0.8;
            }
        } else {
            if (lowVin.alpha > 0){
                lowVin.alpha -= 0.4 * elapsed;
            }
        }
    }

	hurtVin.alpha = hurtAmount;
	hurtRedVin.alpha = hurtRedAmount;
	hurtBlack.alpha = hurtAmountBlack;

	if(worldCombos){
		if(running){
			for(s in game.ratingGroup)
				s.x -= 1750 * elapsed * rate;
		}
	}

	if (whiteFade.alpha > 0 && whiteFade.visible){
        whiteFade.alpha -= elapsed/4;
    }

	if (redLight.alpha > 0){
        redLight.alpha -= elapsed;
    }

	if (redVin.alpha > 0){
        redVin.alpha -= elapsed;
    }

    if (bloom.data.intensity.value[0] > 0){
        bloom.data.intensity.value[0] -= elapsed;
    }

	if (henchmanLight.alpha > 0){
        henchmanLight.alpha -= elapsed/2;
    }

    if (henchmanLight2.alpha > 0){
        henchmanLight2.alpha -= elapsed/2;
    }

    if (henchmanLight3.alpha > 0){
        henchmanLight3.alpha -= elapsed/6;
    }

    if (henchmanLight4.alpha > 0){
        henchmanLight4.alpha -= elapsed/6;
    }

	if (stringsBg.alpha > 0.5 && stringsBg.visible && stringPulsing){
        stringsBg.alpha -= elapsed * 0.5;
    }

}

function onUpdatePost(elapsed){
	game.camGame.scrollOffset.y = daBG == 2 ? -3485 : 0;
	if(daBG == 1){
		for(i in game.ratingGroup)
			i.visible = false;
		
	}

	// Welcome to boundary break

	if(boundaryBreak){
		game.camGame.scrollOffset.y = 0;
		game.defaultCamZoom = 0.1;
		game.camGame.zoom = game.defaultCamZoom;
		game.customCamera.x = 92;
		game.customCamera.y = -2171;
		game.camFollowPos.x = game.customCamera.x;
		game.camFollowPos.y = game.customCamera.y;

		game.hud.botplayTxt.visible = false;
		game.showRating = false;
		game.showComboNum = false;
		game.cameraPoints = [game.customCamera];
		black2.alpha = 0;
		FlxTween.cancelTweensOf(black2);
	}
}

// just stolen from Set Camera Alignment event
// Touching the bloodlust chart/events as little as possible so this is how im doing this LOL
function setCameraAlignment(value1, value2, offsetX:Float = 0, offsetY:Float = 0)
{
	if(game.stageData.camera_speed != null)
		game.cameraSpeed = game.stageData.camera_speed;

	var sowy = Std.parseFloat(value1);
	if (!Math.isNaN(sowy))
	{	
		var camDad = game.dad.getCamera();
		var camBf = game.boyfriend.getCamera();
		
		var dadX = camDad[0]+offsetX;
		var dadY = camDad[1]+offsetY;
		
		var bfX = camBf[0]+offsetX;
		var bfY = camBf[1]+offsetY;
		
		var minX;
		var minY;
		var maxX;
		var maxY;
		
		if (dadX < bfX){
			minX = dadX;
			maxX = bfX;
			
			minY = dadY;
			maxY = bfY;
		}else{
			maxX = dadX;
			minX = bfX;
			
			maxY = dadY;
			minY = bfY;
		}
		
		game.triggerEventNote(
			"Camera Follow Pos",
			Std.string(FlxMath.lerp(minX, maxX, sowy)), 
			Std.string(FlxMath.lerp(minY, maxY, sowy))
		);
		
		var cusSpeed = Std.parseFloat(value2);
		if (!Math.isNaN(cusSpeed))
			game.cameraSpeed *= cusSpeed;
	}
	else
	{
		game.triggerEventNote("Camera Follow Pos", "", "");
	}
}