import flixel.math.FlxMath;
import openfl.filters.ShaderFilter;
import openfl.Lib;

// TRIVIA: This song was significantly more popular on twitter than youtube (Thanks Sai)
// it appeared to be a lot of twitter users first time hearing the Hardstyle genre
// having corruption mod be your introduction to a music genre must be bizarre LOL

//import openfl.display.BlendMode;
// sorry for so many video players im lazy
//var video; // number tunnel bg
//var video2; // number tunnel bg overlay
//var video3; // help me intermission
var video4; // hands intermission
var video5; // hands overlay
var video6; // tunnel 2 bg
var video7; // tunnel 2 bg overlay
var video8:MP4Sprite; // glitch intermission

var object:FlxSprite;
var game;
var curBg:Int = 0;
var glitchBump:FlxSprite;
var school:FlxSprite;
var bgField:ProxyField;
var hurtBlack:FlxSprite; // red, im still lazy
var staticOverlay:FlxSprite;

var hideJudge:Bool = false;

function onDisplayJudgment(image){
	if(hideJudge)
		return Globals.Function_Stop;
}

var numAccX = 200;
var numAccY = 0;
var numScale = 5;

var hasGameOvered:Bool = false;

var tweenStarted:Bool = false; // only play tween shit once

var bfSigh:FlxSprite;
var handGrabEnd:FlxSprite;
var speedLines:FlxSprite;

var chroma = newShader("null-and-void/chroma");
function setChroma(chromeOffset){
    chroma.data.rOffset.value = [chromeOffset];
    chroma.data.gOffset.value = [0.0];
    chroma.data.bOffset.value = [chromeOffset * -1];
}

var scanline = newShader("null-and-void/scanlines", "", 130);
/* scanline.data.lockAlpha.value = false;
scanline.data.scale.value = [1.0];
scanline.data.realAlpha.value = [1.0];
 */
var bloom = newShader("null-and-void/bloom");
bloom.data.blurSize.value = [0.01];
bloom.data.intensity.value = [0.1];

var nullGlitch = newShader("null-and-void/nullglitchshader");	
nullGlitch.data.glitchAmplitude.value = [2.0]; // increase this
nullGlitch.data.glitchNarrowness.value = [1.0];
nullGlitch.data.glitchBlockiness.value = [4.0];
nullGlitch.data.glitchMinimizer.value = [5.0]; // decrease this
nullGlitch.data.iResolution.value = [Lib.current.stage.stageWidth,Lib.current.stage.stageHeight];
nullGlitch.data.iTime.value=[0.0];


var barrel = newShader("barrel");
barrel.data.chromaticIntensity.value = [0.25];
barrel.data.distortionIntensity.value = [-0.25];
barrel.data.offset.value = [0, 0];
barrel.data.angle.value = [0];
barrel.data.mirrorX.value = [false];
barrel.data.mirrorY.value = [false];
barrel.data.zoom.value=[1.0];
var schoolShader = newShader("fuckywucky", "", 130);
schoolShader.data.time.value = [250];
schoolShader.data.prob.value = [0.15];
schoolShader.data.glitchScale.value = [0.025];

var vignette = newShader("fuckywuckymask", "", 130);
vignette.data.time.value = [250];
vignette.data.prob.value = [0.75];
vignette.data.glitchScale.value = [0.5];
vignette.data.maskMix.value = [true];
vignette.data.mask.input = Paths.image("vignette").bitmap;

var bigGlitch = newShader("fuckywucky", "", 130);
bigGlitch.data.time.value = [250];
bigGlitch.data.prob.value = [0.0];
bigGlitch.data.glitchScale.value = [0.9];

var pixelate = newShader("pixelate", "", 130);
pixelate.data.pixelSize.value = [1];

var pixelateAmount:Float = 1;
var hurtAmountBlack:Float = 0; // actually red, yes im that lazy

var overlay = newShader("overlay");
var arrT:Array<Float> = [100.0,0.0,0.0];   //75.0,26.0,233.0 blue
var arrR:Array<Float> = [100.0,0.0,0.0];
var poses:Array<Float> = [0.5,0.5];
var amtt:Float = 0.0;  //075
var trans:Bool = false;
overlay.data.rT.value = [arrT[0]/255];
overlay.data.gT.value = [arrT[1]/255];
overlay.data.bT.value = [arrT[2]/255];
overlay.data.rR.value = [arrR[0]/255];
overlay.data.gR.value = [arrR[1]/255];
overlay.data.bR.value = [arrR[2]/255];
overlay.data.ypos.value = [poses[1]];
overlay.data.xpos.value = [poses[0]];
overlay.data.amt.value = [amtt];
overlay.data.trans.value = [trans];

var iconShader = newShader("fuckywucky", "", 130);
iconShader.data.time.value = [250];
iconShader.data.prob.value = [0.75];
iconShader.data.glitchScale.value = [0.75];
game = PlayState.instance;
/* function onAddSpriteGroups(){
    game.hud = hud = HScriptedHUD.fromFile(
		game.boyfriend.healthIcon,
        game.dad.healthIcon, 
        PlayState.SONG.song,
		game.stats, 
		"VanillaHUD"
	);
}
 */
function addTrail(who:Character, which:Int = 0, ?length:Int = 4, ?delay:Int = 24, ?alpha:Float = 0.4, ?diff:Float = 0.069){
    if(length==null)length = 4;
    if(delay==null)delay = 24;
    if(alpha==null)alpha = 0.4;
    if(diff==null)diff = 0.069;

    if (which == 0){
        bfTrail = new FlxTrail(who, null, length, delay, alpha, diff);
        game.addBehindBF(bfTrail);
    } else if (which == 1) {
        evilTrail = new FlxTrail(who, null, length, delay, alpha, diff);
        game.addBehindDad(evilTrail);
    }
}

function onCreatePost() {
    FlxSprite.defaultAntialiasing = false;

	game.judgeScale = 6;
	game.comboScale = 10;
	game.worldComboOrigin.x -= 430;
	game.worldComboOrigin.y -= 60;
    game.instaRespawn = true;

    // video = new MP4Sprite();
    // video.bitmap.onFormatSetup.add(function():Void
    // {
    //     video.setGraphicSize(1920, 1080);
    //     video.updateHitbox();

    //     video.scale.x *= 1.1;
    //     video.scale.y *= 1.3;
    //     video.setPosition(-200,-100);
    // });
    // video.bitmap.onEndReached.add(function(){
    //     video.destroy();
    //     game.remove(video);
    // });
    // video.antialiasing = false;
    // game.addBehindBF(video);

    numTunnel = new FlxSprite();
    numTunnel.frames = Paths.getSparrowAtlas('NumberTunnel');
    numTunnel.animation.addByPrefix('anim', 'NumberTunnel idle', 30, true);
    numTunnel.animation.play('anim', true);
    numTunnel.scrollFactor.set();
    numTunnel.alpha = 0;
    numTunnel.updateHitbox();
    numTunnel.screenCenter();
    numTunnel.scale.set(2.8,2.8);
    game.addBehindBF(numTunnel);

    // video2 = new MP4Sprite();
    // video2.bitmap.onFormatSetup.add(function():Void
    // {
    //     video2.setGraphicSize(1920, 1080);
    //     video2.updateHitbox();

    //     video2.scale.x *= 1.1;
    //     video2.scale.y *= 1.3;
    //     video2.setPosition(-200,-100);
    // });
    // video2.bitmap.onEndReached.add(function(){
    //     video2.destroy();
    //     game.remove(video2);
    // });
    // video2.antialiasing = false;
    // game.addBehindDad(video2);

    numTunnel2 = new FlxSprite();
    numTunnel2.frames = Paths.getSparrowAtlas('NumberTunnel');
    numTunnel2.animation.addByPrefix('anim', 'NumberTunnel idle', 30, true);
    numTunnel2.animation.play('anim', true);
    numTunnel2.scrollFactor.set();
    numTunnel2.alpha = 0;
    numTunnel2.updateHitbox();
    numTunnel2.screenCenter();
    numTunnel2.scale.set(2.8,2.8);
    game.addBehindDad(numTunnel2);

    video6 = new MP4Sprite();
    video6.bitmap.onFormatSetup.add(function():Void
    {
        video6.setGraphicSize(1920, 1080);
        video6.updateHitbox();

        video6.scale.x *= 1.1;
        video6.scale.y *= 1.3;
        video6.setPosition(-200,-100);
    });
    video6.bitmap.onEndReached.add(function(){
        video6.destroy();
        game.remove(video6);
    });
    video6.antialiasing = false;

    video7 = new MP4Sprite();
    video7.bitmap.onFormatSetup.add(function():Void
    {
        video7.setGraphicSize(1920, 1080);
        video7.updateHitbox();

        video7.scale.x *= 1.1;
        video7.scale.y *= 1.3;
        video7.setPosition(-200,-100);
    });
    video7.bitmap.onEndReached.add(function(){
        video7.destroy();
        game.remove(video7);
    });
    video7.antialiasing = false;

    video8 = new MP4Sprite();
    video8.bitmap.onFormatSetup.add(function():Void
    {
        video8.setPosition(-130,-110);
        video8.setGraphicSize(1920, 1080);
        video8.updateHitbox();
        video8.scale.x *= 1.4;
        video8.scale.y *= 1.4;
    });
    video8.bitmap.onEndReached.add(function(){
        video8.destroy();
        game.remove(video8);
    });
    video8.antialiasing = false;

    // video3 = new MP4Sprite();
    // video3.bitmap.onFormatSetup.add(function():Void
    // {
    //     video3.setGraphicSize(1920, 1080);
    //     video3.updateHitbox();

    //     video3.scale.x *= 1.3;
    //     video3.scale.y *= 1.3;
    //     video3.setPosition(-130,-110);
    // });
    // video3.bitmap.onEndReached.add(function(){
    //     video3.destroy();
    //     game.remove(video3);
    // });
    // video3.antialiasing = false;

    helpme = new FlxSprite();
    helpme.frames = Paths.getSparrowAtlas('HelpMe');
    helpme.animation.addByPrefix('anim', 'HelpMe idle', 16, false);
    helpme.animation.play('anim', true);
    helpme.scrollFactor.set();
    helpme.alpha = 1;
    helpme.updateHitbox();
    helpme.screenCenter();
    helpme.scale.set(3,3);
    helpme.antialiasing = false;

    video4 = new MP4Sprite();
    video4.bitmap.onFormatSetup.add(function():Void
    {
        video4.setGraphicSize(1920, 1080);
        video4.updateHitbox();

        video4.scale.x *= 1.3;
        video4.scale.y *= 1.3;
        video4.setPosition(-130,-110);
    });
    video4.bitmap.onEndReached.add(function(){
        video4.destroy();
        game.remove(video4);
    });
    video4.antialiasing = false;

    video5 = new MP4Sprite();
    video5.bitmap.onFormatSetup.add(function():Void
    {
        video5.setGraphicSize(1920, 1080);
        video5.updateHitbox();

        video5.scale.x *= 1.3;
        video5.scale.y *= 1.3;

        video5.setPosition(-130,-110);
    });
    video5.bitmap.onEndReached.add(video5.destroy);
    video5.antialiasing = false;
    game.addBehindBF(video5);

    //video.load(Paths.video('NumberTunnel'), [':input-repeat=65545']);
    //video2.load(Paths.video('NumberTunnel'), [':input-repeat=65545']);
   // video3.load(Paths.video('HelpMe'));

    video4.load(Paths.video('hand transition'));
    video5.load(Paths.video('hands loop', [':input-repeat=65545']));
    video6.load(Paths.video('SecondTunnel'), [':input-repeat=65545']);
    video7.load(Paths.video('SecondTunnel'), [':input-repeat=65545']);
    video8.load(Paths.video('glitch intermission', [':input-repeat=65545']));

    //video.alpha = 0.3;
    //video.blend = 12;
    //video2.alpha = 0.7;
    video6.alpha = 0.3;
    video6.blend = 12;
    video7.alpha = 0.7;

    numTunnel.blend = 12;

    /*     game.add(game.gfGroup);
    game.add(game.dadGroup);
    game.add(game.boyfriendGroup); */

    game.boyfriend.setPosition(790, 741);
    game.dad.setPosition(740,45);
    game.dad.scale.set(3,3);

    
	//game.add(evilTrail);

    game.customCamera.set(810, 420);
    game.addCameraPoint(game.customCamera);

    /*     game.camFollowAtAll = false; */
    game.defaultCamZoom = 0.5;
    game.camGame.zoom = game.defaultCamZoom;
    
    bgField = new ProxyField(game.dadField.noteField);
	bgField.cameras = [game.camGame];
	bgField.scrollFactor.set(0.8, 0.8);
    game.addBehindBF(bgField);
    
    school = new FlxSprite();
    school.frames = Paths.getSparrowAtlas('animatedEvilSchool');
    school.animation.addByIndices("idle", 'background 2 instance 1', [1], 12, true);
    school.animation.play("idle", true);
    school.scrollFactor.set(1, 1);
    school.scale.set(8, 8);
    school.antialiasing = false;
    school.updateHitbox();
    school.shader = schoolShader;
    school.x = -1220;
    school.y = -1790;
    game.addBehindDad(school);
    

    glitchBump = new FlxSprite();
    glitchBump.frames = Paths.getSparrowAtlas('spiritBump');
    glitchBump.animation.addByPrefix('anim', 'spiritBump', 24, true);
    glitchBump.animation.play('anim', true);
    glitchBump.scrollFactor.set();
    glitchBump.alpha = 0;
    glitchBump.updateHitbox();
    glitchBump.screenCenter();
    glitchBump.scale.set(1.9,1.9);
    game.add(glitchBump);

    bgField.visible = false;

    // Shader shit
    setChroma(0.002);
 
    // ^ scan lines will be used in demo, but they fuck up the bitrate of the video so leaving them out

    bloom.data.blurSize.value = [0.01];
	bloom.data.intensity.value = [0.1];

    nullGlitch.data.glitchNarrowness.value = [25.0];

	if(ClientPrefs.shaders == 'All'){
		game.camGame.setFilters([new ShaderFilter(barrel), new ShaderFilter(vignette), new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(overlay), new ShaderFilter(pixelate)]);
		game.camHUD.setFilters([new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(overlay)]);
	}else if(ClientPrefs.shaders == 'Minimal')
		game.camGame.setFilters([new ShaderFilter(barrel), new ShaderFilter(pixelate)]);
	
    
    //FlxG.game.setFilters([
    //     new ShaderFilter(scanline)
    //]);

    iconP2 = game.hud.iconP2;
	
	game.hud.remove(iconP2);
	game.hud.remove(game.hud.iconP1);
/*     game.camHUD.setFilters([new ShaderFilter(vignette)]); */
    var girlExplosion = new FlxTypedEmitter();
    girlExplosion.clear();
    girlExplosion.color.active = false;
    var girlColours = [0xFFA4B6F2, 0xFFA4B6F2, 0xFFA4B6F2, 0xFFFFF5FC, 0xFFFFF5FC];
    for(i in 0...1200){
        var p:FlxParticle = new FlxParticle();
        p.makeGraphic(16, 16, 0xFFFFFFFF);
        p.color = girlColours[FlxG.random.int(0, girlColours.length-1)];
        p.exists=false;
        girlExplosion.add(p);
    }
    girlExplosion.lifespan.set(0.3, 0.9);
/*     girlExplosion.x += 300;
    girlExplosion.y += 300; */
    girlExplosion.alpha.set(1, 1, 0, 0);
    girlExplosion.speed.set(
        240,
        500
    );
    
/*     girlExplosion.start(true, 0, 50); */
    game.add(girlExplosion);

    //var shit = Song.loadFromJson("girls", "null-and-void");
    //var noteData = shit.notes;
    // trace(game.boyfriend.x);

    addTrail(game.dad, 1, 8, 5, 0.4, 0.030);

    // for(sexion in noteData){
    //     for(data in sexion.sectionNotes){
    //         var time:Float = data[0];
    //         var step = Conductor.getStep(time);
    //         var girl = new FlxSprite(760 + FlxG.random.float(-600, 600), game.boyfriend.y - FlxG.random.float(1600, 2000));

    //         var ranbool:Bool = FlxG.random.bool(50);

    //         if (ranbool == true){
    //             girl.x = FlxG.random.float(10, 500);
    //         } else {
    //             girl.x = FlxG.random.float(1200, 1650);
    //         }

            
    //         girl.frames = Paths.getSparrowAtlas("bgGirlGlitch");
    //         girl.animation.addByPrefix('idle', 'BackgroundGirlFall', 24, true);
    //         girl.animation.addByPrefix('wait', 'BackgroundGirlFall', 0, true);
    //         girl.animation.play("wait", true);
    //         girl.scale.set(2, 2);
    //         girl.scrollFactor.set(1, 1);
    //         girl.updateHitbox();
    //         girl.offset.x += 200;
    //         girl.offset.y += 100;
    //         girl.antialiasing = false;
            
    //         modManager.queueFuncOnce(step - 8, function(e, s){
    //             girl.animation.play("idle", true);
    //             girl.velocity.y = FlxG.random.float(1200, 1400);
    //             girl.acceleration.y = 5000;
    //             girl.maxVelocity.set(20000, 20000);
    //             game.add(girl);

    //         });

    //         modManager.queueFuncOnce(step, function(e, s){
    //             girlExplosion.x = girl.x;
    //             girlExplosion.y = girl.y;
    //             girlExplosion.start(true, 0, 150);
    //             game.remove(girl);
    //             girl.kill();
    //         });
    //     }
    // }
    

    //video3.visible = false;
    helpme.visible = false;


    game.add(helpme);

    game.add(video4);
    video4.visible = false;
    video5.visible = false;
    video5.blend = 12;
    video5.alpha = 0.85;

    bfSigh = new FlxSprite();
    
    bfSigh.frames = Paths.getSparrowAtlas('BfSigh');
    bfSigh.animation.addByPrefix('anim', 'BfSigh', 24, false);
    bfSigh.animation.play('anim', true);
    //bfSigh.scrollFactor.set();
    bfSigh.alpha = 1;
    bfSigh.scale.set(13,13);
    bfSigh.setPosition(4000,1055);
    game.add(bfSigh);

    modManager.queueEaseFunc(896, 916, FlxEase.elasticOut, function(ev, val, step){
        barrel.data.zoom.value[0] = FlxMath.lerp(2, 1, val);
        barrel.data.distortionIntensity.value[0] = FlxMath.lerp(-1.5, -0.25, val);
    });

    handGrabEnd = new FlxSprite();
    handGrabEnd.frames = Paths.getSparrowAtlas("hand_grab_end");
    handGrabEnd.animation.addByPrefix("anim", "hand_grab_end idle", 15, false);
    handGrabEnd.animation.play("anim", true);
    handGrabEnd.updateHitbox();
    handGrabEnd.scale.set(1,1);
    handGrabEnd.antialiasing = false;
    handGrabEnd.alpha = 1;
    handGrabEnd.blend = 0;
    handGrabEnd.setPosition(-9000,-9000);
    handGrabEnd.scale.set(3,3);
    game.add(handGrabEnd);
    

    speedLines = new FlxSprite();
    speedLines.frames = Paths.getSparrowAtlas("speedlines");
    speedLines.animation.addByPrefix("anim", "speedlines idle", 25, true);
    speedLines.animation.play("anim", true);
    speedLines.updateHitbox();
    speedLines.scale.set(1,1);
    speedLines.antialiasing = false;
    speedLines.alpha = 1;
    speedLines.blend = 0;
    speedLines.setPosition(-9000,200);
    speedLines.scale.set(3,3);

    game.add(speedLines);

    game.isPixelPrefix = "pixel";

    var scanlinesFake = new FlxSprite();
    scanlinesFake.frames = Paths.getSparrowAtlas("ScanlinesThin");
    scanlinesFake.animation.addByPrefix("anim", "ScanlinesThin idle", 24, true);
    scanlinesFake.animation.play("anim", true);
    scanlinesFake.updateHitbox();
    scanlinesFake.antialiasing = true;
    scanlinesFake.alpha = 0.1;
    scanlinesFake.blend = 9;
    scanlinesFake.setPosition(280,170);
    scanlinesFake.scale.set(1.9,1.9);
    scanlinesFake.scrollFactor.set(0,0);
    scanlinesFake.cameras = [game.camOverlay];
    game.add(scanlinesFake);

    hurtBlack = new FlxSprite(0,0).makeGraphic(1, 1, FlxColor.RED);
    hurtBlack.scale.set(1280 * 3, 720 * 3);
	hurtBlack.updateHitbox();
    hurtBlack.scrollFactor.set(0,0);
	hurtBlack.screenCenter();
    hurtBlack.alpha = 0;
    game.add(hurtBlack);

    lowVin = new FlxSprite(-300,-170).loadGraphic(Paths.image('lowHealthPixel'));
    lowVin.scale.set(0.7,0.7);
    lowVin.antialiasing = true;
    lowVin.scrollFactor.set(0, 0);
    lowVin.alpha = 0;
    lowVin.screenCenter();
	lowVin.blend = 0;
	lowVin.cameras = [game.camOverlay];
	game.add(lowVin);

    staticOverlay = new FlxSprite();
    staticOverlay.frames = Paths.getSparrowAtlas("tv_static");
    staticOverlay.animation.addByPrefix("anim", "tv_static idle", 25, true);
    staticOverlay.animation.play("anim", true);
    staticOverlay.updateHitbox();
    staticOverlay.scale.set(1.7,1.7);
    staticOverlay.antialiasing = false;
    staticOverlay.alpha = 1;
    staticOverlay.screenCenter();
    staticOverlay.cameras = [game.camOverlay];
    game.add(staticOverlay);

    object = helpme;
    FlxG.debugger.track(object);
}

function destroy()
    FlxG.game.setFilters([]);

function switchingState()
    FlxG.game.setFilters([]);


function noteMiss(note:Note, field:PlayField){
    pixelateAmount += 2.0;
    hurtAmountBlack += 0.05;
}

function noteMissPress(direction:Int){
    pixelateAmount += 2.0;
    hurtAmountBlack += 0.05;
}

function opponentNoteHit(){
    //nullGlitch.data.glitchAmplitude.value = [FlxG.random.float(0.0,1.0)];
    //if (curBg == 2){return;}
    //video.x = -5000;
    //game.dad.x = 640;

    if (curBg == 0){
        game.dad.x = FlxG.random.float(-30, 1570);
        game.dad.y = FlxG.random.float(-175, 355);
        var scaleLol:Float = FlxG.random.float(1, 4);
        game.dad.scale.set(scaleLol,scaleLol);
    }
    
}

/* function onStepHit(){
    iconShader.data.binaryIntensity.value[0]= FlxG.random.float(4, 12);
} */

function onPause(){
    FlxG.game.setFilters([]);
    //video.pause();
    //video2.pause();
    video4.pause();
    video5.pause();
    video6.pause();
    video7.pause();
    video8.pause();
}

function onResume(){
    //video.resume();
    //video2.resume();
    video4.resume();
    video5.resume();
    video6.resume();
    video7.resume();
    video8.resume();
}

function onDestroy(){
    //video.destroy();
    //video2.destroy();
    //.destroy();
    video4.destroy();
    video5.destroy();
    video6.destroy();
    video7.destroy();
    video8.destroy();
}

function addHScriptModifier(modName, defaultVal){	
	var modifier = HScriptModifier.fromName(modManager, null, modName);
	if (modifier == null) return null;

	modManager.quickRegister(modifier);
	modManager.setValue(modifier.getName(), defaultVal == null ? 0 : defaultVal);
	
	return modifier;
}
function postModifierRegister()
{
	addHScriptModifier("curve", 0);
}


function generateModchart(){
    modManager.queueEase(990, 992, "curve", 2);
    modManager.queueSet(1248, "curve", 0);
    modManager.queueEaseFunc(276, 288, FlxEase.linear, function(ev, val, step){
        game.camHUD.alpha = val;
    });
    modManager.queueEaseFunc(672, 702, FlxEase.linear, function(ev, val, step){
        overlay.data.amt.value[0] = FlxMath.lerp(0.5, 0.0, val);
    });
    modManager.queueEaseFunc(1792, 1830, FlxEase.linear, function(ev, val, step){
        overlay.data.amt.value[0] = FlxMath.lerp(0.5, 0.0, val);
    });
}

var storedCombo:Int = 0;

function onApplyJudgmentDataPost(judgeData, diff, bot, show){
    if(judgeData.comboBehaviour == -1)storedCombo = 0;
}
var playing = false;
var playing2 = false;
var alpha:Float =0.0;

function onEvent(eventName, value1, value2, time){
    if (game.endingSong == true){return;}
    switch(eventName){
        case 'storecombo':
            storedCombo += game.stats.combo;
            game.stats.combo = 0;
        case 'restorecombo':
            game.stats.combo += storedCombo;
            storedCombo = 0;
        case 'Song Event':
            if(value1 == 'zoom'){
               // barrel.data.offset.value = [640, 360];
               // barrel.data.zoom.value[0] = 1 / Std.parseFloat(value2);
            }
        case "addelement":
            switch (value1){
                case "speedlines":
                    speedLines.x = 300;
                case "nospeedlines":
                    speedLines.x = -9000;
            }
        case 'removechars':
            glitchBump.alpha = 0.25;
            FlxG.camera.zoom += 0.08;
			game.camHUD.zoom += 0.10;
            
            FlxTween.tween(game.dad, {alpha: 0}, 1.0);
            FlxTween.tween(game.boyfriend, {alpha: 0}, 1.0);
        case 'playendanim':
            //senpaiEvil.animation.play('idle',true);
            //FlxTween.tween(senpaiEvil, {alpha: 1}, 0.3);
            handGrabEnd.animation.play("anim", true);
            handGrabEnd.setPosition(300,200);
            video5.visible = false;
        case 'prob': // prob value of bigglitch shader
            bigGlitch.data.prob.value = [value1]; // 0 = off, 1 = max
            bigGlitch.data.time.value[0] = FlxG.random.float(0.0, 999.0);
        case 'specialbump':
            if (value1 == "2"){
                glitchBump.alpha = 0.5;
                FlxG.camera.zoom += 0.16;
                game.camHUD.zoom += 0.15;
            }
            else if (value1 == "3"){
                //glitchBump.alpha = 0.5;
                FlxG.camera.zoom += 0.03;
                game.camHUD.zoom += 0.05;
            }
            else if (value1 == "4"){
                FlxG.camera.zoom += 0.03;
                game.camHUD.zoom += 0.05;
            }
            else if (value1 == "5"){
                glitchBump.alpha = 0.25;
                FlxG.camera.zoom += 0.08;
                game.camHUD.zoom += 0.10;
            }
            else if (value1 == "6"){
                glitchBump.alpha = 0.15;
                FlxG.camera.zoom += 0.04;
                game.camHUD.zoom += 0.05;
            }
            else if (value1 == "7"){
                FlxG.camera.zoom += 0.03;
                game.camHUD.zoom += 0.05;
            }
            else if (value1 == "8"){
                FlxG.camera.zoom += 0.1;
                game.camHUD.zoom += 0.5;
            }
            else if (value1 == "glitch"){
                bigGlitch.data.time.value[0] = FlxG.random.float(0.0, 999.0);
            }
            else {
                glitchBump.alpha = 0.25;
                FlxG.camera.zoom += 0.08;
                game.camHUD.zoom += 0.05;
            }
            
        case 'playvideo':
            if (value1 == "help"){ // help me intermission
                helpme.visible = true;
                game.camHUD.alpha = 0;
                hideJudge = true;
                //video3.play();
                helpme.visible = true;
                helpme.animation.play('anim', true);
            }
            else if (value1 == "hand"){ // hand reach at screen intermission
                video4.visible = true;
/*                 game.camHUD.alpha = 0; */ // this is done during gameplay so pls no
                hideJudge = true;
                video4.setPosition(-130,-110);
                video4.play();
            }else if (value1 == "handloop"){ // hands grabbing at screen loop
                video5.visible = true;
                //game.camHUD.alpha = 0;
                video5.setPosition(-130,-110);
                video5.play();  
            }
            else if (value1 == "intermission"){ // glitch intermission
                hideJudge = true;
                game.camGame.setFilters([]);

                // give max health cuz this part is hard lololol
                // if you want true chkdsk experience, disable this and play without ghost tapping :3
                game.health = 2; 

                video8.play();
                video8.setPosition(-130,-110);
				video8.setGraphicSize(1920, 1080);
				video8.updateHitbox();
                video8.scale.x *= 1.4;
				video8.scale.y *= 1.4;
                game.add(video8);
                //game.boyfriend.alpha = 0;
                //object = video8;
                FlxG.debugger.track(object);

                //hide characters
                game.dad.alpha = 0;
                game.boyfriend.alpha = 0;
                game.remove(evilTrail);

                //video.visible = false;
                numTunnel.alpha = 0;
                //video2.visible = false; // hide tunnel 1
                numTunnel2.alpha = 0;

                game.dadField.noteField.visible = false;
                game.camHUD.alpha = 0.5;
            }
            else if (value1 == "tunnel2"){ // second free fall tunnel
                if(playing2)return;
                playing2 = true;

                game.addBehindBF(video6);
                game.addBehindDad(video7);

                //video.x = 4000; // hide off screen lol
                numTunnel.x = 4000;
                numTunnel2.x = 4000;
                //video2.x = 4000; // prolly bad for low end pcs so oopsy

                video6.play();
                video7.play();
            }else if (value1 == "remove"){ // remove intermission vids
                if (value2 == "4"){
                    video4.visible = false;
                    video4.x = 8000;
                    //video.x = -200;
                    numTunnel.x = 240;
                    numTunnel.alpha = 0.3;
                    //video.visible = true;
                    hideJudge = false;
                }
                else if (value2 == "5"){
                    video5.visible = false;
                    video5.x = 8000;
                }
                else if (value2 == "hands"){
                    //FlxTween.tween(video5, {alpha: 0}, 1.0);
                }
                else{ // video 3 lol
                    FlxTween.tween(helpme, {alpha: 0}, 0.2);
                    hideJudge = false;
                }
                game.camHUD.alpha = 1;
            
            }else{ // free fall tunnel 1
                numTunnel.animation.play('anim', true);
                numTunnel2.animation.play('anim', true);
                // if(playing)return;
                // playing = true;
                // if(hxvlc != "0"){
                //     video.play();
                //     video2.play();
                // }else if(hxcodec == "3.0.0"){
                //     video.play(Paths.video('NumberTunnel'), true);
                //     video2.play(Paths.video('NumberTunnel'), true);
                // }    
                // else{
                //     video.playVideo(Paths.video('NumberTunnel'), true);
                //     video2.playVideo(Paths.video('NumberTunnel'), true);
                // }   
                glitchBump.alpha = 0.25;
                FlxG.camera.zoom += 0.08;
                game.camHUD.zoom += 0.10;
            }
        case 'addtrail':
            addTrail(game.boyfriend, 0, 4, 2);
            bfTrail.color = FlxColor.fromRGB(0,142,255,255);
        case 'removetrail':
            game.remove(bfTrail);
            
        case 'changeBf': // sorry for spaghetti code im so fucking lazy
            if (value1 == "fall"){ // free fall view
                game.dadField.noteField.visible = true;

                modManager.setValue("fieldX", 0, 1); 
                modManager.setValue("noteSpawnTime", 1500);
                modManager.setValue("fieldY", 0, 1); 
                bgField.visible = false;
                game.changeCharacter("bf-pixel-dive", 0);
                game.boyfriend.setPosition(740 - 200,500);
                game.boyfriend.scale.set(6,6);

                bfSigh.setPosition(4000,1055);

                game.changeCharacter("spiritBack", 1);

                game.remove(evilTrail);
                addTrail(game.dad, 1);
                
                game.dad.setPosition(640 + 100,220+25);
                game.dad.scale.set(10,10);

                numAccY = -500;
                numAccX = -1000;
                numScale = 10;

                if (tweenStarted == false){
                    FlxTween.tween(game.boyfriend,  {x: game.boyfriend.x + 400}, 4.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                    FlxTween.tween(game.boyfriend,  {y: game.boyfriend.y + 100}, 1.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                    FlxTween.tween(game.boyfriend.scale,  {x: 7, y: 7}, 3.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
    
                    dadTweenX = FlxTween.tween(game.dad,  {x: game.dad.x - 200}, 4.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                    dadTweenY = FlxTween.tween(game.dad,  {y: game.dad.y - 50}, 1.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                    tweenStarted = true;
                } else if (tweenStarted == true){
                    dadTweenX.cancel();
                    dadTweenY.cancel();
                    game.dad.x + 200;
                    game.dad.y + 50;
                    dadTweenX = FlxTween.tween(game.dad,  {x: game.dad.x - 200}, 4.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                    dadTweenY = FlxTween.tween(game.dad,  {y: game.dad.y - 50}, 1.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                }

                curBg = 1;
                game.dad.scrollFactor.set(1,1);

                video6.visible = false;
                video7.visible = false; // hide tunnel 2

               // video.play();
                //video2.play();

               // video.visible = true;
               // video2.visible = true; // show tunnel 1

                numTunnel2.alpha = 0.7;
                numTunnel2.x = 240;
                numTunnel.alpha = 0.3;
                numTunnel.x = 240;

               // video2.x = -200;
               // video.x = -200; // put back on screen cuz i hid them earlier idk why

                nullGlitch.data.glitchAmplitude.value = [10.0];
            }else if (value1 == "altfall"){ // free fall but different bg and spirit is sad
                game.dadField.noteField.visible = true;

                modManager.setValue("fieldX", 0, 1); 
                modManager.setValue("noteSpawnTime", 1500);
                modManager.setValue("fieldY", 0, 1); 
                bgField.visible = false;
                game.changeCharacter("bf-pixel-dive", 0);
                game.boyfriend.setPosition(740 - 200,500);
                game.boyfriend.scale.set(6,6);

                bfSigh.setPosition(4000,1055);

                game.changeCharacter("spiritSad", 1);
                
                game.dad.setPosition(640 + 100,220+25);
                game.dad.scale.set(10,10);

                game.remove(evilTrail);
                addTrail(game.dad, 1);

                numAccY = -500;
                numAccX = -1000;
                numScale = 10;

                dadTweenX.cancel();
                dadTweenY.cancel();
                game.dad.x - 200;
                game.dad.y - 50;
                dadTweenX = FlxTween.tween(game.dad,  {x: game.dad.x + 200}, 4.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                dadTweenY = FlxTween.tween(game.dad,  {y: game.dad.y + 50}, 1.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
                tweenStarted = true;

                curBg = 1;
                game.dad.scrollFactor.set(1,1);

                // never being used again so we can dispose of them
                //video.destroy();
                //video2.destroy();

                numTunnel.alpha = 0;
                numTunnel2.alpha = 0;
/*                 video.visible = false;
                video2.visible = false; // hide tunnel 1 */

                video6.visible = true;
                video7.visible = true; // show tunnel 2

                nullGlitch.data.glitchAmplitude.value = [10.0];
            }
            else if (value1 == "remove"){
                if (value2 == "overlay"){
                    game.camGame.setFilters([new ShaderFilter(barrel), new ShaderFilter(vignette), new ShaderFilter(bigGlitch), new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(nullGlitch), new ShaderFilter(pixelate)]);
                    game.camHUD.setFilters([new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(nullGlitch)]);
                } else if (value2 == "addoverlay"){
                    game.camGame.setFilters([new ShaderFilter(barrel), new ShaderFilter(vignette), new ShaderFilter(bigGlitch), new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(nullGlitch), new ShaderFilter(overlay), new ShaderFilter(pixelate)]);
                    game.camHUD.setFilters([new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(nullGlitch), new ShaderFilter(overlay)]);
                }
                else {
                    game.boyfriend.x = 4000;
                }
                
            }
            else if (value1 == "main"){ // original view
                curBg = 0;

                game.changeCharacter("bf-pixel", 0);
                game.boyfriend.scale.set(6,6);
                game.boyfriend.setPosition(790, 741);

                game.changeCharacter("spiritBack", 1);
                game.dad.setPosition(740,45);
                game.dad.scale.set(3,3);

                game.remove(evilTrail);
                addTrail(game.dad, 1, 8, 5, 0.4, 0.030);

              //  video.visible = false;
              //  video2.visible = false;
                numTunnel.alpha = 0;
                numTunnel2.alpha = 0;

                nullGlitch.data.glitchAmplitude.value = [10.0];

                    dadTweenX.cancel();
                    dadTweenY.cancel();


            
            }else if (value1 == "sigh"){ // sigh anim
                game.camGame.setFilters([new ShaderFilter(barrel), new ShaderFilter(vignette), new ShaderFilter(bigGlitch), new ShaderFilter(chroma),new ShaderFilter(bloom),new ShaderFilter(nullGlitch), new ShaderFilter(pixelate)]);

                game.dadField.noteField.visible = false;

                modManager.setValue("fieldX", 400, 1); 
                modManager.setValue("noteSpawnTime", 3000);
                modManager.setValue("fieldY", -200, 1); 
                bgField.visible = true;
                bgField.alpha = 0;

                game.changeCharacter("bf-pixelFront", 0);
                game.boyfriend.setPosition(4000,810);
                game.boyfriend.scale.set(13,13);
                bfSigh.setPosition(754,1055);
                bfSigh.animation.play('anim', true);

                //hide intermission video
                video8.visible = false;
                video8.stop();
                video8.destroy(); // to prevent having videos that're not being used ever again still loaded
                video8.x = 8000;
				game.remove(video8);
                hideJudge = false;
                game.camHUD.alpha = 1;
                game.boyfriend.alpha = 1;

                arrT = [0.0,0.0,255.0];   // change overlay to blue
                arrR = [0.0,0.0,255.0];
                overlay.data.rT.value = [arrT[0]/255];
                overlay.data.gT.value = [arrT[1]/255];
                overlay.data.bT.value = [arrT[2]/255];
                overlay.data.rR.value = [arrR[0]/255];
                overlay.data.gR.value = [arrR[1]/255];
                overlay.data.bR.value = [arrR[2]/255];

                if (value2 == "1"){
                    game.changeCharacter("senpaiBackFirst", 1);
                } else{
                    game.changeCharacter("spiritSad", 1);
                }
                curBg = 2;
                numAccY = 200;
                numAccX = 0;
                numScale = 5;
                game.dad.setPosition(540,-105);
                game.dad.scale.set(6.7,6.7);
                game.dad.scrollFactor.set(0.2,0.2);
                game.dad.alpha = 0;

              //  video.visible = false;
              //  video2.visible = false;
              //  video.stop(); // no point in processing whats invisible
              //  video2.stop(); // no point in processing whats invisible

                //numTunnel.animation.pause();
                numTunnel.alpha = 0;
                //numTunnel2.animation.pause();
                numTunnel2.alpha = 0;

                game.remove(evilTrail);
                //game.add(evilTrail);

                nullGlitch.data.glitchAmplitude.value = [10.0];
                //object = video8;
                FlxG.debugger.track(object);
            }else if (value1 == "showbf"){ // normal bf returns
                game.boyfriend.setPosition(770,810);
                bfSigh.setPosition(4000,1055);
            }else if (value1 == "showspirit"){ // spirit fade in
                FlxTween.tween(game.dad, {alpha: 1}, 4.0);
                FlxTween.tween(bgField, {alpha: 1}, 4.0);
            }else if (value1 == "removeStatic"){
                FlxTween.tween(staticOverlay,  {alpha: 0}, 3.0);
            }else{ // front view
                game.dadField.noteField.visible = false;

                modManager.setValue("fieldX", 400, 1); 
                modManager.setValue("noteSpawnTime", 3000);
                modManager.setValue("fieldY", -200, 1); 
                bgField.visible = true;

                game.changeCharacter("bf-pixelFront", 0);
                game.boyfriend.setPosition(770,810);
                game.boyfriend.scale.set(13,13);
                //bfSigh.setPosition(754,1055);
                //bfSigh.animation.play('anim', true);

                if (value2 == "1"){
                    game.changeCharacter("senpaiBackFirst", 1);
                } else{
                    game.changeCharacter("spiritSad", 1);
                }

                if (tweenStarted == true){ // stop freefall tween near end of song
                    dadTweenX.cancel();
                    dadTweenY.cancel();
                }
                

                curBg = 2;
                numAccY = 200;
                numAccX = 0;
                numScale = 5;
                game.dad.setPosition(540,-105);
                game.dad.scale.set(6.7,6.7);
                game.dad.scrollFactor.set(0.2,0.2);

                game.remove(evilTrail);
                //game.add(evilTrail);

                nullGlitch.data.glitchAmplitude.value = [10.0];
                //object = bfSigh;
                FlxG.debugger.track(object);
            }
            glitchBump.alpha = 0.75;
            FlxG.camera.zoom += 0.08;
			game.camHUD.zoom += 0.10;
            
    }
}

function onBeatHit(){
    if (curBeat % 4 == 0){
        nullGlitch.data.glitchAmplitude.value = [FlxG.random.float(1.0,5.0)];
    }
    
}

function onSongTransition(cause, callback){
	FlxSprite.defaultAntialiasing = true;
	if(cause == 'gotoNextSong'){ // ONLY HAPPENS IN STORY MODE!!
        var state = new HScriptState("chkdskEnd");
		state.stateScript.set("callback", callback);
        FlxG.switchState(state);
		return Function_Stop;
	}

}

function onGameOver(){
    lowVin.alpha = 0;
    hurtAmountBlack = 0;
    hasGameOvered = true;

    game.camGame.setFilters([]);
    game.zoomEveryBeat = 0;
    game.camHUD.setFilters([]);
    scanlinesFake.alpha = 0;
}

var trans = false;
function onStartCountdown(){
    if(trans)return;
    game.camHUD.visible = false;
    trans = true;
    
    game.boyfriend.visible = true;
    game.boyfriend.animation.curAnim.curFrame = 0;
    game.camHUD.visible = true;
    game.startCountdown();

    return Function_Stop; 
}


function onDisplayJudgment(image)
	return 'pixelUI/' + image + "-pixel";

function onDisplayComboNumber(image, num)
	return 'pixelUI/num' + num + "-pixel";


var timer:Float = 0;

function onUpdate(elapsed){
	game.showRating = !hideJudge;
	game.showComboNum = hideJudge;
    if( Conductor.songPosition <= 0){
        schoolShader.data.time.value[0] += elapsed * 0.25;
        iconShader.data.time.value[0] += elapsed * 0.75;
        vignette.data.time.value[0] += elapsed * 0.5;
        //bigGlitch.data.time.value[0] += elapsed * 0.5;
        nullGlitch.data.iTime.value[0] += elapsed;
    }else{
        schoolShader.data.time.value[0] = Conductor.songPosition * 0.001 * 0.25;
        iconShader.data.time.value[0] = Conductor.songPosition * 0.001 * 0.75;
        nullGlitch.data.iTime.value[0] = Conductor.songPosition * 0.001;
        vignette.data.time.value[0] = Conductor.songPosition * 0.001 * 0.5;
        //bigGlitch.data.time.value[0] = Conductor.songPosition * 0.001 * 0.5;

    }
    if (hurtAmountBlack > 0){
        hurtAmountBlack -= 0.2 * elapsed;
    } else if (hurtAmountBlack < 0){
        hurtAmountBlack = 0;
    }

    hurtBlack.alpha = hurtAmountBlack;

    pixelate.data.pixelSize.value = [Std.int(pixelateAmount)];

    if (pixelateAmount > 1){
        pixelateAmount -= 2 * elapsed;
    } else if (pixelateAmount < 1){
        pixelateAmount = 1;
    }
	
    if (!hasGameOvered){
        if (game.health <= 0.4){
            if (lowVin.alpha < 0.8){
                lowVin.alpha += 0.4 * elapsed;
            } else {
                lowVin.alpha = 0.8;
            }
        } else {
            if (lowVin.alpha > 0){
                lowVin.alpha -= 0.4 * elapsed;
            }
        }
    }

    if (game.dad.animation.curAnim.name == "idle" && curBg == 0){
        //video.x = -200;
        game.dad.x = -4000;
    }

    if(curBg == 2){
        timer += elapsed * 0.35;
        school.alpha = ((FlxMath.fastSin(timer) * 0.5) + (glitchBump.alpha * 0.75)) * game.dad.alpha;
    }else{
        timer = 0;
        school.alpha = 0;
    }

    if (glitchBump.alpha > 0){
        glitchBump.alpha -= elapsed;
    }
    
    //if(nullGlitch.data.glitchAmplitude.value > [0.0]){
    nullGlitch.data.glitchAmplitude.value -= [0.001 * elapsed];
    //}

    
     //PlayState.instance.camFollow.set(object.x,object.y);
    //video.playVideo(Paths.video('SenpaiIdle'));
}
