import openfl.filters.ShaderFilter;
if(PlayState.modchartDifficulty != 2)
	return;

function numericForInterval(start, end, interval, func){
    var index = start;
    while(index < end){
        func(index);
        index += interval;
    }
}

var shader = newShader("pooper");
shader.data.iTime.value = [0.0];
shader.data.AMT.value = [0];
shader.data.SPEED.value = [2];

var shader2Filter = new ShaderFilter(shader);

function generateModchart(){
    PlayState.instance.camHUD.setFilters([shader2Filter]);

    modManager.quickNode(["transformY"], function(values:Array<Float>, pN:Int){
        if(ClientPrefs.downScroll)
            return [values[0] * -1];
        else
            return values;
    }, ["transformY"]);

    var shit = Song.loadFromJson("drums1", "chkdsk");
    var noteData = shit.notes;

    var f:Float = 1;

    for(sexion in noteData){
        for(data in sexion.sectionNotes){
            f *= -1;
            var time:Float = data[0];
            var type:Int = Std.int(data[1] % 4);
            var step = Conductor.getStep(time);
            modManager.queueEase(step, step + 2, "fieldY", -75, 'quadOut');
            modManager.queueEase(step + 2, step + 4, "fieldY", 0, 'quadIn');
            modManager.queueSet(step, "fieldRoll", 7 * f);
            modManager.queueEase(step, step + 4, "fieldRoll", 0, 'quadInOut');

            if(type == 0){
                modManager.queueSet(step, "confusionOffset", 11.25 * f);
                modManager.queueSet(step, "bumpyPeriod", 1);
                modManager.queueSet(step, "bumpy", 0.75 * f);
                modManager.queueSet(step, "tipsyZ", -5 * f);
                modManager.queueSet(step, "drunk", 1 * f);
                modManager.queueEase(step, step+4, "confusionOffset", 0, "quadOut");
                modManager.queueEase(step, step+4, "bumpy", 0, "quadOut");
                modManager.queueEase(step, step+4, "tipsyZ", 0, "quadOut");
                modManager.queueEase(step, step+4, "drunk", 0, "quadOut");
                modManager.queueSet(step, "xmod", 0.7);
                modManager.queueEase(step, step+4, "xmod", 0.9, "quadOut");
            }else if(type == 2){
                modManager.queueSet(step, "confusionOffset", 22.5* f);
                modManager.queueSet(step, "drunk", 0.3 * f);
                modManager.queueSet(step, "tipsyZ", 5);
                modManager.queueSet(step, "tipsy", 3);
                modManager.queueSet(step, "zigzag", 2);
                modManager.queueEase(step, step + 4, "confusionOffset", 0, "quadOut");
                modManager.queueEase(step, step + 4, "drunk", 0, "quadOut");
                modManager.queueEase(step, step + 4, "tipsyZ", 0, "quadOut");
                modManager.queueEase(step, step + 4, "tipsy", 0, "quadOut");
                modManager.queueEase(step, step + 4, "zigzag", 0, "quadOut");
                modManager.queueSet(step, "xmod", 0.75);
                modManager.queueEase(step, step + 4, "xmod", 0.9, "quadOut");
            }else if(type == 1){
                modManager.queueSet(step, "confusionOffset", 35 * f);
                modManager.queueSet(step, "drunk", 1.5 * f);
                modManager.queueSet(step, "bumpy", 2 * f);
                modManager.queueSet(step, "tipsy", 1);
                modManager.queueSet(step, "bounce", 0.5 * f);
                modManager.queueEase(step, step + 4, "confusionOffset", 0, "quadOut");
                modManager.queueEase(step, step + 4, "drunk", 0, "quadOut");
                modManager.queueEase(step, step + 4, "tipsy", 0, "quadOut");
                modManager.queueEase(step, step + 4, "bumpy", 0, "quadOut");
                modManager.queueEase(step, step + 4, "bounce", 0, "quadOut");
                modManager.queueSet(step, "xmod", 0.75);
                modManager.queueEase(step, step + 4, "xmod", 0.9, "quadOut");
            }
            else if(type == 3){
                modManager.queueSet(step, "confusionOffset", 35 * f);
                modManager.queueSet(step, "drunk", 0.3);
                modManager.queueSet(step, "tipsyZ", 3);
                modManager.queueSet(step, "boost", 1);
                modManager.queueEase(step, step + 4, "confusionOffset", 0, "quadOut");
                modManager.queueEase(step, step + 4, "drunk", 0, "quadOut");
                modManager.queueEase(step, step + 4, "tipsyZ", 0, "quadOut");
                modManager.queueEase(step, step + 4, "boost", 0, "quadOut");
                modManager.queueSet(step, "xmod", 0.75);
                modManager.queueEase(step, step + 4, "xmod", 0.9, "quadOut");
            }
        }
    }

    modManager.setValue("alpha", 1);
    modManager.setValue("transformY", -200);

    bump(0, 4, "Y", 50, 'bounceOut', 1);
    modManager.queueSet(0, 'squish', 0.75, 1);
    modManager.queueEase(0, 4, 'squish', 0, 'quartOut', 1);
    modManager.queueEase(0, 4, 'alpha', 0, 'quartOut', 1);

    glitch([24, 28], ['shader', [0.01, 0.2]], 0.5, 1);
    glitch([24, 28], ['position', [-112, 112]], 0.5, 1);

    glitch([61, 64], ['confusionOffset'], 0.5, 1);

    bump(60, 4, "Y", 50, 'bounceOut', 0);
    modManager.queueSet(60, 'squish', 0.75, 0);
    modManager.queueEase(60, 64, 'squish', 0, 'quartOut', 0);
    modManager.queueEase(60, 64, 'alpha', 0, 'quartOut', 0);
    bump(68, 4, "Y", -25, 'bounceOut', 0);

    bump(128, 4, "Y", 25, 'quadOut', 1);
    glitch([150, 155], ['shader', [0.01, 0.2]], 0.5, 1);
    glitch([150, 155], ['position', [-112, 112]], 0.5, 1);
    bump(160, 4, "Y", -25, 'bounceOut', 1);
    bump(186, 4, "Y", 25, 'bounceOut', 1);
    glitch([188, 192], ['shader', [0.05, 0.3]], 0.5, 1);
    glitch([188, 192], ['reverse'], 0.5, 1);


    modManager.queueEase(192, 200, 'tipsy', 0.625);
    modManager.queueEase(192, 200, 'beat', 0.625);
    modManager.queueSet(224, "beat", 0);

    glitch([214, 220], ['shader', [0.05, 0.3]], 0.5, 1);
    glitch([214, 220], ['confusionOffset'], 0.5, -1);

    modManager.queueSet(224, 'beat', 0);
    var counter = -1;
    numericForInterval(224, 256, 2, function(step){
        counter*=-1;
        bump(step, 2, "X", 32.5 * counter, 'linear', -1);
    });
    var counter = -1;
    numericForInterval(240, 256, 0.5, function(step){
        counter*=-1;
        bump(step, 2, "X", 32.5 * counter, 'linear', -1);
    });
    modManager.queueEase(254, 278, "beat", 0);
    modManager.queueEase(254, 278, "alpha", 1, 'quadIn');
    modManager.queueEase(254, 278, "transformY", 200, 'quadIn');

    // for(i in 0...4){
    //     modManager.queueSet(284, "transform" + i + "Y", 0);
    //     modManager.queueSet(284, "alpha" + i, 0);
    // }
    modManager.queueEase(276, 284, "alpha", 0, 'quadOut', 0);
    modManager.queueSet(276, "transformY", -200);
    modManager.queueSet(276, "opponentSwap", 0.5);
    modManager.queueSet(276, "stretch", 0.5);
    modManager.queueEase(276, 284, "transformY", 0, 'expoInOut');
    modManager.queueEase(276, 284, "stretch", 0, 'bounceOut');

	var f = 1;
	numericForInterval(288, 544, 2, function(i){
		//modManager.queueSet(i, "xmode", 0.25 * f);
		//modManager.queueEase(i, i+2, "xmode", 0, 'quartOut');
		
		modManager.queueSet(i, "tornado", 0.4 * f);
		modManager.queueEase(i, i+4, "tornado", 0, 'expoOut');

		modManager.queueSet(i, "tipsy", 1 * f);
		modManager.queueEase(i, i+4, "tipsy", 0, 'expoOut');

		modManager.queueSet(i, "drunk", 1 * f);
		modManager.queueEase(i, i+4, "drunk", 0, 'expoOut');

		f *= -1;
	});
    //modManager.queueSet(288, "beat", 1);

    glitch([318, 320], ['reverse'], 0.5, 0);
    glitch([342, 346], ['shader', 0.05, 0.3], 0.5, 0);
    glitch([382, 384], ['confusionOffset'], 0.5, 0);
    glitch([406, 410], ['position', [-112, 112]], 0.5, 0);
    glitch([446, 448], ['shader', 0.05, 0.3], 0.5, 0);
    glitch([470, 474], ['reverse'], 0.5, 0);
    glitch([470, 474], ['shader', 0.05, 0.3], 0.5, 0);
    glitch([534, 538], ['confusionOffset'], 0.5, 0);

    modManager.queueEase(544, 560, "opponentSwap", 0, 'quadOut');
    modManager.queueEase(544, 560, "flip", 0, 'quadOut');
    modManager.queueEase(544, 560, "alpha", 0, 'quadOut', 1);
    modManager.queueEase(544, 560, "beat", 0.125, 'quadOut');
    modManager.queueEase(544, 560, "tipsy", 0, 'quadOut');
    glitch([544, 576], ['reverse'], 0.5, 1);
    glitch([544, 576], ['position', [-112, 112]], 0.5, 1);
    glitch([544, 674], ['shader', [0.05, 0.125]], 1, 1);
    glitch([576, 592], ['confusionOffset'], 0.5, 1);
    glitch([576, 592], ['reverse'], 0.5, 1);
    glitch([608, 672], ['Z', [-.5, .5]], 0.5, 1);
    glitch([624, 672], ['position', [-112, 112]], 0.5, 1);
    glitch([656, 672], ['reverse'], 0.5, 1);

    modManager.queueEase(672, 678, "beat", 0.5);
    var counter = -1;
    numericForInterval(672, 928, 2, function(step){
        counter *= -1;

        modManager.queueSet(step, "transform0Z", 320 * counter);
        modManager.queueSet(step, "transform3Z", 320 * counter);
        modManager.queueEase(step, step+2, "transform0Z", 0, 'circOut');
        modManager.queueEase(step, step+2, "transform3Z", 0, 'circOut');

        modManager.queueSet(step, "confusionOffset0", 90 * counter);
        modManager.queueSet(step, "confusionOffset3", 90 * counter);
        modManager.queueEase(step, step+2, "confusionOffset0", 0, 'circOut');
        modManager.queueEase(step, step+2, "confusionOffset3", 0, 'circOut');

        modManager.queueSet(step+2, "transform1Z", 320 * counter);
        modManager.queueSet(step+2, "transform2Z", 320 * counter);
        modManager.queueEase(step+2, step+4, "transform1Z", 0, 'circOut');
        modManager.queueEase(step+2, step+4, "transform2Z", 0, 'circOut');
        modManager.queueSet(step+2, "confusionOffset1", -90 * counter);
        modManager.queueSet(step+2, "confusionOffset2", -90 * counter);
        modManager.queueEase(step+2, step+4, "confusionOffset1", 0, 'circOut');
        modManager.queueEase(step+2, step+4, "confusionOffset2", 0, 'circOut');

		modManager.queueSet(step, "bumpy", 0.35 * counter);
        modManager.queueEase(step, step+2, "bumpy", 0, 'circOut');

		modManager.queueSet(step+2, "bumpy", -0.35 * counter);
        modManager.queueEase(step+2, step+4, "bumpy", 0, 'circOut');
    });

    modManager.queueEase(928, 944, "beat", 0, 'quartOut');
    modManager.queueEase(928, 944, "opponentSwap", 0.5, 'quartOut');
    modManager.queueEase(928, 944, "alpha", 1, 'quartOut', 1);

	var f = 1;
	numericForInterval(928, 960, 4, function(i){
		modManager.queueSet(i, "tornado", 0.4 * f);
		modManager.queueEase(i, i+6, "tornado", 0, 'quadOut');

		modManager.queueSet(i, "tipsy", 1 * f);
		modManager.queueEase(i, i+6, "tipsy", 0, 'quadOut');

		modManager.queueSet(i, "drunk", 1 * f);
		modManager.queueEase(i, i+6, "drunk", 0, 'quadOut');

		f *= -1;
	});

	numericForInterval(960, 976, 2, function(i){
		modManager.queueSet(i, "tornado", 0.4 * f);
		modManager.queueEase(i, i+4, "tornado", 0, 'expoOut');

		modManager.queueSet(i, "tipsy", 1 * f);
		modManager.queueEase(i, i+4, "tipsy", 0, 'expoOut');

		modManager.queueSet(i, "drunk", 1 * f);
		modManager.queueEase(i, i+4, "drunk", 0, 'expoOut');

		f *= -1;
	});

	numericForInterval(976, 992, 1, function(i){
		modManager.queueSet(i, "tornado", 0.4 * f);
		modManager.queueEase(i, i+4, "tornado", 0, 'expoOut');

		modManager.queueSet(i, "tipsy", 1 * f);
		modManager.queueEase(i, i+4, "tipsy", 0, 'expoOut');

		modManager.queueSet(i, "drunk", 1 * f);
		modManager.queueEase(i, i+4, "drunk", 0, 'expoOut');

		f *= -1;
	});

    modManager.queueEase(1248, 1258, "alpha", 1, 'quadOut', 0);
    modManager.queueEase(1248, 1260, "transformY", 200, 'quadOut', 0);

    modManager.queueSet(1268, "opponentSwap", 0);
    modManager.queueSet(1268, "transformX", 500, 1);
    modManager.queueEase(1268, 1280, "tipsy", 0.5, 'backOut');
    modManager.queueEase(1268, 1280, "transformY", 0, 'backOut', 0);
    modManager.queueEase(1268, 1280, "alpha", 0, 'backOut', 0);
    modManager.queueEase(1404, 1420, "alpha", 0, 'backOut', 1);
    modManager.queueEase(1404, 1420, "transformX", 0, 'quadOut', 1);

    modManager.queueEase(1528, 1536, "tipsy", 0, 'quadInOut'); 
    modManager.queueEase(1532, 1536, "beat", 0.5, 'quadInOut');
    modManager.queueEase(1532, 1536, "opponentSwap", 0.5, 'quadOut');
    modManager.queueEase(1532, 1536, "reverse", 1, 'bounceOut', 1);
    modManager.queueEase(1532, 1536, "transformY", 75, 'quadOut', 0);
    modManager.queueEase(1532, 1536, "transformY", -75, 'quadOut', 1);

	numericForInterval(1536, 1792, 4, function(i){
		modManager.queueSet(i, "drunkZ", 1.5 * f);
		modManager.queueEase(i, i+4, "drunkZ", 0, 'quartOut');

		modManager.queueSet(i, "tipsy", 1 * f);
		modManager.queueEase(i, i+4, "tipsy", 0, 'quartOut');

		modManager.queueSet(i, "drunk", 1 * f);
		modManager.queueEase(i, i+4, "drunk", 0, 'quartOut');

		modManager.queueEase(i, i+4, "drunkOffset", Math.cos(i * 0.75), 'quartOut');
		f *= -1;
	});

    // modManager.queueEase(1532, 1536, "transformX", 500, 'quadOut', 0);
    modManager.queueEase(1532, 1536, "transformZ", 320, 'quadOut', 1);
    modManager.queueEase(1532, 1536, "transformZ", -320, 'quadOut', 0);
    modManager.queueEase(1532, 1536, "alpha", 0.5, 'quadOut', 1);
    modManager.queueEase(1532, 1536, "stealth", 0.25, 'quadOut', 1);

    modManager.queueEase(1664, 1672, "transformZ", -320, 'bounceOut', 1);
    modManager.queueEase(1664, 1672, "transformZ", 320, 'bounceOut', 0);

    modManager.queueEase(1728, 1734, "transformZ", 0, 'quadOut');
    modManager.queueEase(1728, 1734, "transformY", 0, 'quadOut');
    modManager.queueEase(1728, 1734, "sudden", 0.75, 'quadOut');
    
    modManager.queueEase(1792, 1804, "opponentSwap", 0);
    modManager.queueEase(1792, 1804, "sudden", 0);
    modManager.queueEase(1792, 1804, "alpha", 0, 'quadOut', 1);
    modManager.queueEase(1792, 1804, "stealth", 0, 'quadOut', 1);

    modManager.queueSet(1856, "beat", 0);
    modManager.queueEase(1856, 1860, "sudden", 0);
    modManager.queueEase(1856, 1860, "alpha", 1, 'quadOut', 1);

    var plrFieldCopy = new NoteField(game.playerField, modManager);
    plrFieldCopy.modNumber = 3;
    plrFieldCopy.visible = false;
    plrFieldCopy.songSpeed = game.songSpeed;
	plrFieldCopy.cameras = [game.camHUD];
    game.notefields.add(plrFieldCopy);

    var centerOffset = modManager.getBaseX(0, 0.5, 4);
    var oppSet = modManager.getBaseX(0, 1, 4);

    var proxyField = new ProxyField(plrFieldCopy);
    proxyField.x = (-centerOffset) + oppSet;
    proxyField.cameras = [game.camHUD];
	proxyField.visible = false;
    proxyField.alpha = 0;
    game.notefields.add(proxyField);

    var f:Int = 1;
    numericForInterval(1856, 2048, 2, function(i){
        modManager.queueSet(i, "drunk", 0.5 * f);
        modManager.queueSet(i, "drunkOffset", game.curDecBeat * 0.01 * f);
        modManager.queueEase(i, i + 4, "drunk", 0, 'cubeOut');
        f *= -1;
    });
	
    modManager.queueFuncOnce(1856, function(sh){
        proxyField.visible = true;
    });


    modManager.queueEaseFunc(1856, 1860, FlxEase.quadOut, function(ev, val, step){
        proxyField.alpha = val;
    });

    modManager.queueFunc(1856, 2048, function(event:CallbackEvent, cDS:Float){
        var pos = (cDS - 1856) * 0.5;

        for(pn in 1...3){
            for(col in 0...4){
                var cPos = col * -112;
                if (pn == 2) cPos = cPos - 620;
                var c = (pn - 1) * 4 + col;
                var mn = pn == 2?0:3;

                var cSpacing = 112;

                var newPos = (((col * cSpacing + (pn - 1) * 640 + pos * cSpacing) % (1280))) - 176;
                modManager.setValue("transform" + col + "X", cPos + newPos, mn);
            }
        }
    });

    for(i in 0...4){
        modManager.queueEase(2048, 2056, "transform" + i + "X", 0, 'bounceOut');
    }
    modManager.queueEaseFunc(2048, 2056, FlxEase.quadOut, function(ev, val, step){
        proxyField.alpha = 1 - val;
    });

    modManager.queueFuncOnce(2056, function(sh){
        proxyField.visible = false;
    });

    modManager.queueEase(2048, 2056, "alpha", 0, 'quadOut', 1);
    modManager.queueEase(2048, 2056, "drunkOffset", 0, 'quadOut');
    modManager.queueEase(2048, 2056, "reverse", 0, 'bounceOut', 1);

    var f = 1;
    numericForInterval(2176, 2432, 2, function(i){
        modManager.queueSet(i, "xmod", 1.15);
        modManager.queueEase(i, i + 4, "xmod", 0.9, 'cubeOut');
        modManager.queueSet(i, "square", 0.25 * f);
        modManager.queueEase(i, i + 8, "square", 0, 'quadOut');
        modManager.queueSet(i, "zigzag", 0.35 * f);
        modManager.queueEase(i, i + 8, "zigzag", 0, 'quadOut');
        modManager.queueSet(i, "drunk", 0.25 * f);
        modManager.queueEase(i, i + 16, "drunk", 0, 'cubeOut');

        modManager.queueSet(i, "invert", 0.2);
        modManager.queueEase(i, i + 4, "invert", 0, 'cubeOut');        

        modManager.queueSet(i, "tipsyZ", 2 * f);
        modManager.queueEase(i, i + 4, "tipsyZ", 0, 'cubeOut');
        modManager.queueSet(i, "opponentSwap", 0);
        modManager.queueEase(i, i + 16, "opponentSwap", 0.25, 'cubeOut');
        modManager.queueSet(i, "confusionOffset", -25 * f);
        modManager.queueEase(i, i + 4, "confusionOffset", 0, 'cubeOut');
        f *= -1;
    });

	numericForInterval(2048, 2160, 1, function(i){
		//modManager.queueSet(i, "xmode", 0.25 * f);
		//modManager.queueEase(i, i+2, "xmode", 0, 'quartOut');
		modManager.queueSet(i, "xmod", 0.7);
		modManager.queueEase(i, i+4, "xmod", 1, 'quadOut');

		modManager.queueSet(i, "zigzag", -0.5 * f);
		modManager.queueEase(i, i+4, "zigzag", 0, 'expoOut');

		modManager.queueSet(i, "bounce", 0.4 * f);
		modManager.queueEase(i, i+4, "bounce", 0, 'expoOut');

		modManager.queueSet(i, "drunk", 1.5 * f);
		modManager.queueEase(i, i+4, "drunk", 0, 'expoOut');

		modManager.queueEase(i, i+4, "drunkOffset", Math.sin(i * 0.75), 'expoOut');

		f *= -1;
	});


	numericForInterval(2160, 2170, 0.5, function(i){
		//modManager.queueSet(i, "xmode", 0.25 * f);
		//modManager.queueEase(i, i+2, "xmode", 0, 'quartOut');
		modManager.queueSet(i, "xmod", 0.5);
		modManager.queueEase(i, i+4, "xmod", 1, 'quadOut');

		modManager.queueSet(i, "tipsy", 1.25 * f);
		modManager.queueEase(i, i+4, "tipsy", 0, 'expoOut');

		modManager.queueSet(i, "drunk", 1.75 * f);
		modManager.queueEase(i, i+4, "drunk", 0, 'expoOut');

		modManager.queueEase(i, i+4, "drunkOffset", Math.sin(i * 1.25), 'expoOut');

		f *= -1;
	});


    glitch([2048, 2080], ['reverse'], 0.5, 1);
    glitch([2048, 2080], ['position', [-112, 112]], 0.5, 1);
    glitch([2048, 2178], ['shader', [0.05, 0.125]], 1, 1);
    glitch([2080, 2096], ['confusionOffset'], 0.5, 1);
    glitch([2080, 2096], ['reverse'], 0.5, 1);
    glitch([2108, 2176], ['Z', [-.5, .5]], 0.5, 1);
    glitch([2156, 2176], ['position', [-112, 112]], 0.5, 1);
    glitch([2160, 2176], ['reverse'], 0.5, 1);

    glitch([2238, 2240], ['shader', 0.05, 0.3], 0.5, 0);
    glitch([2238, 2240], ['confusionOffset'], 0.5, 0);
    glitch([2262, 2266], ['Z', [-.25, .25]], 0.5, 0);
    glitch([2302, 2304], ['shader', 0.05, 0.3], 0.5, 0);
    glitch([2326, 2330], ['shader', 0.05, 0.3], 0.5, 0);
    glitch([2366, 2368], ['confusionOffset'], 0.5, 0);
    glitch([2366, 2368], ['Z', [-.25, .25]], 0.5, 0);

    glitch([2390, 2394], ['Z', [-0.5, 0.5]], 0.5, 0);

    modManager.queueEase(2432, 2448, "alpha", 1, 'quadOut');
    modManager.queueEase(2432, 2448, "beat", 0, 'quadOut');

}

function bump(step, steplength, modifier, amnt, ease, line){
    modManager.queueSet(step, "transform" + modifier, amnt, line);
    modManager.queueEase(step, step+steplength, "transform" + modifier, 0, ease, line);
}

FlxG.random.currentSeed = 666;
FlxG.random.initialSeed = 666;

// not sure about the randomness in the modchart
function glitch(steps, type, interval, lane){
    switch(type[0]){
        case 'shader':
            numericForInterval(steps[0], steps[1] - interval, interval, function(step){
                modManager.queueFuncOnce(step, function(shit){
                    shader.data.AMT.value = [FlxG.random.float(type[1][0], type[1][1])];
                });
            });
            modManager.queueFuncOnce(steps[1], function(shit){
                shader.data.AMT.value = [0];
            });
        case 'confusionOffset':
            numericForInterval(steps[0], steps[1] - interval, interval, function(step){
                for(i in 0...4){
                    modManager.queueSet(step, 'confusionOffset' + i, FlxG.random.float(1, 359), lane);
                }
            });
            for(i in 0...4){
                modManager.queueEase(steps[1], steps[1] + interval, 'confusionOffset' + i, 0, 'circOut', lane);
            }
        case 'reverse':
            numericForInterval(steps[0], steps[1] - interval, interval, function(step){
                if(FlxG.random.bool())
                    modManager.queueSet(step, "reverse" + FlxG.random.int(0, 3), 1, lane);
                else
                    modManager.queueSet(step, "reverse" + FlxG.random.int(0, 3), 0, lane);

            });
            for(i in 0...4){
                modManager.queueEase(steps[1], steps[1] + interval, "reverse" + i, 0, 'bounceOut', lane);                
            }
        case 'Z':
            var direction = 'Z';
            numericForInterval(steps[0], steps[1] - interval, interval, function(step){
                for(i in 0...4){

                    modManager.queueSet(step, "confusionOffset" + i, FlxG.random.float(-360, 360), lane);
                    modManager.queueSet(step, "transform" + i + direction, FlxG.random.float(type[1][0], type[1][1]) * 1280, lane);
                }
            });
            for(i in 0...4){
                modManager.queueEase(steps[1], steps[1] + interval, "transform" + i + "Z", 0, 'quadOut', lane);
                modManager.queueEase(steps[1], steps[1] + interval, "confusionOffset" + i, 0, 'quadOut', lane);

            }  
        case 'position':
                var direction = 'X';
                numericForInterval(steps[0], steps[1] - interval, interval, function(step){
                    for(i in 0...4){
                        direction = 'X';
                        if(FlxG.random.bool(50))
                            direction = 'Y';
        
                        modManager.queueSet(step, "confusionOffset" + i, FlxG.random.float(-360, 360), lane);
                        modManager.queueSet(step, "transform" + i + direction, FlxG.random.float(type[1][0], type[1][1]), lane);
                    }
            });
            for(i in 0...4){
                modManager.queueEase(steps[1], steps[1] + interval, "transform" + i + "X", 0, 'quadOut', lane);
                modManager.queueEase(steps[1], steps[1] + interval, "transform" + i + "Y", 0, 'quadOut', lane);
                modManager.queueEase(steps[1], steps[1] + interval, "confusionOffset" + i, 0, 'quadOut', lane);

            }
    }
}

function onUpdate(elapsed){
    shader.data.iTime.value = [Conductor.songPosition * 0.001];
}
