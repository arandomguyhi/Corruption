
if(PlayState.modchartDifficulty != 1)
	return; // This is the normal modchart, so only load this script on normal lol!

function forNoteInChart(chart, func){
	var shit = Song.loadFromJson(chart, "null-and-void");
    var noteData = shit.notes;
	
    for(sexion in noteData){
        for(data in sexion.sectionNotes){
            var time:Float = data[0];
            var type:Int = Std.int(data[1] % 4);
            var step = Conductor.getStep(time);
			func(step, type, time, data);
        }
    }


}

function generateModchart(){
    var f:Float = 1;
	function generateAltFunc(mod:String){
        modManager.registerAux(mod + "-a");
        modManager.quickNode([mod + "-a"], function(values:Array<Float>, pN:Int){
            return values;
        }, [mod]);
    }

	modManager.setValue("unboundedReverse", 1);

	// Intro fuck
	modManager.queueSet(-16, "opponentSwap", 0.5, 0);
	modManager.queueSet(-16, "opponentSwap", -1.5, 1);

	modManager.queueEase(0, 2, "opponentSwap", 0.5, 'circOut', 1);
	modManager.queueEase(0.75, 6, "opponentSwap", -1, 'circOut', 0);

	modManager.queueEase(6, 8, "centered", 1, 'circOut', 1);
		
	modManager.queueEase(16, 20, "centerrotateZ", -90, 'circOut', 1);
	modManager.queueEase(22, 26, "centered", 0, 'quadOut', 1);

	modManager.queueSet(16, "transformY", -50, 1);
	modManager.queueSet(18, "transformY", -100, 1);
	modManager.queueSet(19, "transformY", -150, 1);
	modManager.queueSet(20, "transformY", -200, 1);

	modManager.queueEase(22, 26, "fieldYaw", 180, 'quadOut', 1);
	
	//modManager.queueEase(22, 26, "transformY", -200, 'quadOut', 1);

	modManager.queueEase(32, 36, "centerrotateZ", -180, 'circOut', 1);
	modManager.queueEase(32, 36, "flip", 1, 'circOut', 1);
	modManager.queueEase(32, 36, "transformY", 0, 'circOut', 1);

	modManager.queueSet(36, "reverse", 1, 1);
	modManager.queueSet(36, "flip", 0, 1);
	modManager.queueSet(36, "centerrotateZ", 0, 1);

	modManager.queueEase(38, 40, "flip", 0.75, 'quartOut', 1);
	modManager.queueEase(38, 40, "invert", 0.75, 'quartOut', 1);

	modManager.queueSet(42, "flip", 0.9375, 1);
	modManager.queueSet(42, "invert", 0.375, 1);
	
	modManager.queueSet(43, "invert", 0, 1);
	modManager.queueSet(43, "flip", 1, 1);

	modManager.queueSet(48, "fieldYaw", 0, 1);
	modManager.queueSet(48, "centered", 1, 1);
	modManager.queueSet(50, "reverse", 0, 1);
	modManager.queueSet(50, "centered", 0, 1);
	modManager.queueSet(51, "flip", 0.375, 1);
	modManager.queueSet(52, "flip", 0, 1);

	modManager.queueEase(54, 58, "opponentSwap", 0, 'quadOut');

	generateAltFunc("confusionOffset");
	generateAltFunc("stealth");
	generateAltFunc("reverse");

	forNoteInChart("newDrums", (step, type, time, data) -> {
		f *= -1;

		if(type == 0){
			modManager.queueSet(step, "tiny", -0.25);
			modManager.queueEase(step, step + 4, "tiny", 0, "quartOut");
			modManager.queueSet(step, "confusionOffset", 11.25 * f);
			modManager.queueSet(step, "tipsy", 0.35);
			modManager.queueSet(step, "zigzag", 0.5);
			modManager.queueEase(step, step+4, "zigzag", 0, "quadOut");
			modManager.queueEase(step, step+4, "confusionOffset", 0, "quadOut");
			modManager.queueEase(step, step+4, "tipsy", 0, "quadOut");
		}else if(type == 1){
			modManager.queueSet(step, "tiny", 0.25);
			modManager.queueEase(step, step + 4, "tiny", 0, "quartOut");
			modManager.queueSet(step, "confusionOffset", 22.5 * f);
			modManager.queueSet(step, "drunkZ", 0.3);
			modManager.queueSet(step, "drunk", 0.35 * f);
			modManager.queueSet(step, "tipsyZ", 1.5);
			modManager.queueEase(step, step + 4, "confusionOffset", 0, "quadOut");
			modManager.queueEase(step, step + 4, "drunkZ", 0, "quadOut");
			modManager.queueEase(step, step + 4, "drunk", 0, "quadOut");
			modManager.queueEase(step, step + 4, "tipsyZ", 0, "quadOut");
		}else if(type == 2){
			modManager.queueSet(step, "confusionOffset", 45 * f);

			modManager.queueEase(step, step + 2, "mini", -0.25, "quintOut");
			modManager.queueEase(step + 2, step + 8, "mini", 0, "sineOut");

			modManager.queueSet(step, "bounce", 1 * f);
			modManager.queueSet(step, "transformX", 50 * f);
			modManager.queueSet(step, "stealth", 0.85);
			modManager.queueSet(step, "tipsyZ", 1 * f);
			modManager.queueSet(step, "drunk", 0.35 * f);
			modManager.queueEase(step, step + 4, "confusionOffset", 0, "quadOut");
			modManager.queueEase(step, step + 4, "bounce", 0, "quartOut");
			modManager.queueEase(step, step + 8, "transformX", 0, "quartOut");
			modManager.queueEase(step, step + 8, "stealth", 0, "quartOut");
			modManager.queueEase(step, step + 8, "tipsyZ", 0, "quartOut");
			modManager.queueEase(step, step + 8, "drunk", 0, "quartOut");
		}
	});

    f = 1;
	forNoteInChart("synthshit", (step, type, time, data) -> { // also claps
		f *= -1;
		if(type == 0){
			modManager.queueEase(step, step + 6, "confusionOffset-a", -11.25, "quartOut");
			modManager.queueEase(step, step + 4, "transformX-a", -35, "quadOut");
			modManager.queueSet(step, "stealth", 0.35);
			modManager.queueEase(step, step + 4, "stealth", 0, "quadOut");
		}else if(type == 3){
			modManager.queueEase(step, step + 6, "confusionOffset-a", 11.25, "quartOut");
			modManager.queueEase(step, step + 4, "transformX-a", 35, "quadOut");
			modManager.queueSet(step, "stealth", 0.35);
			modManager.queueEase(step, step + 4, "stealth", 0, "quadOut");
		}else if(type == 2){
			modManager.queueSet(step, "tiny", -0.125);
			modManager.queueEase(step, step + 2, "tiny", 0, "sineOut");
			modManager.queueSet(step, "stealth-a", 0.5);
			modManager.queueEase(step, step + 2, "stealth-a", 0, "sineOut");
		}
	});

    f = 1;
	forNoteInChart("fuckshit", (step, type, time, data) -> { // also claps
		f *= -1;
		if(type == 0){
			modManager.queueSet(step, "drunk", 0.75 * f);
			modManager.queueSet(step, "bumpy", 1 * f);
			modManager.queueSet(step, "tipsyX", 0.25 * f);
			modManager.queueEase(step, step + 4, "bumpy", 0, "quadOut");
			modManager.queueEase(step, step + 4, "drunk", 0, "sineOut");
			modManager.queueEase(step, step + 4, "tipsyX", 0, "sineOut");
		}
	});

	modManager.queueSet(1024, "reverse", 0);
	modManager.queueSet(250, "stealth", 1, 1);
	modManager.queueSet(250, "dark", 1);
	modManager.queueFuncOnce(250, (ev, s) -> {
		game.camGame.visible = false;
	});

	modManager.queueFuncOnce(256, (ev, s) -> {
		game.camGame.visible = true;
	});

	modManager.queueEase(256, 264, "stealth", 0, 'quartOut', 1);
	modManager.queueEase(256, 264, "dark", 0, 'quartOut');

	var a = 0.5;
    var lCD:Int = -1;
	modManager.queueEase(442, 448, "alpha", 0.5, "quadOut", 0);

	var changes:Array<Array<Float>> = [
		[1, 0, 90],
		[0.25, -0.75, -90],
		[0.75, 0.75, 180],
		[0, 0, 0],
		[0, 1, -90],
		[0.25, 1.25, -90],
		[1, 0, -90],
		[0, 0, 0],
		[0, 1, 180],
		[0.25, -0.75, 180],
		[1, 0, -90],
		[0, 0, 0]
	];

	var chIdx:Int = 0;
	var changeTimer:Float = 0;
    modManager.queueFunc(448, 512, function(event, cDS)
    {
        if(lCD == -1)
            lCD = cDS;
        
        a = a + (cDS - lCD);

		changeTimer += (cDS - lCD);
		while (changeTimer >= 0.5){
			chIdx++;
			if(chIdx >= changes.length)
				chIdx = 0;

			changeTimer -= 0.5;
		}

		var flip = changes[chIdx][0];
		var inve = changes[chIdx][1];
		var conf = changes[chIdx][2];
		modManager.setCurrentValue("flip",flip, 1);
		modManager.setCurrentValue("invert", inve, 1);
		modManager.setCurrentValue("confusionOffset", conf, 1);

		if(flip == 0 && conf == 0 && inve == 0)
			modManager.setCurrentValue("stealth", 0.25, 1);
		else
			modManager.setCurrentValue("stealth", 0.85, 1);

        lCD = cDS;
        var val = Math.cos(a / 4);
        var val2 = Math.sin(a / 4);
        modManager.setValue("opponentSwap", 0.5 - (0.5 * val), 0);
        modManager.setValue("transformZ", 96 * val2, 0);

        modManager.setValue("opponentSwap", ((0.5 * val) * -1) + 0.5, 1);
        modManager.setValue("transformZ", (96 * val2) * -1, 1);
    });

	modManager.queueEase(508, 516, "alpha", 0, "quadOut", 0);
	modManager.queueEase(512, 516, "opponentSwap", 1, "quadOut");
	modManager.queueEase(512, 516, "transformZ", 0, "quadOut");

	modManager.queueEase(570, 576, "alpha", 0.75, "quadOut", 1);

	var a = 0.5;
    var lCD:Int = -1;
    modManager.queueFunc(576, 640, function(event, cDS)
    {
        if(lCD == -1)
            lCD = cDS;
        
        a = a + (cDS - lCD);
        lCD = cDS;
        var val = Math.cos(a / 4) * -1;
        var val2 = Math.sin(a / 4) * -1;
        // FlxG.log.add(val);
        modManager.setValue("opponentSwap", 0.5 - (0.5 * val), 0);
        modManager.setValue("transformZ", 96 * val2, 0);

        // modManager.setValue("centerrotateZ", (val * 0.5) * -1, 0);
        // modManager.setValue("centerrotateZ", (val * 0.5), 1);

		if(cDS < 626){
			modManager.setValue("opponentSwap", ((0.5 * val) * -1) + 0.5, 1);
			modManager.setValue("transformZ", (96 * val2) * -1, 1);
		}
    });

	modManager.queueEase(626, 640, "alpha", 0, "quadOut", 1);

	modManager.queueEase(640, 644, "opponentSwap", 0, "quadOut", 0);
	modManager.queueEase(640, 644, "transformZ", 0, "quadOut");

	modManager.queueEase(626, 638, "fieldZ", 860, 'quadOut', 1);
	modManager.queueEase(626, 638, "fieldY", -180, 'quadOut', 1);
	modManager.queueEase(626, 638, "opponentSwap", 0.4, 'quadOut', 1);

	modManager.queueSet(256, "stealth", 0.5, 1);
	modManager.queueSet(256, "dark", 0.5);

	modManager.queueEase(700, 704, "centered", -0.1, "circOut");
	
	modManager.queueSet(704, "stretch", 3);
	modManager.queueEase(704, 708, "stretch", 0, "circOut");
	modManager.queueEase(704, 708, "reverse", 1, "quintOut");
	modManager.queueEase(704, 708, "centered", 0, "quintOut");

	modManager.queueSet(864, 'centered', 0.33);
	modManager.queueSet(870, 'centered', 0.66);
	modManager.queueSet(876, 'centered', 1);

	modManager.queueSet(882, 'centered', 0);
	modManager.queueSet(882, 'reverse', 0.2);
	modManager.queueSet(882, 'xmod', 1.1);

	modManager.queueEase(890, 896, "reverse", 0, 'quadOut');
	modManager.queueEase(890, 896, "xmod", 1, 'quadOut');

	modManager.queueSet(870, "stealth", 0);
	modManager.queueEase(870, 876, "stealth", 1, 'quadOut');

	modManager.queueSet(876, "stealth", 0);
	modManager.queueEase(876, 882, "stealth", 1, 'quadOut');

	modManager.queueEase(882, 888, "stealth", 0, 'sineOut');

	modManager.queueSet(1146, "stealth", 1, 1);
	modManager.queueSet(1146, "dark", 1);
	modManager.queueFuncOnce(1146, (ev, s) -> {
		game.camGame.visible = false;
	});

	modManager.queueFuncOnce(1152, (ev, s) -> {
		game.camGame.visible = true;
	});


	modManager.queueSet(1024, "stealth", 1);
	modManager.queueSet(1024, "dark", 1);
/* 		modManager.setValue("fieldX", 400, 1); 
	modManager.setValue("noteSpawnTime", 3000);
	modManager.setValue("fieldY", -200, 1);  */

	modManager.queueEase(1024, 1050, "fieldZ", 860, 'sineOut', 1);
	modManager.queueEase(1024, 1050, "fieldY", -180, 'sineOut', 1);
	modManager.queueEase(1024, 1050, "opponentSwap", 0.4, 'sineOut', 1);

	modManager.queueEase(1024, 1046, "stealth", 0.5, 'linear');
	modManager.queueEase(1024, 1046, "dark", 0.5, 'linear');

	modManager.queueSet(1050, "dark", 0);
	modManager.queueSet(1052, "stealth", 0);

	modManager.queueFuncOnce(1024, (ev, s) -> {
		game.camGame.visible = false;
	});

	modManager.queueFuncOnce(1056, (ev,s)->{
		game.callOnScripts("backshotSenpai");
		game.camGame.visible = true;
	});
	

	modManager.queueSet(1152, "stealth", 0.5, 1);
	modManager.queueSet(1152, "dark", 0.5);
	modManager.queueEase(1152, 1160, "stealth", 0, 'quartOut', 1);
	modManager.queueEase(1152, 1160, "dark", 0, 'quartOut');

	modManager.queueEase(864, 868, "confusionOffset-a", 0, "quadOut");
	modManager.queueEase(864, 868, "transformX-a", 0, "quartOut");

	var receptors:Array<Array<FlxSprite>> = [
		[],
		[]
	];
	for(p in 0...2){
		for(i in 0...4){
			var s = new FlxSprite();
			s.visible = false;
			s.cameras = [game.camOther];
			receptors[p].push(s);
			game.add(s);
		}
	}

	var velocitys:Array<Float> = [
		-600,
		-250,
		250,
		600
	];

	modManager.queueFuncOnce(1280, (ev, step) -> {
		for(p in 0...2){
			for(r in 0...4){
				receptors[p][r].velocity.x = velocitys[r] * FlxG.random.float(0.85, 1.15);
				receptors[p][r].velocity.y = -1200 * FlxG.random.float(0.95, 1.05);
				receptors[p][r].acceleration.y = 2600 * FlxG.random.float(0.95, 1.05);
			}
		}
	});

	modManager.queueFunc(1280, 1338, (ev, step) -> {
		for(p in 0...2){
			for(r in 0...4){
				modManager.setValue("transform" + r + "X", receptors[p][r].x, p);
				modManager.setValue("transform" + r + "Y", receptors[p][r].y, p);
			}
		}
	});

	
}