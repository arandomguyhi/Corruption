import flixel.math.FlxMath;
import openfl.Lib;

// bf game over

var playVideo:Bool = true;
game = PlayState.instance;
var stopPause = true;
var video:MP4Sprite;
var loading:FlxSprite;
var object:FlxSprite;
var loadingGroup:FlxSpriteGroup;

var loadAmount:Int = 0;
var loadFloat:Float = 0.0;
var loadRate:Float = 15.0;
var curLoad:Int = 0;

var timeSinceLastPress:Float;
var timeWithoutPressing:Float = 2;

var allowedToLoad:Bool = true;
var isLoading:Bool = false;

var hasEnded:Bool = false;
var startedCutscene:Bool = false;
var canLeave:Bool = true;

var quickSwitch:Bool = true;

var blackBottom:FlxSprite;

function onGameOver(){
    trace("game over cutscene time");
    if (playVideo){
        game.endingSong = true; // stop cam bumps
        game.camHUD.alpha = 0;
        game.zoomEveryBeat = 0;
        game.endingSong = true;
        game.camZooming = false;
        startedCutscene = true;
        game.inst.pause();
        game.vocals.pause();
        startVideo("bf death cutscene");
        playVideo = false;

        new FlxTimer().start(7, function(tmr){
            FlxTween.tween(gameOverText,  {alpha: 1}, 2.0, {ease: FlxEase.sineOut});

            quickSwitch = false;

            FlxG.sound.playMusic(Paths.music("null game over"), 1, true);
            tmr.destroy();
        });
        return Function_Stop;
    }
    return Function_Continue;
}

function onUpdate(elapsed){

    if (!startedCutscene) {return;}

    if (hasEnded) {return;}
    
    loadAmount = Std.int(loadFloat);

    if (curLoad != loadAmount){
        loading.animation.play(loadAmount, true);
        curLoad = loadAmount;
    }

    if (isLoading && (timeSinceLastPress >= timeWithoutPressing)) {
        onSpaceNotPressed();
        isLoading = false;
        timeSinceLastPress = 0;
    }
    
    if (!allowedToLoad){
    
        if (loadAmount > 0){
            loadFloat -= loadRate * elapsed;
            loading.alpha -= 1 * elapsed;
        } else {
            allowedToLoad = true;
        }
        
        return;
    }

    if (!canLeave){return;}

    if(FlxG.keys.pressed.SPACE||FlxG.keys.pressed.ESCAPE||FlxG.keys.pressed.ENTER||FlxG.keys.pressed.Z){
        if (quickSwitch){
            canLeave = false;
            if (FlxG.sound.music != null){
                FlxG.sound.music.stop();
            }
            startAndEnd();

        } else {
            canLeave = false;
            if (FlxG.sound.music != null){
                FlxG.sound.music.stop();
            }
            FlxG.sound.play(Paths.music("null game over end"));

            FlxTween.tween(gameOverText.scale,  {x: 2, y: 2}, 4.0, {ease: FlxEase.sineIn});
            FlxTween.tween(titleBlack,  {alpha: 1}, 4.0, {ease: FlxEase.sineIn});
            
            new FlxTimer().start(4, function(tmr){
                startAndEnd();
                tmr.destroy();
            });
        }
        
    } else {
        timeSinceLastPress += elapsed;
    }
}

function onSpaceNotPressed() {
    allowedToLoad = false;
    trace("Space Not Pressed!");
}

function onCreatePost() {

    blackBottom = new FlxSprite(0,0, Paths.image('menus/mainmenu/fullBlack'));
    blackBottom.scrollFactor.set(0,0);
    blackBottom.scale.set(1.7,1.7);
    blackBottom.alpha = 0;
    game.add(blackBottom);

    video = new MP4Sprite();
    video.cameras = [game.camOverlay];
    game.add(video);

    loading = new FlxSprite();
    loading.frames = Paths.getSparrowAtlas('loading circle');
    loading.animation.addByPrefix("0", '0load', 24, true);
    loading.animation.addByPrefix("1", '1load', 24, true);
    loading.animation.addByPrefix("2", '2load', 24, true);
    loading.animation.addByPrefix("3", '3load', 24, true);
    loading.animation.addByPrefix("4", '4load', 24, true);
    loading.animation.addByPrefix("5", '5load', 24, true);
    loading.animation.addByPrefix("6", '6load', 24, true);
    loading.animation.addByPrefix("7", '7load', 24, true);
    loading.animation.addByPrefix("8", '8load', 24, true);
    loading.animation.addByPrefix("9", '9load', 24, true);
    loading.animation.addByPrefix("10", '10load', 24, true);
    loading.animation.addByPrefix("11", '11load', 24, true);
    loading.animation.addByPrefix("12", '12load', 24, true);
    loading.animation.addByPrefix("13", '13load', 24, true);
    loading.animation.addByPrefix("14", '14load', 24, true);
    loading.animation.addByPrefix("15", '15load', 24, true);
    loading.animation.addByPrefix("16", '16load', 24, true);
    loading.animation.play("0", true);
    loading.scrollFactor.set(0,0);
    loading.scale.set(0.5,0.5);
    loading.antialiasing = true;
    loading.alpha = 1;
    loading.blend = 0;
    loading.cameras = [game.camOverlay];
    loading.setPosition(1180,630);

    gameOverText = new FlxSprite();
    gameOverText.frames = Paths.getSparrowAtlas('death_screen');
    gameOverText.animation.addByPrefix("idle", 'death_screen idle', 24, true);
    gameOverText.animation.play("idle", true);
    gameOverText.scrollFactor.set(0,0);
    gameOverText.scale.set(1.6,1.6);
    gameOverText.antialiasing = true;
    gameOverText.alpha = 0;
    gameOverText.cameras = [game.camOverlay];
    gameOverText.screenCenter();
    game.add(gameOverText);

    titleBlack = new FlxSprite(0,0, Paths.image('menus/mainmenu/fullBlack'));
    titleBlack.scrollFactor.set(0,0);
    titleBlack.scale.set(1.7,1.7);
    titleBlack.alpha = 1;
    game.add(titleBlack);
    titleBlack.cameras = [game.camOverlay];
    FlxTween.tween(titleBlack,  {alpha: 0}, 1.0, {ease: FlxEase.sineOut});
}

function startVideo(name:String)
{
    blackBottom.alpha = 1;
    
    video.bitmap.onFormatSetup.add(function():Void
    {
        video.scale.set(1,1);
        video.setPosition(0,0);
        video.scrollFactor.set(0,0);
    });
    video.alpha = 1;


    video.load(Paths.video(name));
    video.play();

    game.add(loading);
}

function startAndEnd(){
    hasEnded = true;
    game.doGameOver();
    if (video != null){
        video.destroy();
    }
    FlxTween.tween(loading, {alpha: 0}, 2, {ease: FlxEase.quadOut});
}


function onPause(){
    video.pause();
}

function onResume(){
    video.resume();
}

function onDestroy(){
    video.destroy();
}
